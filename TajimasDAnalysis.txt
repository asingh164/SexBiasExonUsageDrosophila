##########################################
######      Tajima's D Analysis     ######
##########################################

########################################################################################################################
########################################################################################################################
###  This is a script that will calculate Tajima's D in a sliding window in the DGRP and the DPGP3 Populations       ###
###  DGRP script is in the first half, second half deals with the DPGP3 Population                                   ###
###  Author: Amardeep Singh -- amardeep.singh[at]utoronto.ca                                                         ###
###  This script makes use of publicly available sequence data for the DGRP population                               ###
########################################################################################################################
########################################################################################################################

#########################################################################
###     Get list of SNPS falling within Genes in the DGRP VCF file    ###
#########################################################################


## Original location of DGRP VCF files containing both variant and invariants, 4fold sites: "/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs"
##  Files are split by chromosome arm with the following format chr.XX.4fold_modified.vcf where XX is replaced with chromosome arm (or just X for x-chromosome)
# export file paths
export PATH_TO_DGRP_VCFS=/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs
#export PATH_TO_DGRP_INVARIANT_VCFS_SPLIT_BY_CHROMOSOME=/plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/DGRP.Genomic.Data/VCF.variant.invariant
export PATH_TO_DMEL_GTF=/plas1/amardeep.singh/Flybase.Dmel.Genome.Release/gtf/dmel-all-r6.32.filtered.gtf
export PATH_TO_OUTPUT=/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/output

# Add BED format to first three columns of vcf files
# Redirect header first
cat ${PATH_TO_DGRP_VCF}chr.2L.4fold_modified.vcf | head -1 >  ${PATH_TO_OUTPUT}/vcf.header
cat ${PATH_TO_DGRP_VCF}chr.2L.4fold_modified.vcf | awk ' BEGIN {OFS = FS = "\t"} {print $1 "\t" $2 "\t" $2+1 "\t" $0}' > ${PATH_TO_OUTPUT}/chr.2L.4fold_modified.vcf.tmp &
cat ${PATH_TO_DGRP_VCF}chr.2R.4fold_modified.vcf | awk ' BEGIN {OFS = FS = "\t"} {print $1 "\t" $2 "\t" $2+1 "\t" $0}' > ${PATH_TO_OUTPUT}/chr.2R.4fold_modified.vcf.tmp &
cat ${PATH_TO_DGRP_VCF}chr.3L.4fold_modified.vcf | awk ' BEGIN {OFS = FS = "\t"} {print $1 "\t" $2 "\t" $2+1 "\t" $0}' > ${PATH_TO_OUTPUT}/chr.3L.4fold_modified.vcf.tmp &
cat ${PATH_TO_DGRP_VCF}chr.3R.4fold_modified.vcf | awk ' BEGIN {OFS = FS = "\t"} {print $1 "\t" $2 "\t" $2+1 "\t" $0}' > ${PATH_TO_OUTPUT}/chr.3R.4fold_modified.vcf.tmp &
cat ${PATH_TO_DGRP_VCF}chr.X.4fold_modified.vcf | awk ' BEGIN {OFS = FS = "\t"} {print $1 "\t" $2 "\t" $2+1 "\t" $0}' > ${PATH_TO_OUTPUT}/chr.X.4fold_modified.vcf.tmp &

# Remove spaces from files
ls ${PATH_TO_OUTPUT}/*.tmp | parallel "sed -i 's/ //g' "

# Intersect vcf with BED formatted columns with GTF using bedtools
ls ${PATH_TO_OUTPUT}/*.tmp | sed 's/.vcf.tmp//'  | parallel "bedtools intersect -wa -wb -header -a {}.vcf.tmp -b ${PATH_TO_DMEL_GTF} > {}.Intersect.output.vcf"

# Some formatting
# Remove all spaces
ls ${PATH_TO_OUTPUT}/*Intersect.output.vcf | parallel "sed -i 's/ //g'" &
ls ${PATH_TO_OUTPUT}/*Intersect.output.vcf | parallel "sed -i 's/\"//g'" &
ls ${PATH_TO_OUTPUT}/*Intersect.output.vcf | parallel "sed -i 's/;/\t/'"

# Retain relevent fields of information
cat ${PATH_TO_OUTPUT}/chr.2L.4fold_modified.Intersect.output.vcf | cut -f 4-217,226 > chr.2L.4fold_modified.Intersect.output.vcf.tmp &
cat ${PATH_TO_OUTPUT}/chr.2R.4fold_modified.Intersect.output.vcf | cut -f 4-217,226 > chr.2R.4fold_modified.Intersect.output.vcf.tmp &
cat ${PATH_TO_OUTPUT}/chr.3L.4fold_modified.Intersect.output.vcf | cut -f 4-217,226 > chr.3L.4fold_modified.Intersect.output.vcf.tmp &
cat ${PATH_TO_OUTPUT}/chr.2R.4fold_modified.Intersect.output.vcf | cut -f 4-217,226 > chr.3R.4fold_modified.Intersect.output.vcf.tmp &
cat ${PATH_TO_OUTPUT}/chr.X.4fold_modified.Intersect.output.vcf | cut -f 4-217,226 > chr.X.4fold_modified.Intersect.output.vcf.tmp &

# Filter for unique sites
cat ${PATH_TO_OUTPUT}/chr.2L.4fold_modified.Intersect.output.vcf.tmp | awk -F"\t" '!seen[$1, $2]++' > tmp1 && mv tmp1 ${PATH_TO_OUTPUT}/chr.2L.4fold_modified.Intersect.output.vcf &
cat ${PATH_TO_OUTPUT}/chr.2R.4fold_modified.Intersect.output.vcf.tmp | awk -F"\t" '!seen[$1, $2]++' > tmp2 && mv tmp2 ${PATH_TO_OUTPUT}/chr.2R.4fold_modified.Intersect.output.vcf &
cat ${PATH_TO_OUTPUT}/chr.3L.4fold_modified.Intersect.output.vcf.tmp | awk -F"\t" '!seen[$1, $2]++' > tmp3 && mv tmp3 ${PATH_TO_OUTPUT}/chr.3L.4fold_modified.Intersect.output.vcf &
cat ${PATH_TO_OUTPUT}/chr.3R.4fold_modified.Intersect.output.vcf.tmp | awk -F"\t" '!seen[$1, $2]++' > tmp4 && mv tmp4 ${PATH_TO_OUTPUT}/chr.3R.4fold_modified.Intersect.output.vcf &
cat ${PATH_TO_OUTPUT}/chr.X.4fold_modified.Intersect.output.vcf.tmp | awk -F"\t" '!seen[$1, $2]++' > tmp5 && mv tmp5 ${PATH_TO_OUTPUT}/chr.X.4fold_modified.Intersect.output.vcf &

# combine VCFs for each arm
# First, remove header fro every VCF except for the chr2L vcf
sed -i '/^#CHROM/d' chr.2R.4fold_modified.Intersect.output.vcf &
sed -i '/^#CHROM/d' chr.3L.4fold_modified.Intersect.output.vcf &
sed -i '/^#CHROM/d' chr.3R.4fold_modified.Intersect.output.vcf &
sed -i '/^#CHROM/d' chr.X.4fold_modified.Intersect.output.vcf &
# Combine vcfs
cat chr.2L.4fold_modified.Intersect.output.vcf chr.2R.4fold_modified.Intersect.output.vcf chr.3L.4fold_modified.Intersect.output.vcf chr.3R.4fold_modified.Intersect.output.vcf chr.X.4fold_modified.Intersect.output.vcf > DGRP.4fold.intersect.output.vcf

# Clean up intermediate files
rm *.tmp

##################################################
###     Calculating Tajimas D in the DGRP      ###
##################################################

# The basic strategy here will be:
# 1. Import the variant/invariant 4fold vcf into R
# 2. Parse the file for variant sites into a separate file
# 3. Take the variant vcf and split the file into objects, each containing all of the variant sites in a single gene
# 4. For each unique gene vcf, make a SFS, count up the total number of 4fold sites in that gene (from the original variant/invariant VCF) and calculate TajimasD

#--- R CODE ---

# Import packages
library(foreach)
library(doParallel)

# Source the VCFtoSFS.R script and TajimasDfromSFS.R scripts
source("/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/VCFtoSFS.R")
#source("/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/TajimasDfromSFS.R")


GetTajimasDFromVCF<-function(geneID, vcf, L){
  geneID = geneID
  vcf = as.data.frame(vcf)
  sampleSizePerSite<- sapply(1:(dim(vcf)[1]), function(x) sum(!is.na(vcf[x,])))
  minAllowableSampleSize<-75
  numExcludedSites<-sum(sampleSizePerSite < minAllowableSampleSize)

  vcf.Filtered <-vcf[sampleSizePerSite>=minAllowableSampleSize, ]
  if (nrow(vcf.Filtered) > 0){
    sampleSizePerSite.UsableSites<- sapply(1:(dim(vcf.Filtered)[1]), function(x) sum(!is.na(vcf.Filtered[x,])))
    numNonRefSamplesPerSite.UsableSites<- sapply(1:(dim(vcf.Filtered)[1]), function(x) sum(vcf.Filtered[x,], na.rm = TRUE))
    minSampleSize<-min(sampleSizePerSite.UsableSites)

    nSubSamples = 100; listOfTajDValues<-rep(NA, nSubSamples); listOfSValues<-rep(NA, nSubSamples)
    for(i in 1:nSubSamples){
      nNonRefSNPsPerSite<- sapply(1:(dim(vcf.Filtered)[1]), function(x) sum(sample(c(rep(0, sampleSizePerSite.UsableSites[x]- numNonRefSamplesPerSite.UsableSites[x]),
                                                              rep(1, numNonRefSamplesPerSite.UsableSites[x])), size = minSampleSize, replace = FALSE)))
      sfs<-rep(NA, dim(vcf.Filtered)[2])
      for(j in 1:length(sfs)) sfs[j] = sum(nNonRefSNPsPerSite == j)
      listOfTajDValues[i]<-GetTajimasD(sfs, L*(1- (numExcludedSites/(dim(vcf)[1]))), minSampleSize)
      listOfSValues[i]<-sum(sfs)
    }
    returnThisTajD<-median(listOfTajDValues)
    indexOfMedian<-which(abs(listOfTajDValues - median(listOfTajDValues)) == min(abs(listOfTajDValues - median(listOfTajDValues))))
    returnThisS <- mean(listOfSValues[indexOfMedian])
    return(c(geneID,returnThisTajD, returnThisS))
  } else {
    return(c(geneID,NA,nrow(vcf)))
  }
}

# Import variant/invariant VCF
invariant.variant.vcf = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/output/DGRP.4fold.intersect.output.vcf", header = FALSE)
# Clean up the vcf file by adding a proper header and format the geneID column
First, keep only GT information for each sample
invariant.variant.vcf[,c(10:39)] = apply(invariant.variant.vcf[,c(10:39)], 2, function(x)  gsub("\\:.*","",x))

colnames(invariant.variant.vcf) = c((as.vector(as.matrix(invariant.variant.vcf[1,])))[1:(length(invariant.variant.vcf[1,])-1)],"geneID")
invariant.variant.vcf$geneID = substring(invariant.variant.vcf$geneID,8,18)
# Remove first row from the VCF
#invariant.variant.vcf  = invariant.variant.vcf [-1,]

# Parse VCF into file containing only variant sites
variant.vcf = invariant.variant.vcf[invariant.variant.vcf$ALT=="A" | invariant.variant.vcf$ALT=="C"| invariant.variant.vcf$ALT=="G" | invariant.variant.vcf$ALT=="T", ]

# Generate 'popmap'
popmap.input = as.data.frame((colnames(invariant.variant.vcf)[10:(length(colnames(invariant.variant.vcf))-1)]))
popmap.input$population = "DGRP"
colnames(popmap.input)=c("sample.name", "population")

# Loop through each gene to generate a SFS and calculate TajimasD


#setup parallel backend to use many processors
cores=detectCores() - 40
#cl=makeCluster(cores[1]-50) #not to overload your computer
#cl=makeCluster(100) #not to overload your computer
doParallel::registerDoParallel(cores)

#output = foreach(i=1:length(geneID.index), .combine=rbind) %dopar% {
output = foreach(i=1:200, .combine=rbind) %dopar% {
  geneID = geneID.index[i]
  vcf.gene = variant.vcf[variant.vcf$geneID==geneID,]

  # generate genotype object
  gt = vcf2gt(vcf.gene[1:(length(names(vcf.gene))-1)],popmap.input)
  vcf = gt$genotype
  L = nrow(invariant.variant.vcf[invariant.variant.vcf$geneID == geneID,])

  GetTajimasDFromVCF(geneID,vcf,L)
}
#stop cluster
stopCluster(cl)

# Clean up output file and write to disk
geneID.index = unique(variant.vcf$geneID)
tajimasD.output.df = as.data.frame(matrix(NA,ncol = 3, nrow = length(geneID.index)))
colnames(tajimasD.output.df) = c("geneID","TajimasD.adjusted","NumVariantSites")
tajimasD.output.df$geneID = geneID.index


# Non parallel version #

#for (i in 1:length(geneID.index)){

#  geneID = geneID.index[i]
#  vcf.gene = variant.vcf[variant.vcf$geneID==geneID,]

#  # generate genotype object
#  gt = vcf2gt(vcf.gene[1:(length(names(vcf.gene))-1)],popmap.input)
#  vcf = gt$genotype
#  L = nrow(invariant.variant.vcf[invariant.variant.vcf$geneID == geneID,])

#  TajimasD.info = GetTajimasDFromVCF(vcf,L)

#  tajimasD.output.df$TajimasD.adjusted[tajimasD.output.df$geneID == geneID] = TajimasD.info[1]
#  tajimasD.output.df$NumVariantSites[tajimasD.output.df$geneID == geneID] = TajimasD.info[2]
#print(i)
#}

write.table(tajimasD.output.df, file = "/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/output/DGRP.TajimasD.per.gene_April212021.txt", sep = "\t", row.names=F,quote=F,col.names=T)


################################################################################
###   Intersect list of Genes with with TajimasD Calculations in the DGRP    ###
################################################################################

# Sort the DGRP file
# Format the DGRP Tajimas D file to a bed format file
#cat /plas1/amardeep.singh/RNA.Seq.Data/DGRP.Genomic.Data/DGRP.SNP.Level.Tajima.D | awk ' BEGIN {OFS = FS = "\t"} {print $1 "\t" $2 "\t" $2+1 "\t" $4}' > /plas1/amardeep.singh/RNA.Seq.Data/DGRP.Genomic.Data/DGRP.SNP.Level.Tajima.D.coordinates.bed
# Remove header from file
#sed -i '/^CHROM/d ' /plas1/amardeep.singh/RNA.Seq.Data/DGRP.Genomic.Data/DGRP.SNP.Level.Tajima.D.coordinates.bed

## Intersect the Junctionseq significant hits bed file with the DGRP bed file
# First, sort the bed files
#sort -k1,1 -k2,2n /plas1/amardeep.singh/RNA.Seq.Data/DGRP.Genomic.Data/DGRP.SNP.Level.Tajima.D.coordinates.bed > /plas1/amardeep.singh/RNA.Seq.Data/DGRP.Genomic.Data/DGRP.SNP.Level.Tajima.D.coordinates.sorted.bed
# Take list of SNPs and intersect it with a GFF to find out which genes each SNP belongs to (if they fall in coding regions at all)
#bedtools intersect -wa -wb -a /plas1/amardeep.singh/RNA.Seq.Data/DGRP.Genomic.Data/DGRP.SNP.Level.Tajima.D.coordinates.sorted.bed -b /plas1/amardeep.singh/Flybase.Dmel.Genome.Release/gtf/dmel-all-r6.32.filtered.gtf > /plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/DGRP.SNP.Level.Intersect.Output

## Remove duplicate records
#cat /plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/DGRP.SNP.Level.Intersect.Output | sort -u -s -k1,2 > /plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/DGRP.SNP.Level.Intersect.Filtered.Output

# Redirect the fields of interest
#cat /plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/DGRP.SNP.Level.Intersect.Filtered.Output | awk 'BEGIN { OFS = FS = "\t" } { print $1 "\t" $2 "\t" $4 "\t" substr($13, 10,11)}' > /plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/DGRP.SNP.Level.Intersect.Filtered.Output.formatted

# --- R Code ---
# Now we are going to the Tajima's D for each gene, averaged across all SNPs in a gene
#rm(list=ls())
#require(doBy)
#DGRP.data = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/DGRP.Intersect/DGRP.SNP.Level.Intersect.Filtered.Output.formatted", sep = "\t", header = FALSE)
# List of 4 fold degenerate sites (File is generated in the piN:piSAnalysis.txt script)
#diversity.4fold = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/diversity.4fold.sites", header = FALSE)

# Format chromosome column to be the same and retain only columns needed
#diversity.4fold$V1 = substr(diversity.4fold$V1, 4,5)
#diversity.4fold$V4 = substr(diversity.4fold$V4, 8,18)
# Retain only columns needed
#diversity.4fold=diversity.4fold[,c(1,2,4)]

# Add an index column to each file
#diversity.4fold$index = paste(diversity.4fold$V1, diversity.4fold$V2, sep = ":")
#DGRP.data$index = paste(DGRP.data$V1, DGRP.data$V2, sep = ":")

# Remove duplicates from the degeneracy file
#diversity.4fold.unique = unique(diversity.4fold)
# Add column names to files
#colnames(diversity.4fold.unique) = c("chr", "pos", "geneID", "index")
#colnames(DGRP.data) = c("chr", "pos", "tajimasD","geneID", "index")
# Obtain a list of the number of 4fold sites per gene
#number.4fold.per.gene = summaryBy(index ~ geneID, FUN=c(length), data = diversity.4fold.unique)

# Merge 4fold sites file with TajimasD file
#merged.data = merge(diversity.4fold.unique, DGRP.data, by = c("index", "geneID"))
#tajimasD.4fold.per.gene = summaryBy(tajimasD ~ geneID, FUN = c(mean, length), data = merged.data)

# Combine tajimasD per gene with data on total number of 4fold sites
#tajimasD.4fold.per.gene = merge(tajimasD.4fold.per.gene,number.4fold.per.gene, by.x = "geneID", by.y = "geneID")
#colnames(tajimasD.4fold.per.gene) = c("geneID", "tajimasD.mean", "numberOfSegregatingSites","numberOf4FoldSites")
#tajimasD.4fold.per.gene = aggregate(merged.data[, "V3.x"], list(merged.data$V3.x), mean)

#write.table(tajimasD.4fold.per.gene, "/plas1/amardeep.singh/RNA.Seq.Data/DGRP.Genomic.Data/DGRP.TajimasD.4fold.Per.Gene", sep = "\t", quote = F, row.name = F, col.name = T)
#\--- R CODE ---

###################################################################
###             SNP LEVEL ANALYSIS -- Assigning Hits            ###
###################################################################

# --- R Code ---
rm(list=ls())
require(doBy)
# Loading in data files
# Read in JunctionSeq results
junctionseq.results.body = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/BodyOutput/Aug1.Body.OnlyallGenes.results.txt", header = TRUE, sep = "\t")
junctionseq.results.head = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/HeadOutput/Aug1.Head.OnlyallGenes.results.txt", header = TRUE, sep = "\t")
# Read in Tajimas D per gene results
tajimasD.per.gene = read.table("/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/output/DGRP.TajimasD.per.gene.txt", header = TRUE, sep = "\t")
# Rename the Tajima's D column
colnames(tajimasD.per.gene)[2] = "TajimasD"

# Cleaning up junctionseq and Tajimas D file of NA values
# Remove any sites that were not tested
junctionseq.results.body = junctionseq.results.body[!(is.na(junctionseq.results.body$pvalue)),]
junctionseq.results.head = junctionseq.results.head[!(is.na(junctionseq.results.head$pvalue)),]
tajimasD.per.gene = tajimasD.per.gene[!(is.na(tajimasD.per.gene$TajimasD)),]

# Lets remove any rows where the expr in males or females is less than 50
junctionseq.results.body.filtered = junctionseq.results.body[junctionseq.results.body$expr_male > 50 & junctionseq.results.body$expr_female > 50 ,]
junctionseq.results.head.filtered = junctionseq.results.head[junctionseq.results.head$expr_male > 50 & junctionseq.results.head$expr_female > 50 ,]

# Merge the junctionseq files with the TajimasD per gene file
junctionseq.results.body.merged = merge(junctionseq.results.body.filtered, tajimasD.per.gene, by.x = "geneID", by.y = "geneID", sort = FALSE)
junctionseq.results.head.merged = merge(junctionseq.results.head.filtered, tajimasD.per.gene, by.x = "geneID", by.y = "geneID", sort = FALSE)

# Clean up data and remove duplicate genes (i.e., keep only the gene level and not exon level info)
junctionseq.results.body.merged = junctionseq.results.body.merged[, c(1,25:27)]
junctionseq.results.body.merged = junctionseq.results.body.merged[!duplicated(junctionseq.results.body.merged[1:3]),]
#junctionseq.results.body.merged = junctionseq.results.body.merged[junctionseq.results.body.merged$numberOfSegregatingSites >= 6,]
junctionseq.results.head.merged = junctionseq.results.head.merged[, c(1,25:27)]
junctionseq.results.head.merged = junctionseq.results.head.merged[!duplicated(junctionseq.results.head.merged[1:3]),]
#junctionseq.results.head.merged = junctionseq.results.head.merged[junctionseq.results.head.merged$numberOfSegregatingSites >= 6,]

# Assign significant hits
# Body
junctionseq.results.body.merged$sig.hit = NA
junctionseq.results.body.merged$sig.hit[junctionseq.results.body.merged$geneWisePadj <= 0.01] = 1
junctionseq.results.body.merged$sig.hit[!(junctionseq.results.body.merged$geneWisePadj <= 0.01)] = 0
# Head
junctionseq.results.head.merged$sig.hit = NA
junctionseq.results.head.merged$sig.hit[junctionseq.results.head.merged$geneWisePadj <= 0.01] = 1
junctionseq.results.head.merged$sig.hit[!(junctionseq.results.head.merged$geneWisePadj <= 0.01)] = 0

# Collapse duplicates
junctionseq.results.body.merged.unique = unique(junctionseq.results.body.merged)
junctionseq.results.head.merged.unique = unique(junctionseq.results.head.merged)

# Bootstrap intervals for mean Tajima's D
# Sig hits
body.sig.hits = vector(mode = "numeric", length = 10000)
body.nonsig.hits = vector(mode = "numeric", length = 10000)
head.sig.hits = vector(mode = "numeric", length = 10000)
head.nonsig.hits = vector(mode = "numeric", length = 10000)

for (i in 1:10000) {
  body.sig.hits[i] = mean(sample(junctionseq.results.body.merged.unique$TajimasD[junctionseq.results.body.merged.unique$sig.hit == 1], nrow(junctionseq.results.body.merged.unique[junctionseq.results.body.merged.unique$sig.hit == 1,]), replace = TRUE))
  body.nonsig.hits[i] = mean(sample(junctionseq.results.body.merged.unique$TajimasD[junctionseq.results.body.merged.unique$sig.hit == 0], nrow(junctionseq.results.body.merged.unique[junctionseq.results.body.merged.unique$sig.hit == 0,]), replace = TRUE))
  head.sig.hits[i] = mean(sample(junctionseq.results.head.merged.unique$TajimasD[junctionseq.results.head.merged.unique$sig.hit == 1], nrow(junctionseq.results.head.merged.unique[junctionseq.results.head.merged.unique$sig.hit == 1,]), replace = TRUE))
  head.nonsig.hits[i] = mean(sample(junctionseq.results.head.merged.unique$TajimasD[junctionseq.results.head.merged.unique$sig.hit == 0], nrow(junctionseq.results.head.merged.unique[junctionseq.results.head.merged.unique$sig.hit == 0,]), replace = TRUE))
print(i)
}

# Construct dataframe for plotting
# Body results
body.tajimasD = summaryBy(TajimasD ~ sig.hit, data = junctionseq.results.body.merged.unique)
head.tajimasD = summaryBy(TajimasD ~ sig.hit, data = junctionseq.results.head.merged.unique)
body.tajimasD$tissue = "body"
head.tajimasD$tissue = "head"
tajimasD.summary = rbind(body.tajimasD,head.tajimasD)
# Assign quantiles to each mean value
tajimasD.summary$lowerCI = c( quantile(body.nonsig.hits,0.025),quantile(body.sig.hits,0.025),
                              quantile(head.nonsig.hits,0.025),quantile(head.sig.hits,0.025))
tajimasD.summary$upperCI = c( quantile(body.nonsig.hits,0.975),quantile(body.sig.hits,0.975),
                              quantile(head.nonsig.hits,0.975),quantile(head.sig.hits,0.975))


#########################################################
###     Tajimas D and Sex-Bias in Gene expression     ###
#########################################################
rm(list = ls())
require(dplyr)
require(doBy)
require(ggplot2)
require(permuco)
require(car)

# Load in Tajimas D data and intersect with JunctionSeq output

# --- R Code ---
/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/output/DGRP.TajimasD.per.gene.txt
/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/nucleotide.diversity.per.gene.Aug10.txt

## Loading in data files
# Read in JunctionSeq results
junctionseq.results.body = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/BodyOutput/Aug1.Body.OnlyallGenes.results.txt", header = TRUE, sep = "\t")
junctionseq.results.head = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/HeadOutput/Aug1.Head.OnlyallGenes.results.txt", header = TRUE, sep = "\t")
# Read in Tajimas D per gene results
tajimasD.per.gene = read.table("/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/output/DGRP.TajimasD.per.gene.txt", header = TRUE, sep = "\t")
## Load in the differential gene expression data
DGE.data.body = read.table("/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.body.txt", header = TRUE, sep = "\t")
DGE.data.head = read.table("/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.head.txt", header = TRUE, sep = "\t")

## Cleaning up data files
# Rename the Tajima's D column
colnames(tajimasD.per.gene)[2] = "TajimasD"
# Remove genes that didn't have enough individuals with genotypic information present to calculate TajimasD
tajimasD.per.gene = tajimasD.per.gene[!(is.na(tajimasD.per.gene$TajimasD)),]

# Cleaning up junctionseq file
# Remove any sites that were not tested
junctionseq.results.body = junctionseq.results.body[!(is.na(junctionseq.results.body$pvalue)),]
junctionseq.results.head = junctionseq.results.head[!(is.na(junctionseq.results.head$pvalue)),]
# Lets remove any rows where the expr in males or females is less than 50 in the junctionseq data
junctionseq.results.filtered.body = junctionseq.results.body[junctionseq.results.body$expr_male > 50 & junctionseq.results.body$expr_female > 50,]
junctionseq.results.filtered.head = junctionseq.results.head[junctionseq.results.head$expr_male > 50 & junctionseq.results.head$expr_female > 50,]

# Merge the junctionseq and TajimasD data files and clean them up
junctionseq.results.body.merged = merge(junctionseq.results.filtered.body, tajimasD.per.gene, by.x = "geneID", by.y = "geneID", sort = FALSE)
junctionseq.results.body.merged = junctionseq.results.body.merged[, c(1,14,25:27)]
junctionseq.results.body.merged = junctionseq.results.body.merged[!duplicated(junctionseq.results.body.merged[1:3]),]

junctionseq.results.head.merged = merge(junctionseq.results.filtered.head, tajimasD.per.gene, by.x = "geneID", by.y = "geneID", sort = FALSE)
junctionseq.results.head.merged = junctionseq.results.head.merged[, c(1,14,25:27)]
junctionseq.results.head.merged = junctionseq.results.head.merged[!duplicated(junctionseq.results.head.merged[1:3]),]

# Filter out genes with fewer than 30 4fold sites
#junctionseq.results.body.merged = junctionseq.results.body.merged[junctionseq.results.body.merged$numberOf4FoldSites >= 30, ]
#junctionseq.results.head.merged = junctionseq.results.head.merged[junctionseq.results.head.merged$numberOf4FoldSites >= 30, ]

# Assign significant hits
junctionseq.results.body.merged$sig.hit = NA
junctionseq.results.body.merged$sig.hit[junctionseq.results.body.merged$geneWisePadj <= 0.01] = 1
junctionseq.results.body.merged$sig.hit[!(junctionseq.results.body.merged$geneWisePadj <= 0.01)] = 0

junctionseq.results.head.merged$sig.hit = NA
junctionseq.results.head.merged$sig.hit[junctionseq.results.head.merged$geneWisePadj <= 0.01] = 1
junctionseq.results.head.merged$sig.hit[!(junctionseq.results.head.merged$geneWisePadj <= 0.01)] = 0

# Collapse duplicates
junctionseq.results.body.merged.unique = unique(junctionseq.results.body.merged)
junctionseq.results.head.merged.unique = unique(junctionseq.results.head.merged)

# Merge Junctionseq/TajimasD data with DGE data
junctionseq.results.body.merged.unique = merge(junctionseq.results.body.merged.unique, DGE.data.body, by.x = "geneID", by.y = "FlyBaseID")
junctionseq.results.head.merged.unique = merge(junctionseq.results.head.merged.unique, DGE.data.head, by.x = "geneID", by.y = "FlyBaseID")

# Subset out the columns of interest (i.e., gene ID, TajimasD, significant differences in exon usage, and log2FC)
expression.data.body = junctionseq.results.body.merged.unique[, c(1,2:12)]
expression.data.head = junctionseq.results.head.merged.unique[, c(1,2:12)]

# Assign quantiles for sex-averaged mean expression
expression.data.body = expression.data.body %>% mutate(sex.averaged.expression.quantile = ntile(baseMean, 3))
expression.data.head = expression.data.head %>% mutate(sex.averaged.expression.quantile = ntile(baseMean, 3))

# Seperate out genes into male and female biased gene expression
male.biased.body = expression.data.body[expression.data.body$log2FoldChange > 0,]
female.biased.body = expression.data.body[expression.data.body$log2FoldChange < 0,]
male.biased.head = expression.data.head[expression.data.head$log2FoldChange > 0,]
female.biased.head = expression.data.head[expression.data.head$log2FoldChange < 0,]

# Remove any rows that have an NA added to them
male.biased.body = male.biased.body[!(is.na(male.biased.body$log2FoldChange)),]
female.biased.body = female.biased.body[!(is.na(female.biased.body$log2FoldChange)),]
male.biased.head = male.biased.head[!(is.na(male.biased.head$log2FoldChange)),]
female.biased.head = female.biased.head[!(is.na(female.biased.head$log2FoldChange)),]

# Assign quantiles for sex-averaged mean expression
#male.biased.body = male.biased.body %>% mutate(sex.averaged.expression.quantile = ntile(baseMean, 3))
#male.biased.head = male.biased.body %>% mutate(sex.averaged.expression.quantile = ntile(baseMean, 3))
#female.biased.body = female.biased.body %>% mutate(sex.averaged.expression.quantile = ntile(baseMean, 3))
#female.biased.head = female.biased.head %>% mutate(sex.averaged.expression.quantile = ntile(baseMean, 3))

# Assign quantile for both MBG and FBG within each sex-averaged expression quantile ## Careful in using this variable, it is only relevant when parsed by sex-averaged gene expression!
male.biased.body.lowexp = male.biased.body[male.biased.body$sex.averaged.expression.quantile == 1,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
male.biased.body.intermediateexp = male.biased.body[male.biased.body$sex.averaged.expression.quantile == 2,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
male.biased.body.highexp = male.biased.body[male.biased.body$sex.averaged.expression.quantile == 3,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
male.biased.head.lowexp = male.biased.head[male.biased.head$sex.averaged.expression.quantile == 1,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
male.biased.head.intermediateexp = male.biased.head[male.biased.head$sex.averaged.expression.quantile == 2,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
male.biased.head.highexp = male.biased.head[male.biased.head$sex.averaged.expression.quantile == 3,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))

female.biased.body.lowexp = female.biased.body[female.biased.body$sex.averaged.expression.quantile == 1,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.body.intermediateexp = female.biased.body[female.biased.body$sex.averaged.expression.quantile == 2,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.body.highexp = female.biased.body[female.biased.body$sex.averaged.expression.quantile == 3,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.head.lowexp = female.biased.head[female.biased.head$sex.averaged.expression.quantile == 1,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.head.intermediateexp = female.biased.head[female.biased.head$sex.averaged.expression.quantile == 2,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.head.highexp = female.biased.head[female.biased.head$sex.averaged.expression.quantile == 3,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))

# For the male genes, lets add 3 to each quantile
male.biased.body.lowexp$sex.averaged.log2FC.quantile = male.biased.body.lowexp$sex.averaged.log2FC.quantile + 3
male.biased.body.intermediateexp$sex.averaged.log2FC.quantile = male.biased.body.intermediateexp$sex.averaged.log2FC.quantile + 3
male.biased.body.highexp$sex.averaged.log2FC.quantile = male.biased.body.highexp$sex.averaged.log2FC.quantile + 3
male.biased.head.lowexp$sex.averaged.log2FC.quantile = male.biased.head.lowexp$sex.averaged.log2FC.quantile + 3
male.biased.head.intermediateexp$sex.averaged.log2FC.quantile = male.biased.head.intermediateexp$sex.averaged.log2FC.quantile + 3
male.biased.head.highexp$sex.averaged.log2FC.quantile = male.biased.head.highexp$sex.averaged.log2FC.quantile + 3

# Combine back into male-biased and female-biased dataframes
male.biased.body = rbind(male.biased.body.lowexp, male.biased.body.intermediateexp, male.biased.body.highexp)
male.biased.head = rbind(male.biased.head.lowexp, male.biased.head.intermediateexp, male.biased.head.highexp)
female.biased.body = rbind(female.biased.body.lowexp, female.biased.body.intermediateexp, emale.biased.body.highexp)
female.biased.head = rbind(female.biased.head.lowexp, female.biased.head.intermediateexp, female.biased.head.highexp)

# Assign quantile for both MBG and FBG overall
male.biased.body = male.biased.body %>% mutate(log2FC.quantile = ntile(log2FoldChange, 3))
male.biased.head = male.biased.head %>% mutate(log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.body = female.biased.body %>% mutate(log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.head = female.biased.head %>% mutate(log2FC.quantile = ntile(log2FoldChange, 3))

# For the male genes, lets add 3 to each quantile
male.biased.body$log2FC.quantile = male.biased.body$log2FC.quantile + 3
male.biased.head$log2FC.quantile = male.biased.head$log2FC.quantile + 3

# Merge data back
expression.data.body = rbind(male.biased.body,female.biased.body)
expression.data.head = rbind(male.biased.head,female.biased.head)
expression.data.body$tissue= "body"
expression.data.head$tissue= "head"

# Assign genes to predefined 'bins' of log2FC in gene expression
# Add upper and lower CIs for log2FC means
expression.data.body$log2FC.upperCI = expression.data.body$log2FoldChange + expression.data.body$lfcSE * 2
expression.data.body$log2FC.lowerCI = expression.data.body$log2FoldChange - expression.data.body$lfcSE * 2
expression.data.head$log2FC.upperCI = expression.data.head$log2FoldChange + expression.data.head$lfcSE * 2
expression.data.head$log2FC.lowerCI = expression.data.head$log2FoldChange - expression.data.head$lfcSE * 2

expression.data.body$log2FC.bins[expression.data.body$log2FC.upperCI < -2 ] = 1
expression.data.body$log2FC.bins[expression.data.body$log2FC.lowerCI >= -2 & expression.data.body$log2FC.upperCI <= -0.5 ] = 2
expression.data.body$log2FC.bins[expression.data.body$log2FC.lowerCI > -0.5 & expression.data.body$log2FC.upperCI < 0.5 ] = 3
expression.data.body$log2FC.bins[expression.data.body$log2FC.lowerCI >= 0.5 & expression.data.body$log2FC.upperCI <= 2 ] = 4
expression.data.body$log2FC.bins[expression.data.body$log2FC.lowerCI > 2 ] = 5

expression.data.head$log2FC.bins[expression.data.head$log2FC.upperCI < -2 ] = 1
expression.data.head$log2FC.bins[expression.data.head$log2FC.lowerCI >= -2 & expression.data.head$log2FC.upperCI <= -0.5 ] = 2
expression.data.head$log2FC.bins[expression.data.head$log2FC.lowerCI > -0.5 & expression.data.head$log2FC.upperCI < 0.5 ] = 3
expression.data.head$log2FC.bins[expression.data.head$log2FC.lowerCI >= 0.5 & expression.data.head$log2FC.upperCI <= 2 ] = 4
expression.data.head$log2FC.bins[expression.data.head$log2FC.lowerCI > 2 ] = 5

expression.data.tajimasD = rbind(expression.data.head, expression.data.body)

# Assign genes to chromosomes
expression.data.tajimasD$XorAutosome = NA
expression.data.tajimasD$XorAutosome[!(expression.data.tajimasD$chr == "X")] = 1
expression.data.tajimasD$XorAutosome[expression.data.tajimasD$chr == "X"] = 0


###    Model Fitting    ###
# Fitting with lm()
tajimasD.model.body = lm(TajimasD ~ baseMean +abs(log2FoldChange) + sig.hit, data = expression.data.tajimasD[expression.data.tajimasD$tissue == "body", ])
tajimasD.model.head = lm(TajimasD ~ baseMean + abs(log2FoldChange) + sig.hit, data = expression.data.tajimasD[expression.data.tajimasD$tissue == "head", ])
# Model fitting with permuco
# This model should read 10,000 iterations for each effect w/interaction effects
tajimasD.body.interaction.model = lmperm(TajimasD ~ baseMean + abs(log2FoldChange) + sig.hit + abs(log2FoldChange)*sig.hit, data = expression.data.tajimasD[expression.data.tajimasD$tissue == "body", ], np=10000)
tajimasD.body.interaction.model = lmperm(TajimasD ~ baseMean + abs(log2FoldChange) + sig.hit + abs(log2FoldChange)*sig.hit, data = expression.data.tajimasD[expression.data.tajimasD$tissue == "body", ], np=10000)

tajimasD.body.model = lmperm(TajimasD ~ baseMean + abs(log2FoldChange) + sig.hit + XorAutosome, data = expression.data.tajimasD[expression.data.tajimasD$tissue == "body", ], np=10000)
tajimasD.head.model = lmperm(TajimasD ~ baseMean + abs(log2FoldChange) + sig.hit + XorAutosome, data = expression.data.tajimasD[expression.data.tajimasD$tissue == "head", ], np=10000)

tajimasD.body.model
tajimasD.head.model


#################
### Plotting #### -- Three different plots
#################

# 1. First plot is just averaging Tajima's D among significant and non-significant genes
tajimasD.summary = summaryBy(TajimasD ~ sig.hit + tissue, data = expression.data.tajimasD)

resample.data = as.data.frame(cbind(vector(mode="numeric", length = 10000 * nrow(tajimasD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(tajimasD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(tajimasD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(tajimasD.summary))))

output.row.start = 1
output.row.end = 4
for (i in 1:10000){

    resampled.df = rbind( sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body", ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body", ]), replace = TRUE),
                         sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body", ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body", ]), replace = TRUE),
                         sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head", ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head", ]), replace = TRUE),
                         sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head", ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head", ]), replace = TRUE))

                  # Output summary of resampled data to resample dataframe
                  resample.data[output.row.start:output.row.end, ] = summaryBy(TajimasD ~ sig.hit + tissue, FUN=c(mean, length), data = resampled.df)
                  output.row.start = output.row.end  + 1
                  output.row.end = output.row.end + 4
                  print(i)

}

# Rename columns of resampled data
colnames(resample.data) = c("sig.hit","tissue","TajimasD.Mean","Number.of.Genes")

tajimasD.data.summary = summaryBy(TajimasD.Mean ~ sig.hit + tissue, FUN = function(x) c(Mean = mean(x), lower.ci = quantile(x, probs = 0.025), upper.ci=quantile(x, probs = 0.975)), data = resample.data)
colnames(tajimasD.data.summary) = c("sig.hit","tissue","TajimasD.Mean","TajimasD.lowerCI","TajimasD.upperCI")

# Replace resample.data.summary "mean" with true observed mean
tajimasD.data.summary$TajimasD.Mean = tajimasD.summary$TajimasD.mean

tajimasD.summary.plot = ggplot(tajimasD.data.summary, aes(y = TajimasD.Mean, x = as.factor(tissue), colour = as.factor(sig.hit))) +
                                      geom_point(aes(y = TajimasD.Mean, x = as.factor(tissue), colour = as.factor(sig.hit)),size = 10,
                                      position = position_dodge(width = 0.5)) + scale_y_continuous(limits = c(-0.0015, 0.025)) +
                                      geom_errorbar(aes(ymin = TajimasD.lowerCI, ymax = TajimasD.upperCI, x = as.factor(tissue), colour=as.factor(sig.hit)),
                                      width = 0, position = position_dodge(width = 0.5)) +
                                      theme_bw()  + scale_colour_manual(values = c("#800080", "#65c86e")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none")
tajimasD.summary.plot

pdf("/plas1/amardeep.singh/tmp/TajimasD.summary.plot.filtered.March29.pdf", height = 10, width = 5)
tajimasD.summary.plot
dev.off()


# 2A. Plotting Tajimas D for SDIU and non-SDIU genes against log2FC without parsing out by sex-averaged gene expression   ######

# Remove unbinned genes
expression.data.tajimasD.plotting = expression.data.tajimasD[!(is.na(expression.data.tajimasD$log2FC.bins)),]

# Summary for means
expression.data.tajimaD.summary = summaryBy(TajimasD ~ log2FC.bins + sig.hit + tissue, FUN=c(mean, length), data = expression.data.tajimasD.plotting)

# Bootstrap means for each subset
# Data frame to hold resampled results
resample.data = as.data.frame(cbind(vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary))))

## Loop to resample TajimasD data
output.row.start = 1
output.row.end = 18
for (i in 1:10000){
  resampled.df=rbind( sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 1, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 1, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 2, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 2, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 3, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 3, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 4, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 4, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 5, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 5, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 6, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 6, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 6, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 6, ]), replace = TRUE),

                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 1, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 1, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 2, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 2, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 3, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 3, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 4, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 4, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 5, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 5, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 6, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 1 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 6, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 6, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$sig.hit == 0 & expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 6, ]), replace = TRUE))

                    # Output summary of resampled data to resample dataframe
                    resample.data[output.row.start:output.row.end, ] = summaryBy(TajimasD ~ log2FC.bins + sig.hit + tissue, FUN=c(mean, length), data = resampled.df)
                    output.row.start = output.row.end  + 1
                    output.row.end = output.row.end + 18
                    print(i)
}


colnames(resample.data) = c("log2FC.bins","sig.hit","tissue","TajimasD","number.of.genes")
write.table(resample.data, file = "/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/TajimasD.resampled.averaged.across.abs.gene.expression.bins.filtered.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")

# Not filtering 4fold sites
#resample.data = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/TajimasD.resampled.averaged.across.abs.gene.expression.txt", header = TRUE)
#filtering 4fold sites < 6 segregating sites
resample.data = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/TajimasD.resampled.averaged.across.abs.gene.expression.bins.filtered.txt", header = TRUE)

# Rename columns of resampled data
tajimasD.data.summary = summaryBy(TajimasD ~ log2FC.bins + sig.hit + tissue, FUN = function(x) c(Mean = mean(x), lower.ci = quantile(x, probs = 0.025), upper.ci=quantile(x, probs = 0.975)), data = resample.data)

# Replace resample.data.summary "mean" with true observed mean
colnames(tajimasD.data.summary) = c("log2FC.bins","sig.hit","tissue","TajimasD.Mean","TajimasD.lowerCI","TajimasD.upperCI")
tajimasD.data.summary$TajimasD.Mean = expression.data.tajimaD.summary$TajimasD.mean

tajimasD.expression.plot = ggplot(tajimasD.data.summary, aes(y = TajimasD.Mean, x = as.factor(log2FC.bins), colour = as.factor(sig.hit))) +
                                      geom_point(aes(y = TajimasD.Mean, x = as.factor(log2FC.bins), colour = as.factor(sig.hit)),size = 10,
                                      position = position_dodge(width = 0.5)) + #ylim(-0.12, 0.17) +
                                      geom_errorbar(aes(ymin = TajimasD.lowerCI, ymax = TajimasD.upperCI, x = as.factor(log2FC.bins), colour=as.factor(sig.hit)),
                                      width = 0, position = position_dodge(width = 0.5)) +
                                      theme_bw()  + scale_colour_manual(values = c("#800080", "#65c86e")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none") +
                                      facet_grid(tissue ~., scales = "free")

pdf("/plas1/amardeep.singh/tmp/TajimasD.by.log2FC.expression.filtered.subset.sept9.pdf", height = 10, width = 10)
tajimasD.expression.plot
dev.off()

# 2B. Plotting Tajimas D for all genes against log2FC without parsing out by sex-averaged gene expression   ######

# Remove unbinned genes
expression.data.tajimasD.plotting = expression.data.tajimasD[!(is.na(expression.data.tajimasD$log2FC.bins)),]

# Summary for means
expression.data.tajimaD.summary = summaryBy(TajimasD ~ log2FC.bins + tissue, FUN=c(mean, length), data = expression.data.tajimasD.plotting)

# Bootstrap means for each subset
# Data frame to hold resampled results
resample.data = as.data.frame(cbind(vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary))))

## Loop to resample TajimasD data
output.row.start = 1
output.row.end = 9
for (i in 1:10000){
  resampled.df=rbind( sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 1, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 1, ]), replace = TRUE),
                      sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 2, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 2, ]), replace = TRUE),
                      sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 3, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 3, ]), replace = TRUE),
                      sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 4, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 4, ]), replace = TRUE),
                      sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 5, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "body" & expression.data.tajimasD.plotting$log2FC.bins == 5, ]), replace = TRUE),

                      sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 1, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 1, ]), replace = TRUE),
                      sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 2, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 2, ]), replace = TRUE),
                      sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 3, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 3, ]), replace = TRUE),
                      sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 4, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 4, ]), replace = TRUE),
                      sample_n(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 5, ], nrow(expression.data.tajimasD.plotting[expression.data.tajimasD.plotting$tissue == "head" & expression.data.tajimasD.plotting$log2FC.bins == 5, ]), replace = TRUE))

                    # Output summary of resampled data to resample dataframe
                    resample.data[output.row.start:output.row.end, ] = summaryBy(TajimasD ~ log2FC.bins + tissue, FUN=c(mean, length), data = resampled.df)
                    output.row.start = output.row.end  + 1
                    output.row.end = output.row.end + 9
                    print(i)
}

resample.data=resample.data[,1:4]
colnames(resample.data) = c("log2FC.bins","tissue","TajimasD","number.of.genes")
write.table(resample.data, file = "/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/TajimasD.resampled.averaged.across.abs.gene.expression.bins.filtered.notsplit.by.sdiu.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")

resample.data = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/TajimasD.resampled.averaged.across.abs.gene.expression.bins.filtered.notsplit.by.sdiu.txt", header = TRUE)

# Rename columns of resampled data
tajimasD.data.summary = summaryBy(TajimasD ~ log2FC.bins + tissue, FUN = function(x) c(Mean = mean(x), lower.ci = quantile(x, probs = 0.025), upper.ci=quantile(x, probs = 0.975)), data = resample.data)

# Replace resample.data.summary "mean" with true observed mean
colnames(tajimasD.data.summary) = c("log2FC.bins","tissue","TajimasD.Mean","TajimasD.lowerCI","TajimasD.upperCI")
tajimasD.data.summary$TajimasD.Mean = expression.data.tajimaD.summary$TajimasD.mean
# Add new column to denote MB, FB and unbiased genes
tajimasD.data.summary$sexbias[tajimasD.data.summary$log2FC.bins == 1 & tajimasD.data.summary$tissue == "body"] = "FB"
tajimasD.data.summary$sexbias[tajimasD.data.summary$log2FC.bins == 1 & tajimasD.data.summary$tissue == "head"] = "FB.1"
tajimasD.data.summary$sexbias[tajimasD.data.summary$log2FC.bins == 2] = "FB"
tajimasD.data.summary$sexbias[tajimasD.data.summary$log2FC.bins == 3] = "UB"
tajimasD.data.summary$sexbias[tajimasD.data.summary$log2FC.bins == 4] = "MB"
tajimasD.data.summary$sexbias[tajimasD.data.summary$log2FC.bins == 5 & tajimasD.data.summary$tissue == "body"] = "MB"
tajimasD.data.summary$sexbias[tajimasD.data.summary$log2FC.bins == 5 & tajimasD.data.summary$tissue == "head"] = "MB.1"

# Colours: darkred: #b30000; light red: #e09999; Dark Blue: #0000b3; light blue: #9999e0

tajimasD.expression.plot = ggplot(tajimasD.data.summary, aes(y = TajimasD.Mean, x = as.factor(log2FC.bins), colour = as.factor(sexbias))) +
                                      geom_point(aes(y = TajimasD.Mean, x = as.factor(log2FC.bins), colour = as.factor(sexbias)),size = 10,
                                      position = position_dodge(width = 0.5)) + #ylim(-0.12, 0.17) +
                                      geom_errorbar(aes(ymin = TajimasD.lowerCI, ymax = TajimasD.upperCI, x = as.factor(log2FC.bins), colour=as.factor(sexbias)),
                                      width = 0, position = position_dodge(width = 0.5)) +
                                      #theme_bw()  + scale_colour_manual(values = c("#b30000","#e09999", "#0000b3","#9999e0", "#000000")) +
                                      theme_bw()  + scale_colour_manual(values = c("#b30000","#e09999", "#0000b3", "#000000")) +
                                      #theme_bw()  + scale_colour_manual(values = c("#b30000", "#0000b3", "#000000")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none") +
                                      facet_grid(tissue ~., scales = "free")
tajimasD.expression.plot

pdf("/plas1/amardeep.singh/tmp/TajimasD.by.log2FC.expression.filtered.noSDIU.March29.pdf", height = 10, width = 10)
tajimasD.expression.plot
dev.off()


#3A.  Plotting Tajimas D for SDIU and non-SDIU genes against sex-averaged gene expression without parsing by log2FC  ######
# Summary for means
expression.data.tajimaD.summary = summaryBy(TajimasD ~ sex.averaged.expression.quantile + sig.hit + tissue, FUN=c(mean, length), data = expression.data.tajimasD)

# Bootstrap means for each subset
# Data frame to hold resampled results
resample.data = as.data.frame(cbind(vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary))))

## Loop to resample TajimasD data
output.row.start = 1
output.row.end = 12
for (i in 1:10000){
  resampled.df=rbind( sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3, ]), replace = TRUE),

                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3, ]), replace = TRUE))

                    # Output summary of resampled data to resample dataframe
                    resample.data[output.row.start:output.row.end, ] = summaryBy(TajimasD ~ sex.averaged.expression.quantile + sig.hit + tissue, FUN=c(mean, length), data = resampled.df)
                    output.row.start = output.row.end  + 1
                    output.row.end = output.row.end + 24
                    print(i)
}

colnames(resample.data) = c("sex.averaged.expression.quantile","sig.hit","tissue","TajimasD","number.of.genes")
write.table(resample.data, file = "/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/TajimasD.resampled.versus.sex.averaged.expression.quantile.filtered.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")

# Not filtering 4fold sites
#resample.data = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/TajimasD.resampled.versus.sex.averaged.expression.quantile.txt", header = TRUE)
# Filtered 4fold sites
resample.data = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/TajimasD.resampled.versus.sex.averaged.expression.quantile.filtered.txt", header = TRUE)

# Rename columns of resampled data
tajimasD.data.summary = summaryBy(TajimasD ~ sex.averaged.expression.quantile + sig.hit + tissue, FUN = function(x) c(Mean = mean(x), lower.ci = quantile(x, probs = 0.025), upper.ci=quantile(x, probs = 0.975)), data = resample.data)

# Replace resample.data.summary "mean" with true observed mean
colnames(tajimasD.data.summary) = c("sex.averaged.expression.quantile","sig.hit","tissue","TajimasD.Mean","TajimasD.lowerCI","TajimasD.upperCI")
tajimasD.data.summary$TajimasD.Mean = expression.data.tajimaD.summary$TajimasD.mean

tajimasD.sex.averaged.expression.plot = ggplot(tajimasD.data.summary, aes(y = TajimasD.Mean, x = as.factor(sex.averaged.expression.quantile), colour = as.factor(sig.hit))) +
                                      geom_point(aes(y = TajimasD.Mean, x = as.factor(sex.averaged.expression.quantile), colour = as.factor(sig.hit)),size = 10,
                                      position = position_dodge(width = 0.5)) + ylim(-0.05, 0.05) +
                                      geom_errorbar(aes(ymin = TajimasD.lowerCI, ymax = TajimasD.upperCI, x = as.factor(sex.averaged.expression.quantile), colour=as.factor(sig.hit)),
                                      width = 0, position = position_dodge(width = 0.5)) +
                                      theme_bw()  + scale_colour_manual(values = c("#800080", "#65c86e")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none") +
                                      facet_grid(tissue ~., scales = "free" )

pdf("/plas1/amardeep.singh/tmp/TajimasD.by.sex.averaged.expression.quantile.filtered.March29.pdf", height = 10, width = 10)
tajimasD.sex.averaged.expression.plot
dev.off()


#3B.  Plotting Tajimas D against sex-averaged gene expression without parsing by log2FC  ######
# Summary for means
expression.data.tajimaD.summary = summaryBy(TajimasD ~ sex.averaged.expression.quantile + tissue, FUN=c(mean, length), data = expression.data.tajimasD)

# Bootstrap means for each subset
# Data frame to hold resampled results
resample.data = as.data.frame(cbind(vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary))))

## Loop to resample TajimasD data
output.row.start = 1
output.row.end = 6
for (i in 1:10000){
  resampled.df=rbind( sample_n(expression.data.tajimasD[expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                      sample_n(expression.data.tajimasD[expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                      sample_n(expression.data.tajimasD[expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3, ]), replace = TRUE),

                      sample_n(expression.data.tajimasD[expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                      sample_n(expression.data.tajimasD[expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                      sample_n(expression.data.tajimasD[expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3, ]), replace = TRUE))

                    # Output summary of resampled data to resample dataframe
                    resample.data[output.row.start:output.row.end, ] = summaryBy(TajimasD ~ sex.averaged.expression.quantile + tissue, FUN=c(mean, length), data = resampled.df)
                    output.row.start = output.row.end  + 1
                    output.row.end = output.row.end + 6
                    print(i)
}
resample.data=resample.data[,1:4]
colnames(resample.data) = c("sex.averaged.expression.quantile","tissue","TajimasD","number.of.genes")
write.table(resample.data, file = "/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/TajimasD.resampled.versus.sex.averaged.expression.quantile.filtered.no.SDIU.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")

# Not filtering 4fold sites
#resample.data = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/TajimasD.resampled.versus.sex.averaged.expression.quantile.txt", header = TRUE)
# Filtered 4fold sites
resample.data = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/TajimasD.resampled.versus.sex.averaged.expression.quantile.filtered.no.SDIU.txt", header = TRUE)

# Rename columns of resampled data
tajimasD.data.summary = summaryBy(TajimasD ~ sex.averaged.expression.quantile  + tissue, FUN = function(x) c(Mean = mean(x), lower.ci = quantile(x, probs = 0.025), upper.ci=quantile(x, probs = 0.975)), data = resample.data)

# Replace resample.data.summary "mean" with true observed mean
colnames(tajimasD.data.summary) = c("sex.averaged.expression.quantile","tissue","TajimasD.Mean","TajimasD.lowerCI","TajimasD.upperCI")
tajimasD.data.summary$TajimasD.Mean = expression.data.tajimaD.summary$TajimasD.mean
# Colours: darkred: #b30000; light red: #e09999; Dark Blue: #0000b3; light blue: #9999e0

tajimasD.sex.averaged.expression.plot = ggplot(tajimasD.data.summary, aes(y = TajimasD.Mean, x = as.factor(sex.averaged.expression.quantile))) +
                                      geom_point(aes(y = TajimasD.Mean, x = as.factor(sex.averaged.expression.quantile)),size = 10,
                                      position = position_dodge(width = 0.5)) + ylim(-0.01, 0.1) +
                                      geom_errorbar(aes(ymin = TajimasD.lowerCI, ymax = TajimasD.upperCI, x = as.factor(sex.averaged.expression.quantile)),
                                      width = 0, position = position_dodge(width = 0.5)) +
                                      theme_bw()  + scale_colour_manual(values = c("#000000")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none") +
                                      facet_grid(tissue ~., scales = "free" )

pdf("/plas1/amardeep.singh/tmp/TajimasD.by.sex.averaged.expression.quantile.filtered.noSDIU.sept15.pdf", height = 10, width = 10)
tajimasD.sex.averaged.expression.plot
dev.off()


#4. Plotting Tajimas D after parsing out by sex-averaged gene expression and log2FC expression   ######

# Summary for means
expression.data.tajimaD.summary = summaryBy(TajimasD ~  sex.averaged.expression.quantile + sex.averaged.log2FC.quantile + sig.hit + tissue, FUN=c(mean, length), data = expression.data.tajimasD)

# Bootstrap means for each subset
# Data frame to hold resampled results
resample.data = as.data.frame(cbind(vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.data.tajimaD.summary))))

## Loop to resample TajimasD data
output.row.start = 1
output.row.end = 72
for (i in 1:10000){
  resampled.df=rbind(
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ]), replace = TRUE),

                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ]), replace = TRUE),

                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "body"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ]), replace = TRUE),

                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 1 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 1  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ]), replace = TRUE),

                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 2 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 2  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ]), replace = TRUE),

                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 1, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 2, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 3, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 4, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 5, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 1 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ]), replace = TRUE),
                    sample_n(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head" & expression.data.tajimasD$sex.averaged.expression.quantile == 3 & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ], nrow(expression.data.tajimasD[expression.data.tajimasD$sig.hit == 0 & expression.data.tajimasD$tissue == "head"& expression.data.tajimasD$sex.averaged.expression.quantile == 3  & expression.data.tajimasD$sex.averaged.log2FC.quantile == 6, ]), replace = TRUE))

                    # Output summary of resampled data to resample dataframe
                    resample.data[output.row.start:output.row.end, ] = summaryBy(TajimasD ~  sex.averaged.expression.quantile+ sex.averaged.log2FC.quantile + sig.hit + tissue, FUN=c(mean, length), data = resampled.df)
                    output.row.start = output.row.end  + 1
                    output.row.end = output.row.end + 72
                    print(i)
}

colnames(resample.data) = c("sex.averaged.expression.quantile", "sex.averaged.log2FC.quantile","sig.hit","tissue","TajimasD","number.of.genes")
write.table(resample.data, file = "/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/TajimasD.resampled.parsed.by.abs.gene.expression.txt.filtered", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")

# Load resampled data
resample.data = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/TajimasD.Analysis/TajimasD.resampled.parsed.by.abs.gene.expression.txt.filtered", header = TRUE)

# Rename columns of resampled data
tajimasD.data.summary = summaryBy(TajimasD ~ sex.averaged.expression.quantile + sex.averaged.log2FC.quantile + sig.hit + tissue, FUN = function(x) c(Mean = mean(x), lower.ci = quantile(x, probs = 0.025), upper.ci=quantile(x, probs = 0.975)), data = resample.data)
colnames(tajimasD.data.summary) = c("sex.averaged.expression.quantile","sex.averaged.log2FC.quantile","sig.hit","tissue","TajimasD.Mean","TajimasD.lowerCI","TajimasD.upperCI")

# Replace resample.data.summary "mean" with true observed mean
tajimasD.data.summary$TajimasD.Mean = expression.data.tajimaD.summary$TajimasD.mean

tajimasD.expression.plot = ggplot(tajimasD.data.summary, aes(y = TajimasD.Mean, x = as.factor(sex.averaged.log2FC.quantile), colour = as.factor(sig.hit))) +
                                      geom_point(aes(y = TajimasD.Mean, x = as.factor(sex.averaged.log2FC.quantile), colour = as.factor(sig.hit)),size = 7,
                                      position = position_dodge(width = 0.5)) + #scale_y_continuous(limits = c(-0.6, 0.7)) +
                                      geom_errorbar(aes(ymin = TajimasD.lowerCI, ymax = TajimasD.upperCI, x = as.factor(sex.averaged.log2FC.quantile), colour=as.factor(sig.hit)),
                                      width = 0, position = position_dodge(width = 0.5)) +
                                      theme_bw()  + scale_colour_manual(values = c("#7294D4", "#5B1A18")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none") +
                                      facet_grid(tissue ~ as.factor(sex.averaged.expression.quantile), scales = "free")

pdf("/plas1/amardeep.singh/tmp/TajimasD.by.abs.gene.expression.and.log2FC.expression.filtered.sept8.pdf", height = 10, width = 10)
tajimasD.expression.plot
dev.off()


## Plotting TajimasD against expression as a continuous trait rather than in quantiles

# TajimasD ~ log2FC expression

tajimasD.expression.continuous.plot = ggplot(expression.data.tajimasD, aes(y = TajimasD, x = log2FoldChange, colour = as.factor(sig.hit))) +
                                            geom_point(aes(y = TajimasD, x =log2FoldChange, colour = as.factor(sig.hit)),size = 1) +
                                            #position = position_dodge(width = 0.5)) + #scale_y_continuous(limits = c(-0.2, 0.2)) +
                                            theme_bw()  + scale_colour_manual(values = c("#7294D4", "#5B1A18")) +
                                            theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                              panel.border = element_rect(colour = "black", fill=NA, size=1),
                                              axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                              axis.title=element_blank(), legend.position = "none") +
                                            facet_grid(~tissue)
pdf("/plas1/amardeep.singh/tmp/TajimasD.by.continuous.log2FC.expression.pdf", height = 10, width = 10)
tajimasD.expression.continuous.plot
dev.off()






# Bootstrap means for each subset
# Body
body.sig.hits.quantile.1 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.2 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.3 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.4 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.5 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.6 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.7 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.8 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.1 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.2 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.3 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.4 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.5 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.6 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.7 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.8 = vector(mode = "numeric", length = 10000)

# Head
head.sig.hits.quantile.1 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.2 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.3 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.4 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.5 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.6 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.7 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.8 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.1 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.2 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.3 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.4 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.5 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.6 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.7 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.8 = vector(mode = "numeric", length = 10000)

for (i in 1:10000){
  # Resample significant hits
  body.sig.hits.quantile.1[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 1], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 1]), replace = TRUE))
  body.sig.hits.quantile.2[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 2], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 2]), replace = TRUE))
  body.sig.hits.quantile.3[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 3], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 3]), replace = TRUE))
  body.sig.hits.quantile.4[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 4], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 4]), replace = TRUE))
  body.sig.hits.quantile.5[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 5], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 5]), replace = TRUE))
  body.sig.hits.quantile.6[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 6], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 6]), replace = TRUE))
  #body.sig.hits.quantile.7[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 7], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 7]), replace = TRUE))
  #body.sig.hits.quantile.8[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 8], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 8]), replace = TRUE))

  head.sig.hits.quantile.1[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 1], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 1]), replace = TRUE))
  head.sig.hits.quantile.2[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 2], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 2]), replace = TRUE))
  head.sig.hits.quantile.3[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 3], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 3]), replace = TRUE))
  head.sig.hits.quantile.4[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 4], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 4]), replace = TRUE))
  head.sig.hits.quantile.5[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 5], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 5]), replace = TRUE))
  head.sig.hits.quantile.6[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 6], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 6]), replace = TRUE))
  #head.sig.hits.quantile.7[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 7], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 7]), replace = TRUE))
  #head.sig.hits.quantile.8[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 8], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 8]), replace = TRUE))

  # Resample non significant hits
  body.non.sig.hits.quantile.1[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 1], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 1]), replace = TRUE))
  body.non.sig.hits.quantile.2[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 2], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 2]), replace = TRUE))
  body.non.sig.hits.quantile.3[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 3], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 3]), replace = TRUE))
  body.non.sig.hits.quantile.4[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 4], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 4]), replace = TRUE))
  body.non.sig.hits.quantile.5[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 5], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 5]), replace = TRUE))
  body.non.sig.hits.quantile.6[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 6], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 6]), replace = TRUE))
  #body.non.sig.hits.quantile.7[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 7], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 7]), replace = TRUE))
  #body.non.sig.hits.quantile.8[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 8], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 8]), replace = TRUE))

  head.non.sig.hits.quantile.1[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 1], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 1]), replace = TRUE))
  head.non.sig.hits.quantile.2[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 2], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 2]), replace = TRUE))
  head.non.sig.hits.quantile.3[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 3], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 3]), replace = TRUE))
  head.non.sig.hits.quantile.4[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 4], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 4]), replace = TRUE))
  head.non.sig.hits.quantile.5[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 5], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 5]), replace = TRUE))
  head.non.sig.hits.quantile.6[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 6], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 6]), replace = TRUE))
  #head.non.sig.hits.quantile.7[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 7], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 7]), replace = TRUE))
  #head.non.sig.hits.quantile.8[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 8], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 8]), replace = TRUE))
print (i)
}

body.lower.CI = as.vector( c(  quantile(body.sig.hits.quantile.1, 0.025)[1],
                          quantile(body.sig.hits.quantile.2, 0.025)[1],
                          quantile(body.sig.hits.quantile.3, 0.025)[1],
                          quantile(body.sig.hits.quantile.4, 0.025)[1],
                          quantile(body.sig.hits.quantile.5, 0.025)[1],
                          quantile(body.sig.hits.quantile.6, 0.025)[1],
                          #quantile(body.sig.hits.quantile.7, 0.025)[1],
                          #quantile(body.sig.hits.quantile.8, 0.025)[1],
                          quantile(body.non.sig.hits.quantile.1, 0.025)[1],
                          quantile(body.non.sig.hits.quantile.2, 0.025)[1],
                          quantile(body.non.sig.hits.quantile.3, 0.025)[1],
                          quantile(body.non.sig.hits.quantile.4, 0.025)[1],
                          quantile(body.non.sig.hits.quantile.5, 0.025)[1],
                          quantile(body.non.sig.hits.quantile.6, 0.025)[1]))
                          #quantile(body.non.sig.hits.quantile.7, 0.025)[1],
                          #quantile(body.non.sig.hits.quantile.8, 0.025)[1]))


body.upper.CI = as.vector( c( quantile(body.sig.hits.quantile.1, 0.975)[1],
                         quantile(body.sig.hits.quantile.2, 0.975)[1],
                         quantile(body.sig.hits.quantile.3, 0.975)[1],
                         quantile(body.sig.hits.quantile.4, 0.975)[1],
                         quantile(body.sig.hits.quantile.5, 0.975)[1],
                         quantile(body.sig.hits.quantile.6, 0.975)[1],
                         #quantile(body.sig.hits.quantile.7, 0.975)[1],
                         #quantile(body.sig.hits.quantile.8, 0.975)[1],
                         quantile(body.non.sig.hits.quantile.1, 0.975)[1],
                         quantile(body.non.sig.hits.quantile.2, 0.975)[1],
                         quantile(body.non.sig.hits.quantile.3, 0.975)[1],
                         quantile(body.non.sig.hits.quantile.4, 0.975)[1],
                         quantile(body.non.sig.hits.quantile.5, 0.975)[1],
                         quantile(body.non.sig.hits.quantile.6, 0.975)[1]))
                         #quantile(body.non.sig.hits.quantile.7, 0.975)[1],
                         #quantile(body.non.sig.hits.quantile.8, 0.975)[1]))


head.lower.CI = as.vector( c(  quantile(head.sig.hits.quantile.1, 0.025)[1],
                          quantile(head.sig.hits.quantile.2, 0.025)[1],
                          quantile(head.sig.hits.quantile.3, 0.025)[1],
                          quantile(head.sig.hits.quantile.4, 0.025)[1],
                          quantile(head.sig.hits.quantile.5, 0.025)[1],
                          quantile(head.sig.hits.quantile.6, 0.025)[1],
                          #quantile(head.sig.hits.quantile.7, 0.025)[1],
                          #quantile(head.sig.hits.quantile.8, 0.025)[1],
                          quantile(head.non.sig.hits.quantile.1, 0.025)[1],
                          quantile(head.non.sig.hits.quantile.2, 0.025)[1],
                          quantile(head.non.sig.hits.quantile.3, 0.025)[1],
                          quantile(head.non.sig.hits.quantile.4, 0.025)[1],
                          quantile(head.non.sig.hits.quantile.5, 0.025)[1],
                          quantile(head.non.sig.hits.quantile.6, 0.025)[1]))
                          #quantile(head.non.sig.hits.quantile.7, 0.025)[1],
                          #quantile(head.non.sig.hits.quantile.8, 0.025)[1]))


head.upper.CI = as.vector( c( quantile(head.sig.hits.quantile.1, 0.975)[1],
                         quantile(head.sig.hits.quantile.2, 0.975)[1],
                         quantile(head.sig.hits.quantile.3, 0.975)[1],
                         quantile(head.sig.hits.quantile.4, 0.975)[1],
                         quantile(head.sig.hits.quantile.5, 0.975)[1],
                         quantile(head.sig.hits.quantile.6, 0.975)[1],
                         #quantile(head.sig.hits.quantile.7, 0.975)[1],
                         #quantile(head.sig.hits.quantile.8, 0.975)[1],
                         quantile(head.non.sig.hits.quantile.1, 0.975)[1],
                         quantile(head.non.sig.hits.quantile.2, 0.975)[1],
                         quantile(head.non.sig.hits.quantile.3, 0.975)[1],
                         quantile(head.non.sig.hits.quantile.4, 0.975)[1],
                         quantile(head.non.sig.hits.quantile.5, 0.975)[1],
                         quantile(head.non.sig.hits.quantile.6, 0.975)[1]))
                         #quantile(head.non.sig.hits.quantile.7, 0.975)[1],
                         #quantile(head.non.sig.hits.quantile.8, 0.975)[1])



# Construct dataframes to hold all of our data for plotting
# Body
#hit = rep(c("sig","non.sig"), each=6)
expression.quartile = rep(seq(1:6),2)
body.tajimasD.mean = c(body.sig.hits.mean$TajimasD.mean, body.non.sig.hits.mean$TajimasD.mean)
body.tajimasD.lowerCI = body.lower.CI
body.tajimasD.upperCI = body.upper.CI
body.tajimasD.df = as.data.frame(cbind(as.factor(expression.quartile), as.numeric(body.tajimasD.mean), as.numeric(body.tajimasD.lowerCI), as.numeric(body.tajimasD.upperCI)))
body.tajimasD.df$tissue = as.factor("body")
body.tajimasD.df$hit = as.factor(rep(c("sig","non.sig"), each=6))
colnames(body.tajimasD.df) = c("expression.quartile", "tajimasD.mean", "tajimasD.lowerCI", "tajimasD.upperCI", "tissue","hit")


body.tajimasD.expression.plot = ggplot(body.tajimasD.df, aes(y = as.numeric(body.tajimasD.mean), x = as.factor(expression.quartile), colour = as.factor(hit))) +
                                      geom_point(aes(x = as.factor(expression.quartile), y = as.numeric(body.tajimasD.mean), colour = as.factor(hit)),size = 10,
                                      position = position_dodge(width = 0.5)) + scale_y_continuous(limits = c(-0.1, 0.1)) +
                                      geom_errorbar(aes(ymin = body.tajimasD.lowerCI, ymax = body.tajimasD.upperCI, x = expression.quartile, colour=hit),
                                      width = 0, position = position_dodge(width = 0.5)) + geom_hline(yintercept = 0) +
                                      theme_bw() + scale_colour_manual(values = c("#7294D4", "#5B1A18")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=40, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none")

pdf("/plas1/amardeep.singh/tmp/body.tajimasD.expression.plot.pdf")
body.tajimasD.expression.plot
dev.off()


# head
expression.quartile = rep(seq(1:6),2)
head.tajimasD.mean = c(head.sig.hits.mean$TajimasD.mean, head.non.sig.hits.mean$TajimasD.mean)
head.tajimasD.lowerCI = head.lower.CI
head.tajimasD.upperCI = head.upper.CI
head.tajimasD.df = as.data.frame(cbind(as.factor(expression.quartile), as.numeric(head.tajimasD.mean), as.numeric(head.tajimasD.lowerCI), as.numeric(head.tajimasD.upperCI)))
head.tajimasD.df$tissue = as.factor("head")
head.tajimasD.df$hit = as.factor(rep(c("sig","non.sig"), each=6))
colnames(head.tajimasD.df) = c("expression.quartile", "tajimasD.mean", "tajimasD.lowerCI", "tajimasD.upperCI", "tissue","hit")

head.tajimasD.expression.plot = ggplot(head.tajimasD.df, aes(y = as.numeric(head.tajimasD.mean), x = as.factor(expression.quartile), colour = as.factor(hit))) +
                                      geom_point(aes(x = as.factor(expression.quartile), y = as.numeric(head.tajimasD.mean), colour = as.factor(hit)),size = 10,
                                      position = position_dodge(width = 0.5)) + scale_y_continuous(limits = c(-0.1, 0.1)) +
                                      geom_errorbar(aes(ymin = head.tajimasD.lowerCI, ymax = head.tajimasD.upperCI, x = expression.quartile, colour=hit),
                                      width = 0, position = position_dodge(width = 0.5)) + geom_hline(yintercept = 0) +
                                      theme_bw() + scale_colour_manual(values = c("#7294D4", "#5B1A18")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=40, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none")

pdf("/plas1/amardeep.singh/tmp/head.tajimasD.expression.plot.pdf")
head.tajimasD.expression.plot
dev.off()



## Combined plots
tajimasD.df = rbind(body.tajimasD.df, head.tajimasD.df)

tajimasD.expression.plot = ggplot(tajimasD.df, aes(y = tajimasD.mean, x = expression.quartile, colour = hit)) +
                                      geom_point(aes(x = expression.quartile, y = tajimasD.mean, colour = hit),size = 10,
                                      position = position_dodge(width = 0.5)) + scale_y_continuous(limits = c(-0.1, 0.1)) +
                                      geom_errorbar(aes(ymin = tajimasD.lowerCI, ymax = tajimasD.upperCI, x = expression.quartile, colour=hit),
                                      width = 0.25, position = position_dodge(width = 0.5)) + geom_hline(yintercept = 0) +
                                      #scale_colour_manual(values = c("#7294D4", "#5B1A18")) +
                                      theme_bw()  +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none") +
                                      facet_grid(tissue ~ .)

pdf("/plas1/amardeep.singh/tmp/combined.tajimasD.expression.plot.pdf")
tajimasD.expression.plot
dev.off()












###### D E P R E C A T E D     P L O T T I N G     D G R P      D A T A ########
### Plotting ####

# Lets plot TajimasD for sig hits in quartile bins

# Summary for means
expression.data.tajimaD = summaryBy(TajimasD ~ quartile + sig.hit + tissue, FUN=c(median, length), data = expression.data.tajimaD)


# Bootstrap means for each subset
# Body
body.sig.hits.quantile.1 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.2 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.3 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.4 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.5 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.6 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.7 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.8 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.1 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.2 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.3 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.4 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.5 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.6 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.7 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.8 = vector(mode = "numeric", length = 10000)

# Head
head.sig.hits.quantile.1 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.2 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.3 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.4 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.5 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.6 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.7 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.8 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.1 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.2 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.3 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.4 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.5 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.6 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.7 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.8 = vector(mode = "numeric", length = 10000)

for (i in 1:10000){
  # Resample significant hits
  body.sig.hits.quantile.1[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 1], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 1]), replace = TRUE))
  body.sig.hits.quantile.2[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 2], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 2]), replace = TRUE))
  body.sig.hits.quantile.3[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 3], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 3]), replace = TRUE))
  body.sig.hits.quantile.4[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 4], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 4]), replace = TRUE))
  body.sig.hits.quantile.5[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 5], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 5]), replace = TRUE))
  body.sig.hits.quantile.6[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 6], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 6]), replace = TRUE))
  #body.sig.hits.quantile.7[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 7], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 7]), replace = TRUE))
  #body.sig.hits.quantile.8[i] = mean(sample(body.sig.hits$TajimasD[body.sig.hits$quartile == 8], length(body.sig.hits$TajimasD[body.sig.hits$quartile == 8]), replace = TRUE))

  head.sig.hits.quantile.1[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 1], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 1]), replace = TRUE))
  head.sig.hits.quantile.2[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 2], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 2]), replace = TRUE))
  head.sig.hits.quantile.3[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 3], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 3]), replace = TRUE))
  head.sig.hits.quantile.4[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 4], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 4]), replace = TRUE))
  head.sig.hits.quantile.5[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 5], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 5]), replace = TRUE))
  head.sig.hits.quantile.6[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 6], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 6]), replace = TRUE))
  #head.sig.hits.quantile.7[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 7], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 7]), replace = TRUE))
  #head.sig.hits.quantile.8[i] = mean(sample(head.sig.hits$TajimasD[head.sig.hits$quartile == 8], length(head.sig.hits$TajimasD[head.sig.hits$quartile == 8]), replace = TRUE))

  # Resample non significant hits
  body.non.sig.hits.quantile.1[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 1], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 1]), replace = TRUE))
  body.non.sig.hits.quantile.2[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 2], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 2]), replace = TRUE))
  body.non.sig.hits.quantile.3[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 3], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 3]), replace = TRUE))
  body.non.sig.hits.quantile.4[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 4], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 4]), replace = TRUE))
  body.non.sig.hits.quantile.5[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 5], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 5]), replace = TRUE))
  body.non.sig.hits.quantile.6[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 6], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 6]), replace = TRUE))
  #body.non.sig.hits.quantile.7[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 7], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 7]), replace = TRUE))
  #body.non.sig.hits.quantile.8[i] = mean(sample(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 8], length(body.non.sig.hits$TajimasD[body.non.sig.hits$quartile == 8]), replace = TRUE))

  head.non.sig.hits.quantile.1[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 1], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 1]), replace = TRUE))
  head.non.sig.hits.quantile.2[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 2], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 2]), replace = TRUE))
  head.non.sig.hits.quantile.3[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 3], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 3]), replace = TRUE))
  head.non.sig.hits.quantile.4[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 4], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 4]), replace = TRUE))
  head.non.sig.hits.quantile.5[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 5], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 5]), replace = TRUE))
  head.non.sig.hits.quantile.6[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 6], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 6]), replace = TRUE))
  #head.non.sig.hits.quantile.7[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 7], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 7]), replace = TRUE))
  #head.non.sig.hits.quantile.8[i] = mean(sample(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 8], length(head.non.sig.hits$TajimasD[head.non.sig.hits$quartile == 8]), replace = TRUE))
print (i)
}

body.lower.CI = as.vector( c(  quantile(body.sig.hits.quantile.1, 0.025)[1],
                          quantile(body.sig.hits.quantile.2, 0.025)[1],
                          quantile(body.sig.hits.quantile.3, 0.025)[1],
                          quantile(body.sig.hits.quantile.4, 0.025)[1],
                          quantile(body.sig.hits.quantile.5, 0.025)[1],
                          quantile(body.sig.hits.quantile.6, 0.025)[1],
                          #quantile(body.sig.hits.quantile.7, 0.025)[1],
                          #quantile(body.sig.hits.quantile.8, 0.025)[1],
                          quantile(body.non.sig.hits.quantile.1, 0.025)[1],
                          quantile(body.non.sig.hits.quantile.2, 0.025)[1],
                          quantile(body.non.sig.hits.quantile.3, 0.025)[1],
                          quantile(body.non.sig.hits.quantile.4, 0.025)[1],
                          quantile(body.non.sig.hits.quantile.5, 0.025)[1],
                          quantile(body.non.sig.hits.quantile.6, 0.025)[1]))
                          #quantile(body.non.sig.hits.quantile.7, 0.025)[1],
                          #quantile(body.non.sig.hits.quantile.8, 0.025)[1]))


body.upper.CI = as.vector( c( quantile(body.sig.hits.quantile.1, 0.975)[1],
                         quantile(body.sig.hits.quantile.2, 0.975)[1],
                         quantile(body.sig.hits.quantile.3, 0.975)[1],
                         quantile(body.sig.hits.quantile.4, 0.975)[1],
                         quantile(body.sig.hits.quantile.5, 0.975)[1],
                         quantile(body.sig.hits.quantile.6, 0.975)[1],
                         #quantile(body.sig.hits.quantile.7, 0.975)[1],
                         #quantile(body.sig.hits.quantile.8, 0.975)[1],
                         quantile(body.non.sig.hits.quantile.1, 0.975)[1],
                         quantile(body.non.sig.hits.quantile.2, 0.975)[1],
                         quantile(body.non.sig.hits.quantile.3, 0.975)[1],
                         quantile(body.non.sig.hits.quantile.4, 0.975)[1],
                         quantile(body.non.sig.hits.quantile.5, 0.975)[1],
                         quantile(body.non.sig.hits.quantile.6, 0.975)[1]))
                         #quantile(body.non.sig.hits.quantile.7, 0.975)[1],
                         #quantile(body.non.sig.hits.quantile.8, 0.975)[1]))


head.lower.CI = as.vector( c(  quantile(head.sig.hits.quantile.1, 0.025)[1],
                          quantile(head.sig.hits.quantile.2, 0.025)[1],
                          quantile(head.sig.hits.quantile.3, 0.025)[1],
                          quantile(head.sig.hits.quantile.4, 0.025)[1],
                          quantile(head.sig.hits.quantile.5, 0.025)[1],
                          quantile(head.sig.hits.quantile.6, 0.025)[1],
                          #quantile(head.sig.hits.quantile.7, 0.025)[1],
                          #quantile(head.sig.hits.quantile.8, 0.025)[1],
                          quantile(head.non.sig.hits.quantile.1, 0.025)[1],
                          quantile(head.non.sig.hits.quantile.2, 0.025)[1],
                          quantile(head.non.sig.hits.quantile.3, 0.025)[1],
                          quantile(head.non.sig.hits.quantile.4, 0.025)[1],
                          quantile(head.non.sig.hits.quantile.5, 0.025)[1],
                          quantile(head.non.sig.hits.quantile.6, 0.025)[1]))
                          #quantile(head.non.sig.hits.quantile.7, 0.025)[1],
                          #quantile(head.non.sig.hits.quantile.8, 0.025)[1]))


head.upper.CI = as.vector( c( quantile(head.sig.hits.quantile.1, 0.975)[1],
                         quantile(head.sig.hits.quantile.2, 0.975)[1],
                         quantile(head.sig.hits.quantile.3, 0.975)[1],
                         quantile(head.sig.hits.quantile.4, 0.975)[1],
                         quantile(head.sig.hits.quantile.5, 0.975)[1],
                         quantile(head.sig.hits.quantile.6, 0.975)[1],
                         #quantile(head.sig.hits.quantile.7, 0.975)[1],
                         #quantile(head.sig.hits.quantile.8, 0.975)[1],
                         quantile(head.non.sig.hits.quantile.1, 0.975)[1],
                         quantile(head.non.sig.hits.quantile.2, 0.975)[1],
                         quantile(head.non.sig.hits.quantile.3, 0.975)[1],
                         quantile(head.non.sig.hits.quantile.4, 0.975)[1],
                         quantile(head.non.sig.hits.quantile.5, 0.975)[1],
                         quantile(head.non.sig.hits.quantile.6, 0.975)[1]))
                         #quantile(head.non.sig.hits.quantile.7, 0.975)[1],
                         #quantile(head.non.sig.hits.quantile.8, 0.975)[1])



# Construct dataframes to hold all of our data for plotting
# Body
#hit = rep(c("sig","non.sig"), each=6)
expression.quartile = rep(seq(1:6),2)
body.tajimasD.mean = c(body.sig.hits.mean$TajimasD.mean, body.non.sig.hits.mean$TajimasD.mean)
body.tajimasD.lowerCI = body.lower.CI
body.tajimasD.upperCI = body.upper.CI
body.tajimasD.df = as.data.frame(cbind(as.factor(expression.quartile), as.numeric(body.tajimasD.mean), as.numeric(body.tajimasD.lowerCI), as.numeric(body.tajimasD.upperCI)))
body.tajimasD.df$tissue = as.factor("body")
body.tajimasD.df$hit = as.factor(rep(c("sig","non.sig"), each=6))
colnames(body.tajimasD.df) = c("expression.quartile", "tajimasD.mean", "tajimasD.lowerCI", "tajimasD.upperCI", "tissue","hit")


body.tajimasD.expression.plot = ggplot(body.tajimasD.df, aes(y = as.numeric(body.tajimasD.mean), x = as.factor(expression.quartile), colour = as.factor(hit))) +
                                      geom_point(aes(x = as.factor(expression.quartile), y = as.numeric(body.tajimasD.mean), colour = as.factor(hit)),size = 10,
                                      position = position_dodge(width = 0.5)) + scale_y_continuous(limits = c(-0.1, 0.1)) +
                                      geom_errorbar(aes(ymin = body.tajimasD.lowerCI, ymax = body.tajimasD.upperCI, x = expression.quartile, colour=hit),
                                      width = 0, position = position_dodge(width = 0.5)) + geom_hline(yintercept = 0) +
                                      theme_bw() + scale_colour_manual(values = c("#7294D4", "#5B1A18")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=40, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none")

pdf("/plas1/amardeep.singh/tmp/body.tajimasD.expression.plot.pdf")
body.tajimasD.expression.plot
dev.off()


# head
expression.quartile = rep(seq(1:6),2)
head.tajimasD.mean = c(head.sig.hits.mean$TajimasD.mean, head.non.sig.hits.mean$TajimasD.mean)
head.tajimasD.lowerCI = head.lower.CI
head.tajimasD.upperCI = head.upper.CI
head.tajimasD.df = as.data.frame(cbind(as.factor(expression.quartile), as.numeric(head.tajimasD.mean), as.numeric(head.tajimasD.lowerCI), as.numeric(head.tajimasD.upperCI)))
head.tajimasD.df$tissue = as.factor("head")
head.tajimasD.df$hit = as.factor(rep(c("sig","non.sig"), each=6))
colnames(head.tajimasD.df) = c("expression.quartile", "tajimasD.mean", "tajimasD.lowerCI", "tajimasD.upperCI", "tissue","hit")

head.tajimasD.expression.plot = ggplot(head.tajimasD.df, aes(y = as.numeric(head.tajimasD.mean), x = as.factor(expression.quartile), colour = as.factor(hit))) +
                                      geom_point(aes(x = as.factor(expression.quartile), y = as.numeric(head.tajimasD.mean), colour = as.factor(hit)),size = 10,
                                      position = position_dodge(width = 0.5)) + scale_y_continuous(limits = c(-0.1, 0.1)) +
                                      geom_errorbar(aes(ymin = head.tajimasD.lowerCI, ymax = head.tajimasD.upperCI, x = expression.quartile, colour=hit),
                                      width = 0, position = position_dodge(width = 0.5)) + geom_hline(yintercept = 0) +
                                      theme_bw() + scale_colour_manual(values = c("#7294D4", "#5B1A18")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=40, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none")

pdf("/plas1/amardeep.singh/tmp/head.tajimasD.expression.plot.pdf")
head.tajimasD.expression.plot
dev.off()



## Combined plots
tajimasD.df = rbind(body.tajimasD.df, head.tajimasD.df)

tajimasD.expression.plot = ggplot(tajimasD.df, aes(y = tajimasD.mean, x = expression.quartile, colour = hit)) +
                                      geom_point(aes(x = expression.quartile, y = tajimasD.mean, colour = hit),size = 10,
                                      position = position_dodge(width = 0.5)) + scale_y_continuous(limits = c(-0.1, 0.1)) +
                                      geom_errorbar(aes(ymin = tajimasD.lowerCI, ymax = tajimasD.upperCI, x = expression.quartile, colour=hit),
                                      width = 0.25, position = position_dodge(width = 0.5)) + geom_hline(yintercept = 0) +
                                      #scale_colour_manual(values = c("#7294D4", "#5B1A18")) +
                                      theme_bw()  +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none") +
                                      facet_grid(tissue ~ .)

pdf("/plas1/amardeep.singh/tmp/combined.tajimasD.expression.plot.pdf")
tajimasD.expression.plot
dev.off()


############################################################################################################################################
############################################################################################################################################



####     D E P R E C A T E D     D O     N O T     U S E !   ####




#####################################################################
#####################################################################
#####   D P G P 3     P O P U L A T I O N     P I P E L I N E   #####
#####################################################################
#####################################################################



##########################################
######      Tajima's D Analysis     ######
##########################################

### This is a script that will calculate Tajima's D in a sliding window in the DPGP3
## Author: Amardeep Singh -- amardeep.singh[at]utoronto.ca
## This script makes use of publicly available sequence data for the DPGP3 population

##   NOTES: Most of this script is written in Bash, except where indicated when I have included R code

#######################
###  Obtaining data ###
#######################
# Obtain "consensus sequences" for the 197 DGPG3 haploid genomes from John Pool's website
wget http://pooldata.genetics.wisc.edu/dpgp3_sequences.tar.bz2
# Obtain the code provided for filtering the sequences from John Pool's website
wget http://johnpool.net/masking.zip
##

################################################
### Prepare a Multi-fasta file for SNP-Sites ###
################################################

## This code was run on all chromosome arms separately that were in unique directories per chromosome arm
#After unpacking the sequence files for each chromosome I ran filtering steps
# Filter for masked sites in highly related individuals (IBD)
perl ibd_mask_seq.pl
# Filter for admixture
perl admixture_mask_seq.pl
### NOTE: After running the filters above:
# Take filtered .seq files and add unique header to SNP-Sites and change the
# file extension to .fasta
for file in *seq; do awk 'BEGIN{print ">'$file'"}1' $file > $file.fasta; done;
### ZI382 X Chr sequence was missing and ZI28 had an extra nucleotide for the X chromosome sequence so these two were removed
rm ZI28_Chr*.fasta
rm ZI382_Chr*.fasta

# Concatenate all .fasta files and zip the resultant file to save space and then
# pass this file on to SNP-sites

cat *.fasta > ChrX.fas
##

########################################################################
### Making VCF files from multi-alignment fasta files with SNP-sites ###
########################################################################

snp-sites -v -o ChrX.vcf ChrX.fas &
snp-sites -v -o Chr2L.vcf Chr2L.fas &
snp-sites -v -o Chr2R.vcf Chr2R.fas &
snp-sites -v -o Chr3L.vcf Chr3L.fas &
snp-sites -v -o Chr3R.vcf Chr3R.fas &

# Remove headers from vcf files
sed -i '/^##/d' *.vcf

############################################
### Convert SNP-sits VCF to "Normal VCF" ###    ## I forked this code form Ruzicka et al 2019 PLoS Bio
############################################

#----- R code -----
require(matrixStats)

## Modify VCF for Tajima's D analysis (r5 coordinates + remove positions where depth<20)

## Import vcf files of interest ## Need to change these two depending on the specific file
chr.vcf <- read.table("/plas1/amardeep.singh/RNA.Seq.Data/DPGP3.Genomic.Data/Chr3L.vcf")
print("Chromosome Loaded!")
output.name = "chr.3L"
chr.number = "3L"

#Sanity check
#plot(rownames(test.vcf),test.vcf$V2)

#Three possible types of acceptable allele
#No missing values
type1 <- c("A","T","G","C")
part1 <- subset(chr.vcf,V5 %in% type1)
if (nrow(part1) > 0) {
part1[part1==1] <- "1/1"
part1[part1==0] <- "0/0"
} else {print("Nothing in Part 1!")}

#Missing value = 2
type2 <- c("A,*","T,*","G,*","C,*")
part2 <- subset(chr.vcf,V5 %in% type2)
part2[part2==2] <- "./."
part2[part2==1] <- "1/1"
part2[part2==0] <- "0/0"
part2$V5 <- ifelse(part2$V5=="A,*","A",ifelse(part2$V5=="T,*","T",ifelse(part2$V5=="C,*","C",ifelse(part2$V5=="G,*","G",NA))))

#Missing value = 1
type3 <- c("*,A","*,T","*,G","*,C")
part3 <- subset(chr.vcf,V5 %in% type3)
part3[part3==2] <- "1/1"
part3[part3==1] <- "./."
part3[part3==0] <- "0/0"
part3$V5 <- ifelse(part3$V5=="*,A","A",ifelse(part3$V5=="*,T","T",ifelse(part3$V5=="*,C","C",ifelse(part3$V5=="*,G","G",NA))))

#Rbind parts 1,2,3
vcf <- rbind(part1,part2,part3)
#Transform position column to numeric
vcf$V2 <- as.numeric(vcf$V2)
#Order by position column
vcf <- vcf[order(vcf$V2),]
#Replace chromosome column with 1
vcf$V1 <- chr.number
#Filter for depth (DP>19)
vcf <- subset(vcf,rowCounts(vcf[,10:ncol(vcf)]!="./.")>19)
vcf$V2 <- format(vcf$V2,scientific=F)

write.table(vcf, file = paste("/plas1/amardeep.singh/RNA.Seq.Data/DPGP3.Genomic.Data/", output.name, "_modified.vcf", sep = ""), sep="\t",row.names = F, quote=F, col.names=F)

rm(vcf)
rm(part1)
rm(part2)
rm(part3)

----- /R code -----

## Concatenate all VCFs and add header ## I had generated this header previously
cat chr.X_modified.vcf chr.2L_modified.vcf chr.2R_modified.vcf chr.3L_modified.vcf chr.3R_modified.vcf > DPGP3.filtered.vcf
## Add header
cat vcf.header DPGP3.filtered.vcf > tmp && mv tmp DPGP3.filtered.vcf

#######################################
###     Window Based Tajimas D      ###
#######################################

# This analysis was done with vcftools ## I did two different analysis, one with a window size of 1kb and one with a window size of 1bp (i.e. SNP level)
vcftools --vcf DPGP3.filtered.vcf --TajimaD 1000 --out DPGP3.1000bp.Window ## this generates estimates of Tajimas D in windows of 1000bp
vcftools --vcf DPGP3.filtered.vcf --TajimaD 1 --out DPGP3.SNP.Level   ## This generates estimates of Tajimas D at the SNP level
# Clean out sites without any SNPs to estimates Tajima's D
sed -i '/nan/d' DPGP3.1000bp.Window.Tajima.D
sed -i '/nan/d' DPGP3.SNP.Level.Tajima.D


##########################################################
### Intersect list of significant hits with Tajimas D  ###
##########################################################

#### WINDOW BASED ANALYSIS ####

## Format the Junctionseq output file into a BED file
# Generate list of coordinates of exons that showed significant dimorphism -- This corresponds to fields 14-16 in the output from JunctionSeq
cat April23sigGenes.results.txt | awk ' BEGIN {OFS = FS = "\t"} {print $14 "\t" $15 "\t" $16} ' > sigGenes.coordinates.bed
# Remove header from file
sed -i '/^chr/d' sigGenes.coordinates.bed

## Format the DPGP3 Tajimas D file to a bed format
cat DPGP3.1000bp.Window.Tajima.D | awk ' BEGIN {OFS = FS = "\t"} {print $1 "\t" $2 "\t" $2+999}' > DPGP3.1000bp.Window.Tajima.D.coordinates.bed
# Remove header from file
sed -i '/^CHROM/d ' DPGP3.1000bp.Window.Tajima.D.coordinates.bed

## Intersect the Junctionseq significant hits bed file with the DPGP3 bed file
# First, sort the bed files
sort -k1,1 -k2,2n DPGP3.1000bp.Window.Tajima.D.coordinates.bed > DPGP3.1000bp.Window.Tajima.D.coordinates.sorted.bed
sort -k1,1 -k2,2n sigGenes.coordinates.bed >sigGenes.coordinates.sorted.bed

bedtools intersect -sorted -wa -a /plas1/amardeep.singh/RNA.Seq.Data/DPGP3.Genomic.Data/DPGP3.1000bp.Window.Tajima.D.coordinates.sorted.bed -b sigGenes.coordinates.sorted.bed > sig.windows.txt

#########

#### SNP LEVEL ANALYSIS ####
# Sort the DPGP3 file
# Format the DPGP3 Tajimas D file to a bed format
cat DPGP3.SNP.Level.Tajima.D | awk ' BEGIN {OFS = FS = "\t"} {print $1 "\t" $2 "\t" $2+1 "\t" $4}' > DPGP3.SNP.Level.Tajima.D.coordinates.bed
# Remove header from file
sed -i '/^CHROM/d ' DPGP3.SNP.Level.Tajima.D.coordinates.bed

## Intersect the Junctionseq significant hits bed file with the DPGP3 bed file
# First, sort the bed files
sort -k1,1 -k2,2n DPGP3.SNP.Level.Tajima.D.coordinates.bed > DPGP3.SNP.Level.Tajima.D.coordinates.sorted.bed


What I want to do is take my list of SNPs and intersect it with a GFF to find out which genes each SNP belongs to (if they fall in coding regions at all)
/plas1/amardeep.singh/Flybase.Dmel.Genome.Release/gtf

bedtools intersect -wa -wb -a /plas1/amardeep.singh/RNA.Seq.Data/DPGP3.Genomic.Data/DPGP3.SNP.Level.Tajima.D.coordinates.sorted.bed
  \ -b /plas1/amardeep.singh/Flybase.Dmel.Genome.Release/gtf/dmel-all-r6.32.filtered.gtf > DPGP3.SNP.Level.Intersect.Output

## Remove duplicate records
cat DPGP3.SNP.Level.Intersect.Output | sort -u -s -k1,2 > DPGP3.SNP.Level.Intersect.Filtered.Output

# Redirect the feilds of interest
cat DPGP3.SNP.Level.Intersect.Filtered.Output | awk 'BEGIN { OFS = FS = "\t" } { print $1 "\t" $2 "\t" $4 "\t" substr($13, 10,11)}' > DPGP3.SNP.Level.Intersect.Filtered.Output.formatted

# --- R Code ---
# Now we are going to calculate the Tajima's D for each gene, averaged across all SNPs in a gene

dpgp3.data = read.table("/plas1/amardeep.singh/RNA.Seq.Data/DPGP3.Genomic.Data/DPGP3.SNP.Level.Intersect.Filtered.Output.formatted", sep = "\t", header = FALSE)
test = aggregate(dpgp3.data[, "V3"], list(dpgp3.data$V4), mean)
tajimasD.per.gene = aggregate(dpgp3.data[, "V3"], list(dpgp3.data$V4), mean)
write.table(tajimasD.per.gene, "/plas1/amardeep.singh/RNA.Seq.Data/DPGP3.Genomic.Data/DPGP3.TajimasD.Per.Gene", sep = "\t", quote = F, row.name = F, col.name = F)
#\--- R CODE ---

###################################################################
###           WINDOW BASED ANALYSIS -- Assigning Hits           ###
###################################################################

# --- R Code ---
# Read in Tajimas D data
dpgp3.tajimaD = read.table("/plas1/amardeep.singh/RNA.Seq.Data/DPGP3.Genomic.Data/DPGP3.filtered.Tajima.D", sep = "\t", header = TRUE)
# Read in significant windows file
windows.sig.hits = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/sig.windows.txt", sep = "\t", header = FALSE)

# Add unique ID column to both files
dpgp3.tajimaD$ID = paste(dpgp3.tajimaD$CHROM, dpgp3.tajimaD$BIN_START, sep = ":")
windows.sig.hits$ID = paste(windows.sig.hits$V1, windows.sig.hits$V2, sep = ":")
# Filter out repeated windows in the 'windows.sig.hits' file
windows.sig.hits.unique = unique(windows.sig.hits$ID)

# Add a column to signify if the window contains an exon with significant SD in usage
dpgp3.tajimaD$hit = NA
dpgp3.tajimaD[dpgp3.tajimaD$ID %in% windows.sig.hits.unique,]$hit = 1
dpgp3.tajimaD[!(dpgp3.tajimaD$ID %in% windows.sig.hits.unique),]$hit = 0

# \--- R Code ---
###################################################################
###             SNP LEVEL ANALYSIS -- Assigning Hits            ###
###################################################################

# --- R Code ---
# Loading in data files
# Read in JunctionSeq results
junctionseq.results = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/April23allGenes.results.txt", header = TRUE, sep = "\t")
# Read in Tajimas D per gene results
tajimasD.per.gene = read.table("/plas1/amardeep.singh/RNA.Seq.Data/DPGP3.Genomic.Data/DPGP3.TajimasD.Per.Gene", header = FALSE, sep = "\t")
# Rename the Tajima's D column
colnames(tajimasD.per.gene)[2] = "TajimasD"

# Cleaning up junctionseq file
# Remove any sites that were not tested
junctionseq.results = junctionseq.results[!(is.na(junctionseq.results$pvalue)),]
# Lets remove any rows where the expr in males or females is less than 10
junctionseq.results.filtered = junctionseq.results[junctionseq.results$expr_male > 10,]
junctionseq.results.filtered = junctionseq.results.filtered[junctionseq.results.filtered$expr_female > 10,]

# Merge the two data files
junctionseq.results.merged = merge(junctionseq.results.filtered, tajimasD.per.gene, by.x = "geneID", by.y = "V1", sort = FALSE)

junctionseq.results.merged = junctionseq.results.merged[, c(1,25,26)]
junctionseq.results.merged = junctionseq.results.merged[!duplicated(test[1:3]),]

# Assign significant hits
junctionseq.results.merged$sig.hit = NA
junctionseq.results.merged$sig.hit[junctionseq.results.merged$geneWisePadj <= 0.01] = 1
junctionseq.results.merged$sig.hit[!(junctionseq.results.merged$geneWisePadj <= 0.01)] = 0

# Collapse duplicates
junctionseq.results.merged.unique = unique(junctionseq.results.merged)

# Bootstrap intervals for mean Tajima's D
# Sig hits
sig.hits = vector(mode = "numeric", length = 10000)
nonsig.hits = vector(mode = "numeric", length = 10000)

for (i in 1:10000) {
  sig.hits[i] = mean(sample(junctionseq.results.merged.unique$TajimasD[junctionseq.results.merged.unique$sig.hit == 1], nrow(junctionseq.results.merged[junctionseq.results.merged$sig.hit == 1,]), replace = TRUE))
  nonsig.hits[i] = mean(sample(junctionseq.results.merged.unique$TajimasD[junctionseq.results.merged.unique$sig.hit == 0], nrow(junctionseq.results.merged[junctionseq.results.merged$sig.hit == 1,]), replace = TRUE))
}

mean(sig.hits)
mean(nonsig.hits)
quantile(sig.hits, c(0.025,0.975))
quantile(nonsig.hits, c(0.025,0.975))

###################################################################
###            Comparing Gene Expression and TajimasD           ###
###################################################################

# --- R Code ---
require(dplyr)
require(doBy)
require(ggplot2)

### Loading in data files ###

# Read in JunctionSeq results
junctionseq.results = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/April23allGenes.results.txt", header = TRUE, sep = "\t")
# Read in Tajimas D per gene results
tajimasD.per.gene = read.table("/plas1/amardeep.singh/RNA.Seq.Data/DGRP.Genomic.Data/DGRP.TajimasD.Per.Gene", header = FALSE, sep = "\t")
# Rename the Tajima's D column
colnames(tajimasD.per.gene)[2] = "TajimasD"
# Read in the Differential Gene Expression (DGE) data  ## Note positive fold change means male expression > female expression
DGE.data = read.table("/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/DifferentialGeneExpression.txt", header = TRUE, sep = "\t")

### Cleaning up data files ###

# Remove any sites that were not tested
junctionseq.results = junctionseq.results[!(is.na(junctionseq.results$pvalue)),]
# Lets remove any rows where the expr in males or females is less than 10
junctionseq.results.filtered = junctionseq.results[junctionseq.results$expr_male < 10,]
junctionseq.results.filtered = junctionseq.results.filtered[junctionseq.results.filtered$expr_female < 10,]
# Subset out the columns of interest in the DGE data
DGE.data.sub = DGE.data[,c(1:3)]
# Remove rows from expression data without log2FC data
DGE.data.sub = DGE.data[!(is.na(DGE.data.sub$log2FoldChange)),]


### Merging data files ###
# Merge the junctionseq and tajimasD data
junctionseq.results.merged = merge(junctionseq.results.filtered, tajimasD.per.gene, by.x = "geneID", by.y = "V1", sort = FALSE)
junctionseq.results.merged = junctionseq.results.merged[, c(1,25,26)]
junctionseq.results.merged = junctionseq.results.merged[!duplicated(junctionseq.results.merged[1:3]),]
# Assign significant hits to the dataset
junctionseq.results.merged$sig.hit = NA
junctionseq.results.merged$sig.hit[junctionseq.results.merged$geneWisePadj <= 0.01] = 1
junctionseq.results.merged$sig.hit[!(junctionseq.results.merged$geneWisePadj <= 0.01)] = 0
# Collapse duplicates
junctionseq.results.merged.unique = unique(junctionseq.results.merged)
# Combining junctionseq/TajimasD data with gene expression data
junctionseq.expression.data = merge(junctionseq.results.merged.unique, DGE.data.sub, by.x = "geneID", by.y = "GeneID", sort = FALSE)


### Assign quartile bins for male and female biased gene expression
male.biased.sub = junctionseq.expression.data[junctionseq.expression.data$log2FoldChange > 0,]
female.biased.sub = junctionseq.expression.data[junctionseq.expression.data$log2FoldChange < 0,]
# Remove any rows that have an NA added to them
male.biased.sub = male.biased.sub[!(is.na(male.biased.sub$log2FoldChange)),]
female.biased.sub = female.biased.sub[!(is.na(female.biased.sub$log2FoldChange)),]
# Assign quartiles for both MBG and FBG
male.biased.sub = male.biased.sub %>% mutate(quartile = ntile(log2FoldChange, 4))
female.biased.sub = female.biased.sub %>% mutate(quartile = ntile(log2FoldChange, 4))
# For the male genes, lets add 4 to each quartile
male.biased.sub$quartile = male.biased.sub$quartile + 4
# Merge data back
junctionseq.expression.data = rbind(male.biased.sub,female.biased.sub)

# Lets plot TajimasD for sig hits in quartile bins
sig.hits = junctionseq.expression.data[junctionseq.expression.data$sig.hit == 1,]
non.sig.hits = junctionseq.expression.data[junctionseq.expression.data$sig.hit == 0,]

# Determine mean tajimasD in each quartile
sig.hits.mean = summaryBy(TajimasD ~ quartile, FUN=c(mean), data = sig.hits)
non.sig.hits.mean = summaryBy(TajimasD ~ quartile, FUN=c(mean), data = non.sig.hits)

# Bootstrap means for each subset
sig.hits.quantile.1 = vector(mode = "numeric", length = 10000)
sig.hits.quantile.2 = vector(mode = "numeric", length = 10000)
sig.hits.quantile.3 = vector(mode = "numeric", length = 10000)
sig.hits.quantile.4 = vector(mode = "numeric", length = 10000)
sig.hits.quantile.5 = vector(mode = "numeric", length = 10000)
sig.hits.quantile.6 = vector(mode = "numeric", length = 10000)
sig.hits.quantile.7 = vector(mode = "numeric", length = 10000)
sig.hits.quantile.8 = vector(mode = "numeric", length = 10000)
non.sig.hits.quantile.1 = vector(mode = "numeric", length = 10000)
non.sig.hits.quantile.2 = vector(mode = "numeric", length = 10000)
non.sig.hits.quantile.3 = vector(mode = "numeric", length = 10000)
non.sig.hits.quantile.4 = vector(mode = "numeric", length = 10000)
non.sig.hits.quantile.5 = vector(mode = "numeric", length = 10000)
non.sig.hits.quantile.6 = vector(mode = "numeric", length = 10000)
non.sig.hits.quantile.7 = vector(mode = "numeric", length = 10000)
non.sig.hits.quantile.8 = vector(mode = "numeric", length = 10000)


for (i in 1:10000){
  # Resample significant hits
  sig.hits.quantile.1[i] = mean(sample(sig.hits$TajimasD[sig.hits$quartile == 1], length(sig.hits$TajimasD[sig.hits$quartile == 1]), replace = TRUE))
  sig.hits.quantile.2[i] = mean(sample(sig.hits$TajimasD[sig.hits$quartile == 2], length(sig.hits$TajimasD[sig.hits$quartile == 2]), replace = TRUE))
  sig.hits.quantile.3[i] = mean(sample(sig.hits$TajimasD[sig.hits$quartile == 3], length(sig.hits$TajimasD[sig.hits$quartile == 3]), replace = TRUE))
  sig.hits.quantile.4[i] = mean(sample(sig.hits$TajimasD[sig.hits$quartile == 4], length(sig.hits$TajimasD[sig.hits$quartile == 4]), replace = TRUE))
  sig.hits.quantile.5[i] = mean(sample(sig.hits$TajimasD[sig.hits$quartile == 5], length(sig.hits$TajimasD[sig.hits$quartile == 5]), replace = TRUE))
  sig.hits.quantile.6[i] = mean(sample(sig.hits$TajimasD[sig.hits$quartile == 6], length(sig.hits$TajimasD[sig.hits$quartile == 6]), replace = TRUE))
  sig.hits.quantile.7[i] = mean(sample(sig.hits$TajimasD[sig.hits$quartile == 7], length(sig.hits$TajimasD[sig.hits$quartile == 7]), replace = TRUE))
  sig.hits.quantile.8[i] = mean(sample(sig.hits$TajimasD[sig.hits$quartile == 8], length(sig.hits$TajimasD[sig.hits$quartile == 8]), replace = TRUE))
  # Resample non significant hits
  non.sig.hits.quantile.1[i] = mean(sample(non.sig.hits$TajimasD[non.sig.hits$quartile == 1], length(non.sig.hits$TajimasD[non.sig.hits$quartile == 1]), replace = TRUE))
  non.sig.hits.quantile.2[i] = mean(sample(non.sig.hits$TajimasD[non.sig.hits$quartile == 2], length(non.sig.hits$TajimasD[non.sig.hits$quartile == 2]), replace = TRUE))
  non.sig.hits.quantile.3[i] = mean(sample(non.sig.hits$TajimasD[non.sig.hits$quartile == 3], length(non.sig.hits$TajimasD[non.sig.hits$quartile == 3]), replace = TRUE))
  non.sig.hits.quantile.4[i] = mean(sample(non.sig.hits$TajimasD[non.sig.hits$quartile == 4], length(non.sig.hits$TajimasD[non.sig.hits$quartile == 4]), replace = TRUE))
  non.sig.hits.quantile.5[i] = mean(sample(non.sig.hits$TajimasD[non.sig.hits$quartile == 5], length(non.sig.hits$TajimasD[non.sig.hits$quartile == 5]), replace = TRUE))
  non.sig.hits.quantile.6[i] = mean(sample(non.sig.hits$TajimasD[non.sig.hits$quartile == 6], length(non.sig.hits$TajimasD[non.sig.hits$quartile == 6]), replace = TRUE))
  non.sig.hits.quantile.7[i] = mean(sample(non.sig.hits$TajimasD[non.sig.hits$quartile == 7], length(non.sig.hits$TajimasD[non.sig.hits$quartile == 7]), replace = TRUE))
  non.sig.hits.quantile.8[i] = mean(sample(non.sig.hits$TajimasD[non.sig.hits$quartile == 8], length(non.sig.hits$TajimasD[non.sig.hits$quartile == 8]), replace = TRUE))
}
lower.CI = as.vector( c(  quantile(sig.hits.quantile.1, 0.025)[1],
                          quantile(sig.hits.quantile.2, 0.025)[1],
                          quantile(sig.hits.quantile.3, 0.025)[1],
                          quantile(sig.hits.quantile.4, 0.025)[1],
                          quantile(sig.hits.quantile.5, 0.025)[1],
                          quantile(sig.hits.quantile.6, 0.025)[1],
                          quantile(sig.hits.quantile.7, 0.025)[1],
                          quantile(sig.hits.quantile.8, 0.025)[1],
                          quantile(non.sig.hits.quantile.1, 0.025)[1],
                          quantile(non.sig.hits.quantile.2, 0.025)[1],
                          quantile(non.sig.hits.quantile.3, 0.025)[1],
                          quantile(non.sig.hits.quantile.4, 0.025)[1],
                          quantile(non.sig.hits.quantile.5, 0.025)[1],
                          quantile(non.sig.hits.quantile.6, 0.025)[1],
                          quantile(non.sig.hits.quantile.7, 0.025)[1],
                          quantile(non.sig.hits.quantile.8, 0.025)[1])
                          )

upper.CI = as.vector( c( quantile(sig.hits.quantile.1, 0.975)[1],
                         quantile(sig.hits.quantile.2, 0.975)[1],
                         quantile(sig.hits.quantile.3, 0.975)[1],
                         quantile(sig.hits.quantile.4, 0.975)[1],
                         quantile(sig.hits.quantile.5, 0.975)[1],
                         quantile(sig.hits.quantile.6, 0.975)[1],
                         quantile(sig.hits.quantile.7, 0.975)[1],
                         quantile(sig.hits.quantile.8, 0.975)[1],
                         quantile(non.sig.hits.quantile.1, 0.975)[1],
                         quantile(non.sig.hits.quantile.2, 0.975)[1],
                         quantile(non.sig.hits.quantile.3, 0.975)[1],
                         quantile(non.sig.hits.quantile.4, 0.975)[1],
                         quantile(non.sig.hits.quantile.5, 0.975)[1],
                         quantile(non.sig.hits.quantile.6, 0.975)[1],
                         quantile(non.sig.hits.quantile.7, 0.975)[1],
                         quantile(non.sig.hits.quantile.8, 0.975)[1])
                         )


# Construct a dataframe to hold all of our data for plotting

hit = rep(c("sig","non.sig"), each=8)
expression.quartile = rep(seq(1:8),2)
tajimasD.mean = c(sig.hits.mean$TajimasD.mean, non.sig.hits.mean$TajimasD.mean)
tajimasD.lowerCI = lower.CI
tajimasD.upperCI = upper.CI
tajimasD.df = as.data.frame(cbind(hit,expression.quartile, tajimasD.mean, tajimasD.lowerCI, tajimasD.upperCI))

tajimasD.expression.plot = ggplot(tajimasD.df, aes(y = tajimasD.mean, x = expression.quartile, colour = hit)) +
                    geom_point(aes(x = expression.quartile, y = tajimasD.mean, colour = hit),size = 1, position = position_dodge(width = 0.5)) +
                    geom_errorbar(aes(ymin = tajimasD.lowerCI, ymax = tajimasD.upperCI, x = expression.quartile, colour=hit), width = 0, position = position_dodge(width = 0.5))



plot(sig.hits.mean$Tajimas ~ sig.hits.mean$quartile)
plot(nonsig.hits.mean$Tajimas ~ nonsig.hits.mean$quartile)


test = bins.quantiles(male.biased.sub$log2FoldChange, target.bins = 4, max.breaks = 4)
temp <- male.biased.sub %>% mutate(quartile = ntile(log2FoldChange, 4))


## Plot


plot()
boxplot[test2$Tajimas]
boxplot = boxplot(tajimasD.data.sig.non.sig$TajimaD ~ tajimasD.data.sig.non.sig$hit)

nonsig.tajimaD = tajimasD.data.sig.non.sig[tajimasD.data.sig.non.sig$hit == 0,]$TajimaD
sig.tajimaD = tajimasD.data.sig.non.sig[tajimasD.data.sig.non.sig$hit == 1,]$TajimaD

## Bootstrap tajimasD for both sig and nonsig
nonsig.tajimaD.resamples = sample(nonsig.tajimaD, 10000, replace = TRUE)
sig.tajimaD.resamples = sample(sig.tajimaD, 10000, replace = TRUE)













#
