#
################################################################
######              Gene Expression Pipeline               #####
################################################################

## Author: Amardeep Singh -- amardeep.singh[at]utoronto.ca
## This program makes use of SAM files that I created separately see: STAR.Alignment.Pipeline.sh
## Originally obtained from Julia Kriener and modified

### Script Details ###
# This script is written primarily in R, Bash commands are denoted by #---- BASH ---- and end with # ---- ----
# This script is meant to determine differential gene expression between the sexes

##
# Path to sam files: /plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/RAL.mapped.files.to.ensembl/bam.files/samtools.sort.out
# PAth to gtf /plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/gtf/Drosophila_melanogaster.BDGP6.28.99.gtf.gz

# ---- R Script ----

###### Whole Body Tissue   ######

#####################################################################
###     Creating count matrices of each aligned transcriptome     ###
#####################################################################
require("GenomicFeatures")
require("Rsamtools")
require("GenomicAlignments")
require("DESeq2")


#############################
###   GENOMIC FEATURES    ###
#############################
# Read in gene model from GFF file
gtf.TxDb = makeTxDbFromGFF("/plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/gtf/Drosophila_melanogaster.BDGP6.28.99.gtf.gz", format="gtf")

# Creates a list of exons grouped by gene
exonsByGene = exonsBy(gtf.TxDb, by="gene")

# Specify BAM files to be used for generating read count matrix
bam_files.body = list.files("/plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/RAL.mapped.files.to.ensembl/bam.files/samtools.sort.out/OnlyBodySamples", pattern="SAM.sorted.trimmed.RAL", full=TRUE)
bam_files.head = list.files("/plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/RAL.mapped.files.to.ensembl/bam.files/samtools.sort.out/OnlyHeadSamples", pattern="SAM.sorted.trimmed.RAL", full=TRUE)

# Indicate that bamLst are BAM files
bamLst.body = BamFileList(bam_files.body, yieldSize=100000)
bamLst.head = BamFileList(bam_files.head, yieldSize=100000)

###############################
###   GENOMIC ALIGNMENTS    ###
###############################
# Call sumarizeOvarlaps to count reads and produce sum_exp which gets inputted into DESeq2
sum_exp.body <- summarizeOverlaps(exonsByGene, bamLst.body, mode="Union", singleEnd=TRUE, ignore.strand=TRUE)
sum_exp.head <- summarizeOverlaps(exonsByGene, bamLst.head, mode="Union", singleEnd=TRUE, ignore.strand=TRUE)

############################################
###      Prepping files for DESEQ2       ###
############################################
# Differential gene expression analysis pipeline
# Provide metadata about the individuals found the count matrix
# (each column of matrix = individual, each row of RNA_Data = info about individual)
# Making sure order of individuals in RNA Data and in summarized experiment match

# Make a condition table
# Body
condition.table.body = as.data.frame(factor(colnames(sum_exp.body)))
colnames(condition.table.body) = "SampleName"
condition.table.body$condition = factor(rep(c("female", "male"), 18))
condition.table.body$condition = as.factor(condition.table.body$condition)
#condition.table = as.data.frame(condition.table)
colData(sum_exp.body) = DataFrame(condition.table.body)

# Body
condition.table.head = as.data.frame(factor(colnames(sum_exp.head)))
colnames(condition.table.head) = "SampleName"
condition.table.head$condition = factor(rep(c("female", "male"), 18))
condition.table.head$condition = as.factor(condition.table.head$condition)
#condition.table = as.data.frame(condition.table)
colData(sum_exp.head) = DataFrame(condition.table.head)

###########################################
###     Running the DESeq2 pipeline     ###
###########################################

# build the DESeqDataSet from a SummarizedExperiment

# Whole Body
dds_interaction.body = DESeqDataSet(sum_exp.body, design = ~ condition)
#run DESeq2
dds_interaction.body = DESeq(dds_interaction.body)
#name results
all_genes_interaction.body = results(dds_interaction.body, contrast=c("condition", "male", "female")) # This specifies the output such that the log2FC is male/female
all_genes_interaction.alt.body = results(dds_interaction.body)

# Head
dds_interaction.head = DESeqDataSet(sum_exp.head, design = ~ condition)
#run DESeq2
dds_interaction.head = DESeq(dds_interaction.head)
#name results
all_genes_interaction.head = results(dds_interaction.head, contrast=c("condition", "male", "female")) # This specifies the output such that the log2FC is male/female
all_genes_interaction.alt.head = results(dds_interaction.head)

# Add FlyBase ID as first column
all_genes_interaction.head$FlyBaseID= rownames(all_genes_interaction.head)
all_genes_interaction.head = all_genes_interaction.head[,c(7,1:6)]
all_genes_interaction.body$FlyBaseID= rownames(all_genes_interaction.body)
all_genes_interaction.body = all_genes_interaction.body[,c(7,1:6)]

# Save output files for both whole body and head
write.table(all_genes_interaction.body, file = "/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.body.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
write.table(all_genes_interaction.head, file = "/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.head.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)


###########################################################################################
###     Comparing Gene Expression at genes with SD in Exon uasage to those without      ###
###########################################################################################
# --- R Code ---
rm(list=ls())
require(dplyr)
require(doBy)
require(ggplot2)

## Loading in data files
# Read in JunctionSeq results
junctionseq.results.body = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/BodyOutput/Aug1.Body.OnlyallGenes.results.txt", header = TRUE, sep = "\t")
junctionseq.results.head = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/HeadOutput/Aug1.Head.OnlyallGenes.results.txt", header = TRUE, sep = "\t")
## Load in the differential gene expression data
DGE.data.body = read.table("/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.body.txt", header = TRUE, sep = "\t")
DGE.data.head = read.table("/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.head.txt", header = TRUE, sep = "\t")

## Cleaning up data files
# Remove any sites that were not tested in the JunctionSeq output
junctionseq.results.body = junctionseq.results.body[!(is.na(junctionseq.results.body$pvalue)),]
junctionseq.results.head = junctionseq.results.head[!(is.na(junctionseq.results.head$pvalue)),]
# Lets remove any rows where the expr in males or females is less than 10 in the junctionseq data
junctionseq.results.filtered.body = junctionseq.results.body[junctionseq.results.body$expr_male > 10 & junctionseq.results.body$expr_female > 10,]
junctionseq.results.filtered.head = junctionseq.results.head[junctionseq.results.head$expr_male > 10 & junctionseq.results.head$expr_female > 10,]

# Assign significant hits to JunctionSeq output and clean up columns we don't care about
junctionseq.results.filtered.body$sig.hit = NA
junctionseq.results.filtered.body$sig.hit[junctionseq.results.filtered.body$geneWisePadj <= 0.01] = 1
junctionseq.results.filtered.body$sig.hit[!(junctionseq.results.filtered.body$geneWisePadj <= 0.01)] = 0
junctionseq.results.filtered.body = junctionseq.results.filtered.body[,c(2,25:26)]
junctionseq.results.filtered.head$sig.hit = NA
junctionseq.results.filtered.head$sig.hit[junctionseq.results.filtered.head$geneWisePadj <= 0.01] = 1
junctionseq.results.filtered.head$sig.hit[!(junctionseq.results.filtered.head$geneWisePadj <= 0.01)] = 0
junctionseq.results.filtered.head = junctionseq.results.filtered.head[,c(2,25:26)]

# Collapse duplicates
junctionseq.results.body.unique = unique(junctionseq.results.filtered.body)
junctionseq.results.head.unique = unique(junctionseq.results.filtered.head)

# Merge Junctionseq/TajimasD data with DGE data
junctionseq.results.body.merged.unique = merge(junctionseq.results.body.unique, DGE.data.body, by.x = "geneID", by.y = "FlyBaseID")
junctionseq.results.head.merged.unique = merge(junctionseq.results.head.unique, DGE.data.head, by.x = "geneID", by.y = "FlyBaseID")

# Subset out the columns of interest (i.e., gene ID, TajimasD, significant differences in exon usage, and log2FC)
expression.data.body = junctionseq.results.body.merged.unique[, c(1:3,6)]
expression.data.head = junctionseq.results.head.merged.unique[, c(1:3,6)]

# Assign quartile bins for male and female biased gene expression
male.biased.body = expression.data.body[expression.data.body$log2FoldChange > 0,]
female.biased.body = expression.data.body[expression.data.body$log2FoldChange < 0,]
male.biased.head = expression.data.head[expression.data.head$log2FoldChange > 0,]
female.biased.head = expression.data.head[expression.data.head$log2FoldChange < 0,]

# Remove any rows that have an NA added to them
male.biased.body = male.biased.body[!(is.na(male.biased.body$log2FoldChange)),]
female.biased.body = female.biased.body[!(is.na(female.biased.body$log2FoldChange)),]
male.biased.head = male.biased.head[!(is.na(male.biased.head$log2FoldChange)),]
female.biased.head = female.biased.head[!(is.na(female.biased.head$log2FoldChange)),]


# Assign quartiles for both MBG and FBG
male.biased.body = male.biased.body %>% mutate(quartile = ntile(log2FoldChange, 4))
female.biased.body = female.biased.body %>% mutate(quartile = ntile(log2FoldChange, 4))
male.biased.head = male.biased.head %>% mutate(quartile = ntile(log2FoldChange, 4))
female.biased.head = female.biased.head %>% mutate(quartile = ntile(log2FoldChange, 4))

# For the male genes, lets add 4 to each quartile
male.biased.body$quartile = male.biased.body$quartile + 4
male.biased.head$quartile = male.biased.head$quartile + 4

# Merge data back
expression.data.body = rbind(male.biased.body,female.biased.body)
expression.data.head = rbind(male.biased.head,female.biased.head)


## Plotting

# Subset sig and non sig sites
body.sig.hits = expression.data.body[expression.data.body$sig.hit == 1,]
body.non.sig.hits = expression.data.body[expression.data.body$sig.hit == 0,]
head.sig.hits = expression.data.head[expression.data.head$sig.hit == 1,]
head.non.sig.hits = expression.data.head[expression.data.head$sig.hit == 0,]

# Bootstrap means for each subset
# Body
body.sig.hits.quantile.1 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.2 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.3 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.4 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.5 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.6 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.7 = vector(mode = "numeric", length = 10000)
body.sig.hits.quantile.8 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.1 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.2 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.3 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.4 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.5 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.6 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.7 = vector(mode = "numeric", length = 10000)
body.non.sig.hits.quantile.8 = vector(mode = "numeric", length = 10000)

# Head
head.sig.hits.quantile.1 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.2 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.3 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.4 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.5 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.6 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.7 = vector(mode = "numeric", length = 10000)
head.sig.hits.quantile.8 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.1 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.2 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.3 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.4 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.5 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.6 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.7 = vector(mode = "numeric", length = 10000)
head.non.sig.hits.quantile.8 = vector(mode = "numeric", length = 10000)

# Resampling
for (i in 1:10000){

  body.sig.hits.quantile.1[i] = mean(sample(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 1], length(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 1]), replace = TRUE))
  body.sig.hits.quantile.2[i] = mean(sample(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 2], length(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 2]), replace = TRUE))
  body.sig.hits.quantile.3[i] = mean(sample(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 3], length(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 3]), replace = TRUE))
  body.sig.hits.quantile.4[i] = mean(sample(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 4], length(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 4]), replace = TRUE))
  body.sig.hits.quantile.5[i] = mean(sample(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 5], length(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 5]), replace = TRUE))
  body.sig.hits.quantile.6[i] = mean(sample(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 6], length(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 6]), replace = TRUE))
  body.sig.hits.quantile.7[i] = mean(sample(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 7], length(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 7]), replace = TRUE))
  body.sig.hits.quantile.8[i] = mean(sample(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 8], length(body.sig.hits$log2FoldChange[body.sig.hits$quartile == 8]), replace = TRUE))

  head.sig.hits.quantile.1[i] = mean(sample(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 1], length(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 1]), replace = TRUE))
  head.sig.hits.quantile.2[i] = mean(sample(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 2], length(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 2]), replace = TRUE))
  head.sig.hits.quantile.3[i] = mean(sample(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 3], length(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 3]), replace = TRUE))
  head.sig.hits.quantile.4[i] = mean(sample(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 4], length(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 4]), replace = TRUE))
  head.sig.hits.quantile.5[i] = mean(sample(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 5], length(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 5]), replace = TRUE))
  head.sig.hits.quantile.6[i] = mean(sample(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 6], length(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 6]), replace = TRUE))
  head.sig.hits.quantile.7[i] = mean(sample(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 7], length(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 7]), replace = TRUE))
  head.sig.hits.quantile.8[i] = mean(sample(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 8], length(head.sig.hits$log2FoldChange[head.sig.hits$quartile == 8]), replace = TRUE))

  # Resample non significant hits
  body.non.sig.hits.quantile.1[i] = mean(sample(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 1], length(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 1]), replace = TRUE))
  body.non.sig.hits.quantile.2[i] = mean(sample(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 2], length(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 2]), replace = TRUE))
  body.non.sig.hits.quantile.3[i] = mean(sample(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 3], length(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 3]), replace = TRUE))
  body.non.sig.hits.quantile.4[i] = mean(sample(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 4], length(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 4]), replace = TRUE))
  body.non.sig.hits.quantile.5[i] = mean(sample(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 5], length(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 5]), replace = TRUE))
  body.non.sig.hits.quantile.6[i] = mean(sample(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 6], length(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 6]), replace = TRUE))
  body.non.sig.hits.quantile.7[i] = mean(sample(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 7], length(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 7]), replace = TRUE))
  body.non.sig.hits.quantile.8[i] = mean(sample(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 8], length(body.non.sig.hits$log2FoldChange[body.non.sig.hits$quartile == 8]), replace = TRUE))

  head.non.sig.hits.quantile.1[i] = mean(sample(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 1], length(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 1]), replace = TRUE))
  head.non.sig.hits.quantile.2[i] = mean(sample(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 2], length(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 2]), replace = TRUE))
  head.non.sig.hits.quantile.3[i] = mean(sample(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 3], length(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 3]), replace = TRUE))
  head.non.sig.hits.quantile.4[i] = mean(sample(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 4], length(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 4]), replace = TRUE))
  head.non.sig.hits.quantile.5[i] = mean(sample(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 5], length(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 5]), replace = TRUE))
  head.non.sig.hits.quantile.6[i] = mean(sample(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 6], length(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 6]), replace = TRUE))
  head.non.sig.hits.quantile.7[i] = mean(sample(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 7], length(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 7]), replace = TRUE))
  head.non.sig.hits.quantile.8[i] = mean(sample(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 8], length(head.non.sig.hits$log2FoldChange[head.non.sig.hits$quartile == 8]), replace = TRUE))
print (i)
}

body.lower.CI = as.vector( c(  quantile(body.sig.hits.quantile.1, 0.05)[1],
                          quantile(body.sig.hits.quantile.2, 0.05)[1],
                          quantile(body.sig.hits.quantile.3, 0.05)[1],
                          quantile(body.sig.hits.quantile.4, 0.05)[1],
                          quantile(body.sig.hits.quantile.5, 0.05)[1],
                          quantile(body.sig.hits.quantile.6, 0.05)[1],
                          quantile(body.sig.hits.quantile.7, 0.05)[1],
                          quantile(body.sig.hits.quantile.8, 0.05)[1],
                          quantile(body.non.sig.hits.quantile.1, 0.05)[1],
                          quantile(body.non.sig.hits.quantile.2, 0.05)[1],
                          quantile(body.non.sig.hits.quantile.3, 0.05)[1],
                          quantile(body.non.sig.hits.quantile.4, 0.05)[1],
                          quantile(body.non.sig.hits.quantile.5, 0.05)[1],
                          quantile(body.non.sig.hits.quantile.6, 0.05)[1],
                          quantile(body.non.sig.hits.quantile.7, 0.05)[1],
                          quantile(body.non.sig.hits.quantile.8, 0.05)[1])
                          )

body.upper.CI = as.vector( c( quantile(body.sig.hits.quantile.1, 0.95)[1],
                         quantile(body.sig.hits.quantile.2, 0.95)[1],
                         quantile(body.sig.hits.quantile.3, 0.95)[1],
                         quantile(body.sig.hits.quantile.4, 0.95)[1],
                         quantile(body.sig.hits.quantile.5, 0.95)[1],
                         quantile(body.sig.hits.quantile.6, 0.95)[1],
                         quantile(body.sig.hits.quantile.7, 0.95)[1],
                         quantile(body.sig.hits.quantile.8, 0.95)[1],
                         quantile(body.non.sig.hits.quantile.1, 0.95)[1],
                         quantile(body.non.sig.hits.quantile.2, 0.95)[1],
                         quantile(body.non.sig.hits.quantile.3, 0.95)[1],
                         quantile(body.non.sig.hits.quantile.4, 0.95)[1],
                         quantile(body.non.sig.hits.quantile.5, 0.95)[1],
                         quantile(body.non.sig.hits.quantile.6, 0.95)[1],
                         quantile(body.non.sig.hits.quantile.7, 0.95)[1],
                         quantile(body.non.sig.hits.quantile.8, 0.95)[1])
                         )

head.lower.CI = as.vector( c(  quantile(head.sig.hits.quantile.1, 0.05)[1],
                          quantile(head.sig.hits.quantile.2, 0.05)[1],
                          quantile(head.sig.hits.quantile.3, 0.05)[1],
                          quantile(head.sig.hits.quantile.4, 0.05)[1],
                          quantile(head.sig.hits.quantile.5, 0.05)[1],
                          quantile(head.sig.hits.quantile.6, 0.05)[1],
                          quantile(head.sig.hits.quantile.7, 0.05)[1],
                          quantile(head.sig.hits.quantile.8, 0.05)[1],
                          quantile(head.non.sig.hits.quantile.1, 0.05)[1],
                          quantile(head.non.sig.hits.quantile.2, 0.05)[1],
                          quantile(head.non.sig.hits.quantile.3, 0.05)[1],
                          quantile(head.non.sig.hits.quantile.4, 0.05)[1],
                          quantile(head.non.sig.hits.quantile.5, 0.05)[1],
                          quantile(head.non.sig.hits.quantile.6, 0.05)[1],
                          quantile(head.non.sig.hits.quantile.7, 0.05)[1],
                          quantile(head.non.sig.hits.quantile.8, 0.05)[1])
                          )

head.upper.CI = as.vector( c( quantile(head.sig.hits.quantile.1, 0.95)[1],
                         quantile(head.sig.hits.quantile.2, 0.95)[1],
                         quantile(head.sig.hits.quantile.3, 0.95)[1],
                         quantile(head.sig.hits.quantile.4, 0.95)[1],
                         quantile(head.sig.hits.quantile.5, 0.95)[1],
                         quantile(head.sig.hits.quantile.6, 0.95)[1],
                         quantile(head.sig.hits.quantile.7, 0.95)[1],
                         quantile(head.sig.hits.quantile.8, 0.95)[1],
                         quantile(head.non.sig.hits.quantile.1, 0.95)[1],
                         quantile(head.non.sig.hits.quantile.2, 0.95)[1],
                         quantile(head.non.sig.hits.quantile.3, 0.95)[1],
                         quantile(head.non.sig.hits.quantile.4, 0.95)[1],
                         quantile(head.non.sig.hits.quantile.5, 0.95)[1],
                         quantile(head.non.sig.hits.quantile.6, 0.95)[1],
                         quantile(head.non.sig.hits.quantile.7, 0.95)[1],
                         quantile(head.non.sig.hits.quantile.8, 0.95)[1])
                         )






#
