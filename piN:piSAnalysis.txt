###################################################################
###################################################################
#####               p i N   /   p i S   Analysis              #####
###################################################################
###################################################################

###############################################################
######    Generating VCFs from Multifasta (.fas) files   ######
###############################################################

# This code assumes you have generated the multifasta files for each chromosome arm (see 'DGRP.Processing.txt')

# Making VCF files that contain both variant and invariant sites from .fas  multi-alignment files
~/apps/snp-sites/bin/snp-sites -v -b -o ChrX.variant.and.invariant.test.vcf ChrX.fas &
~/apps/snp-sites/bin/snp-sites -v -b -o Chr2L.variant.and.invariant.vcf Chr2L.fas &
~/apps/snp-sites/bin/snp-sites -v -b -o Chr2R.variant.and.invariant.vcf Chr2R.fas &
~/apps/snp-sites/bin/snp-sites -v -b -o Chr3L.variant.and.invariant.vcf Chr3L.fas &
~/apps/snp-sites/bin/snp-sites -v -b -o Chr3R.variant.and.invariant.vcf Chr3R.fas &

## Prepare VCF files for liftOver to convert coordinates from release 5 (dm3) -> release 6 (dm6)
# Redirect header to attach to VCF later
cat Chr2L.variant.and.invariant.vcf | grep '#' > vcf.header

Remove sites with no genotypic information
sed -i '/N/d' Chr2L.variant.and.invariant.vcf &
sed -i '/N/d' Chr2R.variant.and.invariant.vcf &
sed -i '/N/d' Chr3L.variant.and.invariant.vcf &
sed -i '/N/d' Chr3R.variant.and.invariant.vcf &
sed -i '/N/d' ChrX.variant.and.invariant.vcf &

# Remove headers from vcf files
sed -i '/^#/d' Chr2L.variant.and.invariant.vcf &
sed -i '/^#/d' Chr2R.variant.and.invariant.vcf &
sed -i '/^#/d' Chr3L.variant.and.invariant.vcf &
sed -i '/^#/d' Chr3R.variant.and.invariant.vcf &
sed -i '/^#/d' ChrX.variant.and.invariant.vcf &

# Replace Chromosome column with proper ID
cat Chr2L.variant.and.invariant.vcf | awk -F"\t" '{OFS=FS}{ $1="2L" ; print   }' > Chr2L.tmp && mv Chr2L.tmp Chr2L.variant.and.invariant.vcf &
cat Chr2R.variant.and.invariant.vcf | awk -F"\t" '{OFS=FS}{ $1="2R" ; print   }' > Chr2R.tmp && mv Chr2R.tmp Chr2R.variant.and.invariant.vcf &
cat Chr3L.variant.and.invariant.vcf | awk -F"\t" '{OFS=FS}{ $1="3L" ; print   }' > Chr3L.tmp && mv Chr3L.tmp Chr3L.variant.and.invariant.vcf &
cat Chr3R.variant.and.invariant.vcf | awk -F"\t" '{OFS=FS}{ $1="3R" ; print   }' > Chr3R.tmp && mv Chr3R.tmp Chr3R.variant.and.invariant.vcf &
cat ChrX.variant.and.invariant.vcf | awk -F"\t" '{OFS=FS}{ $1="X" ; print   }' > ChrX.tmp && mv ChrX.tmp ChrX.variant.and.invariant.vcf &
rm Chr*.tmp

# Add a unique ID column that can be used to reattach to lifted over coordinates
cat Chr2L.variant.and.invariant.vcf | awk 'BEGIN {OFS=FS="\t"}{print $1 ":" $2}' | paste - Chr2L.variant.and.invariant.vcf | cut -f 1,4-$NF > Chr2L.variant.and.invariant.vcf.tmp &
cat Chr2R.variant.and.invariant.vcf | awk 'BEGIN {OFS=FS="\t"}{print $1 ":" $2}' | paste - Chr2R.variant.and.invariant.vcf | cut -f 1,4-$NF > Chr2R.variant.and.invariant.vcf.tmp &
cat Chr3L.variant.and.invariant.vcf | awk 'BEGIN {OFS=FS="\t"}{print $1 ":" $2}' | paste - Chr3L.variant.and.invariant.vcf | cut -f 1,4-$NF > Chr3L.variant.and.invariant.vcf.tmp &
cat Chr3R.variant.and.invariant.vcf | awk 'BEGIN {OFS=FS="\t"}{print $1 ":" $2}' | paste - Chr3R.variant.and.invariant.vcf | cut -f 1,4-$NF > Chr3R.variant.and.invariant.vcf.tmp &
cat ChrX.variant.and.invariant.vcf | awk 'BEGIN {OFS=FS="\t"}{print $1 ":" $2}' | paste - ChrX.variant.and.invariant.vcf | cut -f 1,4-$NF > ChrX.variant.and.invariant.vcf.tmp &

# Make columns with coordinates in BED format for liftOver
cat Chr2L.variant.and.invariant.vcf | awk 'BEGIN { OFS=FS="\t" }{print "chr" $1, $2-1, $2 }' | paste - Chr2L.variant.and.invariant.vcf > Chr2L.variant.and.invariant.vcf.for.liftover &
cat Chr2R.variant.and.invariant.vcf | awk 'BEGIN { OFS=FS="\t" }{print "chr" $1, $2-1, $2 }' | paste - Chr2R.variant.and.invariant.vcf > Chr2R.variant.and.invariant.vcf.for.liftover &
cat Chr3L.variant.and.invariant.vcf | awk 'BEGIN { OFS=FS="\t" }{print "chr" $1, $2-1, $2 }' | paste - Chr3L.variant.and.invariant.vcf > Chr3L.variant.and.invariant.vcf.for.liftover &
cat Chr3R.variant.and.invariant.vcf | awk 'BEGIN { OFS=FS="\t" }{print "chr" $1, $2-1, $2 }' | paste - Chr3R.variant.and.invariant.vcf > Chr3R.variant.and.invariant.vcf.for.liftover &
cat ChrX.variant.and.invariant.vcf | awk 'BEGIN { OFS=FS="\t" }{print "chr" $1, $2-1, $2 }' | paste - ChrX.variant.and.invariant.vcf > ChrX.variant.and.invariant.vcf.for.liftover &

# Liftover from assembly dm3 to dm6
liftOver -bedPlus=3 -tab /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/DGRP.Genomic.Data/Chr2L.variant.and.invariant.vcf.for.liftover /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/dm3ToDm6.over.chain /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/DGRP.Genomic.Data/Chr2L.liftedover.vcf Chr2L.unlifted.bed &
liftOver -bedPlus=3 -tab /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/DGRP.Genomic.Data/Chr2R.variant.and.invariant.vcf.for.liftover /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/dm3ToDm6.over.chain /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/DGRP.Genomic.Data/Chr2R.liftedover.vcf Chr2R.unlifted.bed &
liftOver -bedPlus=3 -tab /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/DGRP.Genomic.Data/Chr3L.variant.and.invariant.vcf.for.liftover /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/dm3ToDm6.over.chain /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/DGRP.Genomic.Data/Chr3L.liftedover.vcf Chr3L.unlifted.bed &
liftOver -bedPlus=3 -tab /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/DGRP.Genomic.Data/Chr3R.variant.and.invariant.vcf.for.liftover /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/dm3ToDm6.over.chain /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/DGRP.Genomic.Data/Chr3R.liftedover.vcf Chr3R.unlifted.bed &
liftOver -bedPlus=3 -tab /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/DGRP.Genomic.Data/ChrX.variant.and.invariant.vcf.for.liftover /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/dm3ToDm6.over.chain /plas1/amardeep.singh/GenomicsMaleFemaleArchitecture/GenomicData/DGRP.Genomic.Data/ChrX.liftedover.vcf ChrX.unlifted.bed &

## Add a unique ID column with the old coordinates so that I can intersect the old and new vcfs to recover all individual genotypes
## NOTE: THESE OUTPUT FILES ARE NOW 1 BASED!
cat Chr2L.liftedover.vcf | awk 'BEGIN {OFS=FS="\t"}{print $4 ":" $5, $4, $3}' > Chr2L.liftedOver.Coordinates &
cat Chr2R.liftedover.vcf | awk 'BEGIN {OFS=FS="\t"}{print $4 ":" $5, $4, $3}' > Chr2R.liftedOver.Coordinates &
cat Chr3L.liftedover.vcf | awk 'BEGIN {OFS=FS="\t"}{print $4 ":" $5, $4, $3}' > Chr3L.liftedOver.Coordinates &
cat Chr3R.liftedover.vcf | awk 'BEGIN {OFS=FS="\t"}{print $4 ":" $5, $4, $3}' > Chr3R.liftedOver.Coordinates &
cat ChrX.liftedover.vcf | awk 'BEGIN {OFS=FS="\t"}{print $4 ":" $5, $4, $3}' > ChrX.liftedOver.Coordinates &

# Now file with new coordinates to file with genotypic info on all individuals to make VCF with release 6 coordinates
join -j 1 -t $'\t' Chr2L.liftedOver.Coordinates Chr2L.variant.and.invariant.vcf.tmp | cut -f 2-$NF > Chr2L.variant.invariant.release6.vcf &
join -j 1 -t $'\t' Chr2R.liftedOver.Coordinates Chr2R.variant.and.invariant.vcf.tmp | cut -f 2-$NF > Chr2R.variant.invariant.release6.vcf &
join -j 1 -t $'\t' Chr3L.liftedOver.Coordinates Chr3L.variant.and.invariant.vcf.tmp | cut -f 2-$NF > Chr3L.variant.invariant.release6.vcf &
join -j 1 -t $'\t' Chr3R.liftedOver.Coordinates Chr3R.variant.and.invariant.vcf.tmp | cut -f 2-$NF > Chr3R.variant.invariant.release6.vcf &
join -j 1 -t $'\t' ChrX.liftedOver.Coordinates ChrX.variant.and.invariant.vcf.tmp | cut -f 2-$NF > ChrX.variant.invariant.release6.vcf &

# Remove intermediate files
rm Chr*.liftedOver.Coordinates
rm Chr*.liftedover.vcf
rm Chr*.variant.and.invariant.vcf.tmp

#######################################################################
######    Generating lists of 0fold and 4fold degenerate sites   ######
#######################################################################

# Run the 'DegeneracyScript' provided by Tyler Kent
# The code can be run as a bash script but I just ran each step separately so make sure to modify the input/output files
#   and make sure all your files are where they need to be

# Extract coordinates for each site (these bed files are 0-based and need to be updated to 1-based to match the vcf files)
cat DGRP.2L.bedout_0fold.bed | awk '{OFS = FS = "\t"} {print $1 ":" $2+1}' > DGRP.2L.bedout_0fold.coordinates &
cat DGRP.2L.bedout_4fold.bed | awk '{OFS = FS = "\t"} {print $1 ":" $2+1}' > DGRP.2L.bedout_4fold.coordinates &
cat DGRP.2R.bedout_0fold.bed | awk '{OFS = FS = "\t"} {print $1 ":" $2+1}' > DGRP.2R.bedout_0fold.coordinates &
cat DGRP.2R.bedout_4fold.bed | awk '{OFS = FS = "\t"} {print $1 ":" $2+1}' > DGRP.2R.bedout_4fold.coordinates &

cat DGRP.3L.bedout_0fold.bed | awk '{OFS = FS = "\t"} {print $1 ":" $2+1}' > DGRP.3L.bedout_0fold.coordinates &
cat DGRP.3L.bedout_4fold.bed | awk '{OFS = FS = "\t"} {print $1 ":" $2+1}' > DGRP.3L.bedout_4fold.coordinates &
cat DGRP.3R.bedout_0fold.bed | awk '{OFS = FS = "\t"} {print $1 ":" $2+1}' > DGRP.3R.bedout_0fold.coordinates &
cat DGRP.3R.bedout_4fold.bed | awk '{OFS = FS = "\t"} {print $1 ":" $2+1}' > DGRP.3R.bedout_4fold.coordinates &

cat DGRP.X.bedout_0fold.bed | awk '{OFS = FS = "\t"} {print $1 ":" $2+1}' > DGRP.X.bedout_0fold.coordinates &
cat DGRP.X.bedout_4fold.bed | awk '{OFS = FS = "\t"} {print $1 ":" $2+1}' > DGRP.X.bedout_4fold.coordinates &


##################################################################################################################
######   Parse out vcf files into one containing only 0fold sites and another containing only 4fold sites   ######
##################################################################################################################


# Adding a unique ID column that will be used to clean out sites that don't match the 4fold and 0fold degenerate sites list
cat Chr2L.variant.invariant.release6.vcf | awk '{print $1 ":" $2}' | paste - Chr2L.variant.invariant.release6.vcf > Chr2L.variant.invariant.release6.vcf.tmp &
cat Chr2R.variant.invariant.release6.vcf | awk '{print $1 ":" $2}' | paste - Chr2R.variant.invariant.release6.vcf > Chr2R.variant.invariant.release6.vcf.tmp &
cat Chr3L.variant.invariant.release6.vcf | awk '{print $1 ":" $2}' | paste - Chr3L.variant.invariant.release6.vcf > Chr3L.variant.invariant.release6.vcf.tmp &
cat Chr3R.variant.invariant.release6.vcf | awk '{print $1 ":" $2}' | paste - Chr3R.variant.invariant.release6.vcf > Chr3R.variant.invariant.release6.vcf.tmp &
cat ChrX.variant.invariant.release6.vcf | awk '{print $1 ":" $2}' | paste - ChrX.variant.invariant.release6.vcf > ChrX.variant.invariant.release6.vcf.tmp &


# Compare to 4fold and 0fold coordinate sites to generate parsed VCFs for each type of variant
grep -w -F -f /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/TylersCode/bedOut/DGRP.2L.bedout_0fold.coordinates Chr2L.variant.invariant.release6.vcf.tmp > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/Chr2L.0fold.vcf &
grep -w -F -f /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/TylersCode/bedOut/DGRP.2L.bedout_4fold.coordinates Chr2L.variant.invariant.release6.vcf.tmp > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/Chr2L.4fold.vcf &
grep -w -F -f /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/TylersCode/bedOut/DGRP.2R.bedout_0fold.coordinates Chr2R.variant.invariant.release6.vcf.tmp > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/Chr2R.0fold.vcf &
grep -w -F -f /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/TylersCode/bedOut/DGRP.2R.bedout_4fold.coordinates Chr2R.variant.invariant.release6.vcf.tmp > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/Chr2R.4fold.vcf &

grep -w -F -f /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/TylersCode/bedOut/DGRP.3L.bedout_0fold.coordinates Chr3L.variant.invariant.release6.vcf.tmp > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/Chr3L.0fold.vcf &
grep -w -F -f /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/TylersCode/bedOut/DGRP.3L.bedout_4fold.coordinates Chr3L.variant.invariant.release6.vcf.tmp > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/Chr3L.4fold.vcf &
grep -w -F -f /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/TylersCode/bedOut/DGRP.3R.bedout_0fold.coordinates Chr3R.variant.invariant.release6.vcf.tmp > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/Chr3R.0fold.vcf &
grep -w -F -f /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/TylersCode/bedOut/DGRP.3R.bedout_4fold.coordinates Chr3R.variant.invariant.release6.vcf.tmp > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/Chr3R.4fold.vcf &

grep -w -F -f /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/TylersCode/bedOut/DGRP.X.bedout_0fold.coordinates ChrX.variant.invariant.release6.vcf.tmp > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/ChrX.0fold.vcf &
grep -w -F -f /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/TylersCode/bedOut/DGRP.X.bedout_4fold.coordinates ChrX.variant.invariant.release6.vcf.tmp > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/ChrX.4fold.vcf &

## Remove ID column before processing VCF
cat Chr2L.0fold.vcf | cut -f 2-$NF > Chr2L.0fold.vcf.tmp && mv Chr2L.0fold.vcf.tmp Chr2L.0fold.vcf &
cat Chr2L.4fold.vcf | cut -f 2-$NF > Chr2L.4fold.vcf.tmp && mv Chr2L.4fold.vcf.tmp Chr2L.4fold.vcf &
cat Chr2R.0fold.vcf | cut -f 2-$NF > Chr2R.0fold.vcf.tmp && mv Chr2R.0fold.vcf.tmp Chr2R.0fold.vcf &
cat Chr2R.4fold.vcf | cut -f 2-$NF > Chr2R.4fold.vcf.tmp && mv Chr2R.4fold.vcf.tmp Chr2R.4fold.vcf &
cat Chr3L.0fold.vcf | cut -f 2-$NF > Chr3L.0fold.vcf.tmp && mv Chr3L.0fold.vcf.tmp Chr3L.0fold.vcf &
cat Chr3L.4fold.vcf | cut -f 2-$NF > Chr3L.4fold.vcf.tmp && mv Chr3L.4fold.vcf.tmp Chr3L.4fold.vcf &
cat Chr3R.0fold.vcf | cut -f 2-$NF > Chr3R.0fold.vcf.tmp && mv Chr3R.0fold.vcf.tmp Chr3R.0fold.vcf &
cat Chr3R.4fold.vcf | cut -f 2-$NF > Chr3R.4fold.vcf.tmp && mv Chr3R.4fold.vcf.tmp Chr3R.4fold.vcf &
cat ChrX.0fold.vcf | cut -f 2-$NF > ChrX.0fold.vcf.tmp && mv ChrX.0fold.vcf.tmp ChrX.0fold.vcf &
cat ChrX.4fold.vcf | cut -f 2-$NF > ChrX.4fold.vcf.tmp && mv ChrX.4fold.vcf.tmp ChrX.4fold.vcf &


##########################################################
### Convert SNP-sits VCF format to "Normal VCF" format ###    ## I forked this code form Ruzicka et al 2019 PLoS Bio
##########################################################

## Modify this code before running it! - Tell R which VCF to work with

#----- R code -----
rm(list=ls())
require(matrixStats)

## Modify VCF for Tajima's D analysis (r5 coordinates + remove positions where depth<20)

## Import vcf files of interest ## Need to change these two depending on the specific file
chr.vcf <- read.table("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/ChrX.4fold.vcf")
print("Chromosome Loaded!")
output.name = "chr.X.4fold"
chr.number = "X"

#Sanity check
#plot(rownames(test.vcf),test.vcf$V2)

#Three possible types of acceptable allele
#No missing values
type1 <- c("A","T","G","C")
part1 <- subset(chr.vcf,V5 %in% type1)
if (nrow(part1) > 0) {
part1[part1==1] <- "1/1"
part1[part1==0] <- "0/0"
}

#Missing value = 2
type2 <- c("A,*","T,*","G,*","C,*")
part2 <- subset(chr.vcf,V5 %in% type2)
if (nrow(part2) > 0) {
part2[part2==2] <- "N/N"
part2[part2==1] <- "1/1"
part2[part2==0] <- "0/0" }
part2$V5 <- ifelse(part2$V5=="A,*","A",ifelse(part2$V5=="T,*","T",ifelse(part2$V5=="C,*","C",ifelse(part2$V5=="G,*","G",NA))))

#Missing value = 1
type3 <- c("*,A","*,T","*,G","*,C")
part3 <- subset(chr.vcf,V5 %in% type3)
if (nrow(part3) > 0) {
part3[part3==2] <- "1/1"
part3[part3==1] <- "N/N"
part3[part3==0] <- "0/0"
part3$V5 <- ifelse(part3$V5=="*,A","A",ifelse(part3$V5=="*,T","T",ifelse(part3$V5=="*,C","C",ifelse(part3$V5=="*,G","G",NA))))
}

#Missing value = none, i.e., this site is monomorphic
type4 <- c("*")
part4 <- subset(chr.vcf,V5 %in% type4)
if (nrow(part4) > 0) {
part4[part4==0] <- "0/0"
part4[part4==1] <- "N/N"
part4$V5 <- "."
}

#Rbind parts 1,2,3,4
vcf <- rbind(part1,part2,part3,part4)
#Transform position column to numeric
vcf$V2 <- as.numeric(vcf$V2)
#Order by position column
vcf <- vcf[order(vcf$V2),]
#Replace chromosome column with 1
vcf$V1 <- chr.number
#Filter for depth (DP>19)
vcf <- subset(vcf,rowCounts(vcf[,10:ncol(vcf)]!="./.")>41) # This now removes any sites that have more than 20% missing data
vcf$V2 <- format(vcf$V2,scientific=F)

write.table(vcf, file = paste("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/", output.name, "_modified.vcf", sep = ""), sep="\t",row.names = F, quote=F, col.names=F)

rm(list=ls())

# ---- /R Code ----

# Add header back to vcf files
cat vcf.header chr.2L.0fold_modified.vcf > chr.2L.0fold_modified.vcf.tmp && mv chr.2L.0fold_modified.vcf.tmp chr.2L.0fold_modified.vcf &
cat vcf.header chr.2L.4fold_modified.vcf > chr.2L.4fold_modified.vcf.tmp && mv chr.2L.4fold_modified.vcf.tmp chr.2L.4fold_modified.vcf &
cat vcf.header chr.2R.0fold_modified.vcf > chr.2R.0fold_modified.vcf.tmp && mv chr.2R.0fold_modified.vcf.tmp chr.2R.0fold_modified.vcf &
cat vcf.header chr.2R.4fold_modified.vcf > chr.2R.4fold_modified.vcf.tmp && mv chr.2R.4fold_modified.vcf.tmp chr.2R.4fold_modified.vcf &
cat vcf.header chr.3L.0fold_modified.vcf > chr.3L.0fold_modified.vcf.tmp && mv chr.3L.0fold_modified.vcf.tmp chr.3L.0fold_modified.vcf &
cat vcf.header chr.3L.4fold_modified.vcf > chr.3L.4fold_modified.vcf.tmp && mv chr.3L.4fold_modified.vcf.tmp chr.3L.4fold_modified.vcf &
cat vcf.header chr.3R.0fold_modified.vcf > chr.3R.0fold_modified.vcf.tmp && mv chr.3R.0fold_modified.vcf.tmp chr.3R.0fold_modified.vcf &
cat vcf.header chr.3R.4fold_modified.vcf > chr.3R.4fold_modified.vcf.tmp && mv chr.3R.4fold_modified.vcf.tmp chr.3R.4fold_modified.vcf &
cat vcf.header chr.X.0fold_modified.vcf > chr.X.0fold_modified.vcf.tmp && mv chr.X.0fold_modified.vcf.tmp chr.X.0fold_modified.vcf &
cat vcf.header chr.X.4fold_modified.vcf > chr.X.4fold_modified.vcf.tmp && mv chr.X.4fold_modified.vcf.tmp chr.X.4fold_modified.vcf &


###############################################################################################################
######    NOT MAF FILTERED: Calculating Nucleotide Diversity in the DGRP and Assigning Sites to genes    ######
###############################################################################################################

cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2L.4fold_modified.vcf | vcftools --vcf - --site-pi --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/Chr2L.4fold &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2L.0fold_modified.vcf | vcftools --vcf - --site-pi --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/Chr2L.0fold &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2R.4fold_modified.vcf | vcftools --vcf - --site-pi --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/Chr2R.4fold &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2R.0fold_modified.vcf | vcftools --vcf - --site-pi --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/Chr2R.0fold &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3L.4fold_modified.vcf | vcftools --vcf - --site-pi --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/Chr3L.4fold &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3L.0fold_modified.vcf | vcftools --vcf - --site-pi --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/Chr3L.0fold &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3R.4fold_modified.vcf | vcftools --vcf - --site-pi --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/Chr3R.4fold &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3R.0fold_modified.vcf | vcftools --vcf - --site-pi --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/Chr3R.0fold &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.X.4fold_modified.vcf | vcftools --vcf - --site-pi --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/ChrX.4fold &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.X.0fold_modified.vcf | vcftools --vcf - --site-pi --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/ChrX.0fold &

## Intersect with GFF to identify genes that each site falls into
# This is probably a roundabout way to do this, but whatever
# Make separate GFF files for each chromosome arm, correctly formatted to intersect with a BED file that is 0based
grep '2L' Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr2L.gff &
grep '2R' Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr2R.gff &
grep '3L' Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr3L.gff &
grep '3R' Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr3R.gff &
grep 'X' Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > ChrX.gff &

# Format the nucleotide diversity files
grep '2L' Chr2L.0fold.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr2L.0fold.sites.pi.for.bedtools &
grep '2L' Chr2L.4fold.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr2L.4fold.sites.pi.for.bedtools &
grep '2R' Chr2R.0fold.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr2R.0fold.sites.pi.for.bedtools &
grep '2R' Chr2R.4fold.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr2R.4fold.sites.pi.for.bedtools &
grep '3L' Chr3L.0fold.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr3L.0fold.sites.pi.for.bedtools &
grep '3L' Chr3L.4fold.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr3L.4fold.sites.pi.for.bedtools &
grep '3R' Chr3R.0fold.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr3R.0fold.sites.pi.for.bedtools &
grep '3R' Chr3R.4fold.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr3R.4fold.sites.pi.for.bedtools &
grep 'X' ChrX.0fold.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > ChrX.0fold.sites.pi.for.bedtools &
grep 'X' ChrX.4fold.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > ChrX.4fold.sites.pi.for.bedtools &

## Intersect files with bedtools
bedtools intersect  -a Chr2L.0fold.sites.pi.for.bedtools -b Chr2L.gff -wa -wb > Chr2L.0Fold.bedtools.out &
bedtools intersect  -a Chr2L.4fold.sites.pi.for.bedtools -b Chr2L.gff -wa -wb > Chr2L.4Fold.bedtools.out &
bedtools intersect  -a Chr2R.0fold.sites.pi.for.bedtools -b Chr2R.gff -wa -wb > Chr2R.0Fold.bedtools.out &
bedtools intersect  -a Chr2R.4fold.sites.pi.for.bedtools -b Chr2R.gff -wa -wb > Chr2R.4Fold.bedtools.out &
bedtools intersect  -a Chr3L.0fold.sites.pi.for.bedtools -b Chr3L.gff -wa -wb > Chr3L.0Fold.bedtools.out &
bedtools intersect  -a Chr3L.4fold.sites.pi.for.bedtools -b Chr3L.gff -wa -wb > Chr3L.4Fold.bedtools.out &
bedtools intersect  -a Chr3R.0fold.sites.pi.for.bedtools -b Chr3R.gff -wa -wb > Chr3R.0Fold.bedtools.out &
bedtools intersect  -a Chr3R.4fold.sites.pi.for.bedtools -b Chr3R.gff -wa -wb > Chr3R.4Fold.bedtools.out &
bedtools intersect  -a ChrX.0fold.sites.pi.for.bedtools -b ChrX.gff -wa -wb > ChrX.0Fold.bedtools.out &
bedtools intersect  -a ChrX.4fold.sites.pi.for.bedtools -b ChrX.gff -wa -wb > ChrX.4Fold.bedtools.out &

## Clean up output files so that they can be read into R
cat Chr2L.0Fold.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr2L.0fold.final &
cat Chr2L.4Fold.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr2L.4fold.final &
cat Chr2R.0Fold.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr2R.0fold.final &
cat Chr2R.4Fold.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr2R.4fold.final &
cat Chr3L.0Fold.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr3L.0fold.final &
cat Chr3L.4Fold.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr3L.4fold.final &
cat Chr3R.0Fold.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr3R.0fold.final &
cat Chr3R.4Fold.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr3R.4fold.final &
cat ChrX.0Fold.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > ChrX.0fold.final &
cat ChrX.4Fold.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > ChrX.4fold.final &

## Merge 4fold and 0fold files together
cat Chr2L.0fold.final Chr2R.0fold.final Chr3L.0fold.final Chr3R.0fold.final ChrX.0fold.final > diversity.0fold.sites &
cat Chr2L.4fold.final Chr2R.4fold.final Chr3L.4fold.final Chr3R.4fold.final ChrX.4fold.final > diversity.4fold.sites &

# Remove intermediate files
rm Chr*.*Fold.bedtools.out
rm *.for.bedtools
rm Chr*.gff

# ---- R CODE ----
rm(list=ls())
require(doBy)

# Read in nucleotide diversity data
diversity.0fold = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/diversity.0fold.sites", header = FALSE)
diversity.4fold = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/diversity.4fold.sites", header = FALSE)

# Filter out duplicate sites
diversity.4fold.unique = unique(diversity.4fold[,c("V1","V2","V3","V4")])
diversity.0fold.unique = unique(diversity.0fold[,c("V1","V2","V3","V4")])

# Fix geneID column
diversity.4fold.unique$V4 = substr(diversity.4fold.unique$V4, 8,18)
diversity.0fold.unique$V4 = substr(diversity.0fold.unique$V4, 8,18)

colnames(diversity.4fold.unique) = c("Chrom", "Site", "Spi", "geneID")
colnames(diversity.0fold.unique) = c("Chrom", "Site", "Npi", "geneID")

# Summarize mean nucleotide diversity per gene
diversity.4fold.per.gene = summaryBy(Spi ~ geneID, FUN = c(length, mean), data = diversity.4fold.unique)
diversity.0fold.per.gene = summaryBy(Npi ~ geneID, FUN = c(length, mean), data = diversity.0fold.unique)

# Also get data on the number of polymorphic sites per gene
# First remove any non-polymorphic site (i.e., Spi and Npi = 0)
polymorphic.4fold.unique = diversity.4fold.unique[diversity.4fold.unique$Spi != 0,]
polymorphic.0fold.unique = diversity.0fold.unique[diversity.0fold.unique$Npi != 0,]
Npolymorphic.4fold.per.gene = as.data.frame(table(polymorphic.4fold.unique$geneID))
Npolymorphic.0fold.per.gene = as.data.frame(table(polymorphic.0fold.unique$geneID))
colnames(Npolymorphic.4fold.per.gene) = c("geneID", "NumSynPoly")
colnames(Npolymorphic.0fold.per.gene) = c("geneID", "NumNonSynPoly")

# Merge back to data set diversity data
diversity.4fold.per.gene=merge(diversity.4fold.per.gene,Npolymorphic.4fold.per.gene, by="geneID", all = TRUE)
diversity.0fold.per.gene=merge(diversity.0fold.per.gene,Npolymorphic.0fold.per.gene, by="geneID", all = TRUE)
# Replace NAs with 0 (i.e., 0 polymoprhic sites in the gene)
diversity.4fold.per.gene$NumSynPoly[is.na(diversity.4fold.per.gene$NumSynPoly)] = 0
diversity.0fold.per.gene$NumNonSynPoly[is.na(diversity.0fold.per.gene$NumNonSynPoly)] = 0

# Merge datasets
nucleotide.diversity.per.gene = merge(diversity.4fold.per.gene,diversity.0fold.per.gene, by = "geneID")
colnames(nucleotide.diversity.per.gene) = c("geneID", "Total.Syn.sites","piS","N.Syn.Polymorphisms","Total.NS.sites","piN","N.NS.Polymorphisms")
# Calculate piN/piS
nucleotide.diversity.per.gene$piN.piS = nucleotide.diversity.per.gene$piN / nucleotide.diversity.per.gene$piS

write.table(nucleotide.diversity.per.gene, file = "/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/nucleotide.diversity.per.gene.Aug10.txt", quote = F, sep = "\t", col.name = T, row.name = F)

# ---- R CODE ----

##################################################################################################################
######    MAF FILTERED at 10%: Calculating Nucleotide Diversity in the DGRP and Assigning Sites to genes    ######
##################################################################################################################

cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2L.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.1 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4fold.maf.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2L.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.1 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0fold.maf.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2R.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.1 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4fold.maf.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2R.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.1 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0fold.maf.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3L.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.1 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4fold.maf.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3L.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.1 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0fold.maf.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3R.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.1 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4fold.maf.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3R.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.1 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0fold.maf.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.X.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.1 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4fold.maf.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.X.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.1 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0fold.maf.filtered &


## Intersect with GFF to identify genes that each site falls into
# This is probably a roundabout way to do this, but whatever
# Make separate GFF files for each chromosome arm, correctly formatted to intersect with a BED file that is 0based
grep '2L' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr2L.gff &
grep '2R' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr2R.gff &
grep '3L' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr3L.gff &
grep '3R' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr3R.gff &
grep 'X' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > ChrX.gff &

# Format the nucleotide diversity files
grep '2L' Chr2L.0fold.maf.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr2L.0fold.maf.filtered.sites.pi.for.bedtools &
grep '2L' Chr2L.4fold.maf.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr2L.4fold.maf.filtered.sites.pi.for.bedtools &
grep '2R' Chr2R.0fold.maf.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr2R.0fold.maf.filtered.sites.pi.for.bedtools &
grep '2R' Chr2R.4fold.maf.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr2R.4fold.maf.filtered.sites.pi.for.bedtools &
grep '3L' Chr3L.0fold.maf.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr3L.0fold.maf.filtered.sites.pi.for.bedtools &
grep '3L' Chr3L.4fold.maf.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr3L.4fold.maf.filtered.sites.pi.for.bedtools &
grep '3R' Chr3R.0fold.maf.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr3R.0fold.maf.filtered.sites.pi.for.bedtools &
grep '3R' Chr3R.4fold.maf.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > Chr3R.4fold.maf.filtered.sites.pi.for.bedtools &
grep 'X' ChrX.0fold.maf.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > ChrX.0fold.maf.filtered.sites.pi.for.bedtools &
grep 'X' ChrX.4fold.maf.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > ChrX.4fold.maf.filtered.sites.pi.for.bedtools &

## Intersect files with bedtools
bedtools intersect  -a Chr2L.0fold.maf.filtered.sites.pi.for.bedtools -b Chr2L.gff -wa -wb > Chr2L.0Fold.maf.filtered.bedtools.out &
bedtools intersect  -a Chr2L.4fold.maf.filtered.sites.pi.for.bedtools -b Chr2L.gff -wa -wb > Chr2L.4Fold.maf.filtered.bedtools.out &
bedtools intersect  -a Chr2R.0fold.maf.filtered.sites.pi.for.bedtools -b Chr2R.gff -wa -wb > Chr2R.0Fold.maf.filtered.bedtools.out &
bedtools intersect  -a Chr2R.4fold.maf.filtered.sites.pi.for.bedtools -b Chr2R.gff -wa -wb > Chr2R.4Fold.maf.filtered.bedtools.out &
bedtools intersect  -a Chr3L.0fold.maf.filtered.sites.pi.for.bedtools -b Chr3L.gff -wa -wb > Chr3L.0Fold.maf.filtered.bedtools.out &
bedtools intersect  -a Chr3L.4fold.maf.filtered.sites.pi.for.bedtools -b Chr3L.gff -wa -wb > Chr3L.4Fold.maf.filtered.bedtools.out &
bedtools intersect  -a Chr3R.0fold.maf.filtered.sites.pi.for.bedtools -b Chr3R.gff -wa -wb > Chr3R.0Fold.maf.filtered.bedtools.out &
bedtools intersect  -a Chr3R.4fold.maf.filtered.sites.pi.for.bedtools -b Chr3R.gff -wa -wb > Chr3R.4Fold.maf.filtered.bedtools.out &
bedtools intersect  -a ChrX.0fold.maf.filtered.sites.pi.for.bedtools -b ChrX.gff -wa -wb > ChrX.0Fold.maf.filtered.bedtools.out &
bedtools intersect  -a ChrX.4fold.maf.filtered.sites.pi.for.bedtools -b ChrX.gff -wa -wb > ChrX.4Fold.maf.filtered.bedtools.out &

## Clean up output files so that they can be read into R
cat Chr2L.0Fold.maf.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr2L.0fold.maf.filtered.final &
cat Chr2L.4Fold.maf.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr2L.4fold.maf.filtered.final &
cat Chr2R.0Fold.maf.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr2R.0fold.maf.filtered.final &
cat Chr2R.4Fold.maf.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr2R.4fold.maf.filtered.final &
cat Chr3L.0Fold.maf.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr3L.0fold.maf.filtered.final &
cat Chr3L.4Fold.maf.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr3L.4fold.maf.filtered.final &
cat Chr3R.0Fold.maf.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr3R.0fold.maf.filtered.final &
cat Chr3R.4Fold.maf.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > Chr3R.4fold.maf.filtered.final &
cat ChrX.0Fold.maf.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > ChrX.0fold.maf.filtered.final &
cat ChrX.4Fold.maf.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > ChrX.4fold.maf.filtered.final &

## Merge 4fold and 0fold files together
cat Chr2L.0fold.maf.filtered.final Chr2R.0fold.maf.filtered.final Chr3L.0fold.maf.filtered.final Chr3R.0fold.maf.filtered.final ChrX.0fold.maf.filtered.final > diversity.0fold.maf.filtered.sites &
cat Chr2L.4fold.maf.filtered.final Chr2R.4fold.maf.filtered.final Chr3L.4fold.maf.filtered.final Chr3R.4fold.maf.filtered.final ChrX.4fold.maf.filtered.final > diversity.4fold.maf.filtered.sites &

# Remove intermediate files
rm Chr*.*Fold.bedtools.out
rm *.for.bedtools
rm Chr*.gff

# ---- R CODE ----
rm(list=ls())
require(doBy)

# Read in nucleotide diversity data
diversity.0fold.maf.filtered = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/diversity.0fold.maf.filtered.sites", header = FALSE)
diversity.4fold.maf.filtered = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/diversity.4fold.maf.filtered.sites", header = FALSE)

# Filter out duplicate sites
diversity.4fold.unique = unique(diversity.4fold.maf.filtered[,c("V1","V2","V3","V4")])
diversity.0fold.unique = unique(diversity.0fold.maf.filtered[,c("V1","V2","V3","V4")])

# Fix geneID column
diversity.4fold.unique$V4 = substr(diversity.4fold.unique$V4, 8,18)
diversity.0fold.unique$V4 = substr(diversity.0fold.unique$V4, 8,18)

colnames(diversity.4fold.unique) = c("Chrom", "Site", "Spi", "geneID")
colnames(diversity.0fold.unique) = c("Chrom", "Site", "Npi", "geneID")

# Summarize mean nucleotide diversity per gene
diversity.4fold.per.gene = summaryBy(Spi ~ geneID, FUN = c(length, mean), data = diversity.4fold.unique)
diversity.0fold.per.gene = summaryBy(Npi ~ geneID, FUN = c(length, mean), data = diversity.0fold.unique)

# Also get data on the number of polymorphic sites per gene
# First remove any non-polymorphic site (i.e., Spi and Npi = 0)
polymorphic.4fold.unique = diversity.4fold.unique[diversity.4fold.unique$Spi != 0,]
polymorphic.0fold.unique = diversity.0fold.unique[diversity.0fold.unique$Npi != 0,]
Npolymorphic.4fold.per.gene = as.data.frame(table(polymorphic.4fold.unique$geneID))
Npolymorphic.0fold.per.gene = as.data.frame(table(polymorphic.0fold.unique$geneID))
colnames(Npolymorphic.4fold.per.gene) = c("geneID", "NumSynPoly")
colnames(Npolymorphic.0fold.per.gene) = c("geneID", "NumNonSynPoly")

# Merge back to data set diversity data
diversity.4fold.per.gene=merge(diversity.4fold.per.gene,Npolymorphic.4fold.per.gene, by="geneID", all = TRUE)
diversity.0fold.per.gene=merge(diversity.0fold.per.gene,Npolymorphic.0fold.per.gene, by="geneID", all = TRUE)
# Replace NAs with 0 (i.e., 0 polymoprhic sites in the gene)
diversity.4fold.per.gene$NumSynPoly[is.na(diversity.4fold.per.gene$NumSynPoly)] = 0
diversity.0fold.per.gene$NumNonSynPoly[is.na(diversity.0fold.per.gene$NumNonSynPoly)] = 0

# Merge datasets
nucleotide.diversity.per.gene = merge(diversity.4fold.per.gene,diversity.0fold.per.gene, by = "geneID")
colnames(nucleotide.diversity.per.gene) = c("geneID", "Total.Syn.sites","piS","N.Syn.Polymorphisms","Total.NS.sites","piN","N.NS.Polymorphisms")
# Calculate piN/piS
nucleotide.diversity.per.gene$piN.piS = nucleotide.diversity.per.gene$piN / nucleotide.diversity.per.gene$piS

write.table(nucleotide.diversity.per.gene, file = "/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/nucleotide.diversity.per.gene.MAF.filtered.Jul292021.txt", quote = F, sep = "\t", col.name = T, row.name = F)


##################################################################################################################
######    MAF FILTERED at 15%: Calculating Nucleotide Diversity in the DGRP and Assigning Sites to genes    ######
##################################################################################################################

cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2L.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.15 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4fold.maf.15.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2L.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.15 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0fold.maf.15.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2R.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.15 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4fold.maf.15.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2R.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.15 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0fold.maf.15.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3L.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.15 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4fold.maf.15.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3L.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.15 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0fold.maf.15.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3R.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.15 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4fold.maf.15.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3R.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.15 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0fold.maf.15.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.X.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.15 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4fold.maf.15.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.X.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.15 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0fold.maf.15.filtered &


## Intersect with GFF to identify genes that each site falls into
# This is probably a roundabout way to do this, but whatever
# Make separate GFF files for each chromosome arm, correctly formatted to intersect with a BED file that is 0based
grep '2L' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr2L.gff &
grep '2R' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr2R.gff &
grep '3L' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr3L.gff &
grep '3R' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr3R.gff &
grep 'X' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > ChrX.gff &

# Format the nucleotide diversity files
grep '2L' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0fold.maf.15.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0fold.maf.15.filtered.sites.pi.for.bedtools &
grep '2L' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4fold.maf.15.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4fold.maf.15.filtered.sites.pi.for.bedtools &
grep '2R' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0fold.maf.15.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0fold.maf.15.filtered.sites.pi.for.bedtools &
grep '2R' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4fold.maf.15.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4fold.maf.15.filtered.sites.pi.for.bedtools &
grep '3L' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0fold.maf.15.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0fold.maf.15.filtered.sites.pi.for.bedtools &
grep '3L' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4fold.maf.15.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4fold.maf.15.filtered.sites.pi.for.bedtools &
grep '3R' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0fold.maf.15.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0fold.maf.15.filtered.sites.pi.for.bedtools &
grep '3R' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4fold.maf.15.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4fold.maf.15.filtered.sites.pi.for.bedtools &
grep 'X' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0fold.maf.15.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0fold.maf.15.filtered.sites.pi.for.bedtools &
grep 'X' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4fold.maf.15.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4fold.maf.15.filtered.sites.pi.for.bedtools &

## Intersect files with bedtools
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0fold.maf.15.filtered.sites.pi.for.bedtools -b Chr2L.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0Fold.maf.15.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4fold.maf.15.filtered.sites.pi.for.bedtools -b Chr2L.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4Fold.maf.15.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0fold.maf.15.filtered.sites.pi.for.bedtools -b Chr2R.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0Fold.maf.15.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4fold.maf.15.filtered.sites.pi.for.bedtools -b Chr2R.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4Fold.maf.15.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0fold.maf.15.filtered.sites.pi.for.bedtools -b Chr3L.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0Fold.maf.15.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4fold.maf.15.filtered.sites.pi.for.bedtools -b Chr3L.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4Fold.maf.15.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0fold.maf.15.filtered.sites.pi.for.bedtools -b Chr3R.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0Fold.maf.15.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4fold.maf.15.filtered.sites.pi.for.bedtools -b Chr3R.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4Fold.maf.15.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0fold.maf.15.filtered.sites.pi.for.bedtools -b ChrX.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0Fold.maf.15.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4fold.maf.15.filtered.sites.pi.for.bedtools -b ChrX.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4Fold.maf.15.filtered.bedtools.out &

## Clean up output files so that they can be read into R
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0Fold.maf.15.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0fold.maf.15.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4Fold.maf.15.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4fold.maf.15.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0Fold.maf.15.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0fold.maf.15.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4Fold.maf.15.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4fold.maf.15.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0Fold.maf.15.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0fold.maf.15.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4Fold.maf.15.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4fold.maf.15.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0Fold.maf.15.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0fold.maf.15.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4Fold.maf.15.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4fold.maf.15.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0Fold.maf.15.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0fold.maf.15.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4Fold.maf.15.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4fold.maf.15.filtered.final &

## Merge 4fold and 0fold files together
cat Chr2L.0fold.maf.15.filtered.final Chr2R.0fold.maf.15.filtered.final Chr3L.0fold.maf.15.filtered.final Chr3R.0fold.maf.15.filtered.final ChrX.0fold.maf.15.filtered.final > diversity.0fold.maf.15.filtered.sites &
cat Chr2L.4fold.maf.15.filtered.final Chr2R.4fold.maf.15.filtered.final Chr3L.4fold.maf.15.filtered.final Chr3R.4fold.maf.15.filtered.final ChrX.4fold.maf.15.filtered.final > diversity.4fold.maf.15.filtered.sites &

# Remove intermediate files
rm Chr*.*Fold.bedtools.out
rm *.for.bedtools
rm Chr*.gff

# ---- R CODE ----
rm(list=ls())
require(doBy)

# Read in nucleotide diversity data
diversity.0fold.maf.filtered = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/diversity.0fold.maf.15.filtered.sites", header = FALSE)
diversity.4fold.maf.filtered = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/diversity.4fold.maf.15.filtered.sites", header = FALSE)

# Filter out duplicate sites
diversity.4fold.unique = unique(diversity.4fold.maf.filtered[,c("V1","V2","V3","V4")])
diversity.0fold.unique = unique(diversity.0fold.maf.filtered[,c("V1","V2","V3","V4")])

# Fix geneID column
diversity.4fold.unique$V4 = substr(diversity.4fold.unique$V4, 8,18)
diversity.0fold.unique$V4 = substr(diversity.0fold.unique$V4, 8,18)

colnames(diversity.4fold.unique) = c("Chrom", "Site", "Spi", "geneID")
colnames(diversity.0fold.unique) = c("Chrom", "Site", "Npi", "geneID")

# Summarize mean nucleotide diversity per gene
diversity.4fold.per.gene = summaryBy(Spi ~ geneID, FUN = c(length, mean), data = diversity.4fold.unique)
diversity.0fold.per.gene = summaryBy(Npi ~ geneID, FUN = c(length, mean), data = diversity.0fold.unique)

# Also get data on the number of polymorphic sites per gene
# First remove any non-polymorphic site (i.e., Spi and Npi = 0)
polymorphic.4fold.unique = diversity.4fold.unique[diversity.4fold.unique$Spi != 0,]
polymorphic.0fold.unique = diversity.0fold.unique[diversity.0fold.unique$Npi != 0,]
Npolymorphic.4fold.per.gene = as.data.frame(table(polymorphic.4fold.unique$geneID))
Npolymorphic.0fold.per.gene = as.data.frame(table(polymorphic.0fold.unique$geneID))
colnames(Npolymorphic.4fold.per.gene) = c("geneID", "NumSynPoly")
colnames(Npolymorphic.0fold.per.gene) = c("geneID", "NumNonSynPoly")

# Merge back to data set diversity data
diversity.4fold.per.gene=merge(diversity.4fold.per.gene,Npolymorphic.4fold.per.gene, by="geneID", all = TRUE)
diversity.0fold.per.gene=merge(diversity.0fold.per.gene,Npolymorphic.0fold.per.gene, by="geneID", all = TRUE)
# Replace NAs with 0 (i.e., 0 polymoprhic sites in the gene)
diversity.4fold.per.gene$NumSynPoly[is.na(diversity.4fold.per.gene$NumSynPoly)] = 0
diversity.0fold.per.gene$NumNonSynPoly[is.na(diversity.0fold.per.gene$NumNonSynPoly)] = 0

# Merge datasets
nucleotide.diversity.per.gene = merge(diversity.4fold.per.gene,diversity.0fold.per.gene, by = "geneID")
colnames(nucleotide.diversity.per.gene) = c("geneID", "Total.Syn.sites","piS","N.Syn.Polymorphisms","Total.NS.sites","piN","N.NS.Polymorphisms")
# Calculate piN/piS
nucleotide.diversity.per.gene$piN.piS = nucleotide.diversity.per.gene$piN / nucleotide.diversity.per.gene$piS

write.table(nucleotide.diversity.per.gene, file = "/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/nucleotide.diversity.per.gene.MAF.filtered.15perct.Sept92021.txt", quote = F, sep = "\t", col.name = T, row.name = F)


###################################################################################################################
######    MAF FILTERED at 2.5%: Calculating Nucleotide Diversity in the DGRP and Assigning Sites to genes    ######
###################################################################################################################

cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2L.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.02 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4fold.maf.02.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2L.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.02 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0fold.maf.02.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2R.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.02 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4fold.maf.02.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.2R.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.02 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0fold.maf.02.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3L.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.02 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4fold.maf.02.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3L.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.02 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0fold.maf.02.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3R.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.02 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4fold.maf.02.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.3R.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.02 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0fold.maf.02.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.X.4fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.02 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4fold.maf.02.filtered &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/chr.X.0fold_modified.vcf | vcftools --vcf - --site-pi --maf 0.02 --out  /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0fold.maf.02.filtered &


## Intersect with GFF to identify genes that each site falls into
# This is probably a roundabout way to do this, but whatever
# Make separate GFF files for each chromosome arm, correctly formatted to intersect with a BED file that is 0based
grep '2L' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr2L.gff &
grep '2R' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr2R.gff &
grep '3L' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr3L.gff &
grep '3R' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > Chr3R.gff &
grep 'X' ../Drosophila_melanogaster.BDGP6.28.99.chr.gtf | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2, $3, $4-1, $5,$6,$7,$8,$9}' > ChrX.gff &

# Format the nucleotide diversity files
grep '2L' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0fold.maf.02.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0fold.maf.02.filtered.sites.pi.for.bedtools &
grep '2L' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4fold.maf.02.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4fold.maf.02.filtered.sites.pi.for.bedtools &
grep '2R' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0fold.maf.02.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0fold.maf.02.filtered.sites.pi.for.bedtools &
grep '2R' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4fold.maf.02.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4fold.maf.02.filtered.sites.pi.for.bedtools &
grep '3L' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0fold.maf.02.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0fold.maf.02.filtered.sites.pi.for.bedtools &
grep '3L' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4fold.maf.02.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4fold.maf.02.filtered.sites.pi.for.bedtools &
grep '3R' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0fold.maf.02.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0fold.maf.02.filtered.sites.pi.for.bedtools &
grep '3R' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4fold.maf.02.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4fold.maf.02.filtered.sites.pi.for.bedtools &
grep 'X' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0fold.maf.02.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0fold.maf.02.filtered.sites.pi.for.bedtools &
grep 'X' /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4fold.maf.02.filtered.sites.pi | awk 'BEGIN {OFS =FS="\t"} {print "chr" $1, $2-1, $2, $3}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4fold.maf.02.filtered.sites.pi.for.bedtools &

## Intersect files with bedtools
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0fold.maf.02.filtered.sites.pi.for.bedtools -b Chr2L.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0Fold.maf.02.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4fold.maf.02.filtered.sites.pi.for.bedtools -b Chr2L.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4Fold.maf.02.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0fold.maf.02.filtered.sites.pi.for.bedtools -b Chr2R.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0Fold.maf.02.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4fold.maf.02.filtered.sites.pi.for.bedtools -b Chr2R.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4Fold.maf.02.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0fold.maf.02.filtered.sites.pi.for.bedtools -b Chr3L.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0Fold.maf.02.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4fold.maf.02.filtered.sites.pi.for.bedtools -b Chr3L.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4Fold.maf.02.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0fold.maf.02.filtered.sites.pi.for.bedtools -b Chr3R.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0Fold.maf.02.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4fold.maf.02.filtered.sites.pi.for.bedtools -b Chr3R.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4Fold.maf.02.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0fold.maf.02.filtered.sites.pi.for.bedtools -b ChrX.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0Fold.maf.02.filtered.bedtools.out &
bedtools intersect  -a /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4fold.maf.02.filtered.sites.pi.for.bedtools -b ChrX.gff -wa -wb > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4Fold.maf.02.filtered.bedtools.out &

## Clean up output files so that they can be read into R
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0Fold.maf.02.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.0fold.maf.02.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4Fold.maf.02.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2L.4fold.maf.02.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0Fold.maf.02.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.0fold.maf.02.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4Fold.maf.02.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr2R.4fold.maf.02.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0Fold.maf.02.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.0fold.maf.02.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4Fold.maf.02.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3L.4fold.maf.02.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0Fold.maf.02.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.0fold.maf.02.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4Fold.maf.02.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/Chr3R.4fold.maf.02.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0Fold.maf.02.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.0fold.maf.02.filtered.final &
cat /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4Fold.maf.02.filtered.bedtools.out | sed 's/;/\t/g' | sed 's/ //g' | awk '{OFS = FS = "\t"} {print $1, $3, $4, $13}' > /plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/ChrX.4fold.maf.02.filtered.final &

## Merge 4fold and 0fold files together
cat Chr2L.0fold.maf.02.filtered.final Chr2R.0fold.maf.02.filtered.final Chr3L.0fold.maf.02.filtered.final Chr3R.0fold.maf.02.filtered.final ChrX.0fold.maf.02.filtered.final > diversity.0fold.maf.02.filtered.sites &
cat Chr2L.4fold.maf.02.filtered.final Chr2R.4fold.maf.02.filtered.final Chr3L.4fold.maf.02.filtered.final Chr3R.4fold.maf.02.filtered.final ChrX.4fold.maf.02.filtered.final > diversity.4fold.maf.02.filtered.sites &

# Remove intermediate files
rm Chr*.*Fold.bedtools.out
rm *.for.bedtools
rm Chr*.gff

# ---- R CODE ----
rm(list=ls())
require(doBy)

# Read in nucleotide diversity data
diversity.0fold.maf.filtered = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/diversity.0fold.maf.02.filtered.sites", header = FALSE)
diversity.4fold.maf.filtered = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/diversity.4fold.maf.02.filtered.sites", header = FALSE)

# Filter out duplicate sites
diversity.4fold.unique = unique(diversity.4fold.maf.filtered[,c("V1","V2","V3","V4")])
diversity.0fold.unique = unique(diversity.0fold.maf.filtered[,c("V1","V2","V3","V4")])

# Fix geneID column
diversity.4fold.unique$V4 = substr(diversity.4fold.unique$V4, 8,18)
diversity.0fold.unique$V4 = substr(diversity.0fold.unique$V4, 8,18)

colnames(diversity.4fold.unique) = c("Chrom", "Site", "Spi", "geneID")
colnames(diversity.0fold.unique) = c("Chrom", "Site", "Npi", "geneID")

# Summarize mean nucleotide diversity per gene
diversity.4fold.per.gene = summaryBy(Spi ~ geneID, FUN = c(length, mean), data = diversity.4fold.unique)
diversity.0fold.per.gene = summaryBy(Npi ~ geneID, FUN = c(length, mean), data = diversity.0fold.unique)

# Also get data on the number of polymorphic sites per gene
# First remove any non-polymorphic site (i.e., Spi and Npi = 0)
polymorphic.4fold.unique = diversity.4fold.unique[diversity.4fold.unique$Spi != 0,]
polymorphic.0fold.unique = diversity.0fold.unique[diversity.0fold.unique$Npi != 0,]
Npolymorphic.4fold.per.gene = as.data.frame(table(polymorphic.4fold.unique$geneID))
Npolymorphic.0fold.per.gene = as.data.frame(table(polymorphic.0fold.unique$geneID))
colnames(Npolymorphic.4fold.per.gene) = c("geneID", "NumSynPoly")
colnames(Npolymorphic.0fold.per.gene) = c("geneID", "NumNonSynPoly")

# Merge back to data set diversity data
diversity.4fold.per.gene=merge(diversity.4fold.per.gene,Npolymorphic.4fold.per.gene, by="geneID", all = TRUE)
diversity.0fold.per.gene=merge(diversity.0fold.per.gene,Npolymorphic.0fold.per.gene, by="geneID", all = TRUE)
# Replace NAs with 0 (i.e., 0 polymoprhic sites in the gene)
diversity.4fold.per.gene$NumSynPoly[is.na(diversity.4fold.per.gene$NumSynPoly)] = 0
diversity.0fold.per.gene$NumNonSynPoly[is.na(diversity.0fold.per.gene$NumNonSynPoly)] = 0

# Merge datasets
nucleotide.diversity.per.gene = merge(diversity.4fold.per.gene,diversity.0fold.per.gene, by = "geneID")
colnames(nucleotide.diversity.per.gene) = c("geneID", "Total.Syn.sites","piS","N.Syn.Polymorphisms","Total.NS.sites","piN","N.NS.Polymorphisms")
# Calculate piN/piS
nucleotide.diversity.per.gene$piN.piS = nucleotide.diversity.per.gene$piN / nucleotide.diversity.per.gene$piS

write.table(nucleotide.diversity.per.gene, file = "/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/MAF_Filtered/nucleotide.diversity.per.gene.MAF.filtered.02perct.Sept242021.txt", quote = F, sep = "\t", col.name = T, row.name = F)


#######################################################################################################################################
######    Calculating Synonymous and Nonsynonymous Nucleotide Diversity in the DGRP at DEU Significant and Nonsignificant Genes  ######
#######################################################################################################################################

###### There are three analyses I did here. First, was ignoring differential gene expression while the second parses piN/piS by sex-bias in gene expression
######  The third was parsing out by both sex-bias in gene expression and by sex-averaged gene expression

## Parsing out by sex-averaged gene expression
#---- R CODE -----
rm(list=ls())

# Required packages
require(doBy)
require(ggplot2)
require(dplyr)
require(permuco)

## Load in datasets
# Load in pi calculations
pi.output = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/4fold0fold.parsedVCFs/NucelotideDiversityFiles/nucleotide.diversity.per.gene.Aug10.txt", header = TRUE)
# Load in the Junctionseq outputs
junctionseq.results.body = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/BodyOutput/Aug1.Body.OnlyallGenes.results.txt", header = TRUE, sep = "\t")
junctionseq.results.head = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/HeadOutput/Aug1.Head.OnlyallGenes.results.txt", header = TRUE, sep = "\t")
# Load in differential gene expression data in the DGRP
expression.data.body = read.table("/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.body.txt", header = TRUE, sep = "\t")
expression.data.head = read.table("/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.head.txt", header = TRUE, sep = "\t")

## Clean up data files
# Remove sites where piS is 0
piNpiS.per.gene = pi.output[!(pi.output$piS == 0),]

# Remove any genes that were not tested
junctionseq.results.body = junctionseq.results.body[!(junctionseq.results.body$testable == FALSE),]
junctionseq.results.head = junctionseq.results.head[!(junctionseq.results.head$testable == FALSE),]
junctionseq.results.body = junctionseq.results.body[junctionseq.results.body$expr_male > 50 & junctionseq.results.body$expr_female > 50,]
junctionseq.results.head = junctionseq.results.head[junctionseq.results.head$expr_male > 50 & junctionseq.results.head$expr_female > 50,]
junctionseq.results.body = junctionseq.results.body[, c(2,25)]
junctionseq.results.head = junctionseq.results.head[, c(2,25)]
# Clean out unnecessary columns in gene expression data
expression.data.body = expression.data.body[,c(1:4)]
expression.data.head = expression.data.head[,c(1:4)]

## Assign significant genes from JunctionSeq output
# Assign significant hits
junctionseq.results.body$sig.hit = NA
junctionseq.results.body$sig.hit[junctionseq.results.body$geneWisePadj <= 0.01] = 1
junctionseq.results.body$sig.hit[!(junctionseq.results.body$geneWisePadj <= 0.01)] = 0

junctionseq.results.head$sig.hit = NA
junctionseq.results.head$sig.hit[junctionseq.results.head$geneWisePadj <= 0.01] = 1
junctionseq.results.head$sig.hit[!(junctionseq.results.head$geneWisePadj <= 0.01)] = 0

# Collapse duplicates in Junctionseq files
junctionseq.results.body.unique = junctionseq.results.body[!duplicated(junctionseq.results.body[c(1:3)]), ]
junctionseq.results.head.unique = junctionseq.results.head[!duplicated(junctionseq.results.head[c(1:3)]), ]

# Merge piN/piS (my data) data with junctionseq data and add a column for the ratio of piN/piS
body.pin.pis = merge(junctionseq.results.body.unique,piNpiS.per.gene, by.x = "geneID", by.y = "geneID", sort = FALSE)
head.pin.pis = merge(junctionseq.results.head.unique,piNpiS.per.gene, by.x = "geneID", by.y = "geneID", sort = FALSE)

# Merge piN/piS/JunctionSeq data with gene expression bias data
body.pin.pis = merge(body.pin.pis, expression.data.body, by.x = "geneID" , by.y = "FlyBaseID", sort = FALSE)
head.pin.pis = merge(head.pin.pis, expression.data.head, by.x = "geneID" , by.y = "FlyBaseID", sort = FALSE)

# Remove rows without NAs
body.pin.pis = body.pin.pis[!(is.na(body.pin.pis$log2FoldChange)), ]
head.pin.pis = head.pin.pis[!(is.na(head.pin.pis$log2FoldChange)), ]

# Filter out any sites with fewer than 30 Syn or non-syn sites
body.pin.pis = body.pin.pis[body.pin.pis$piS.sites >= 30, ]
head.pin.pis = head.pin.pis[head.pin.pis$piS.sites >= 30, ]

# Assign quantiles for sex-averaged mean expression
body.pin.pis = body.pin.pis %>% mutate(sex.averaged.expression.quantile = ntile(baseMean, 3))
head.pin.pis = head.pin.pis %>% mutate(sex.averaged.expression.quantile = ntile(baseMean, 3))

## Processing gene expression data
# Assign quantiles bins for male and female biased gene expression
male.biased.body = body.pin.pis[body.pin.pis$log2FoldChange > 0,]
female.biased.body = body.pin.pis[body.pin.pis$log2FoldChange < 0,]
male.biased.head = head.pin.pis[head.pin.pis$log2FoldChange > 0,]
female.biased.head = head.pin.pis[head.pin.pis$log2FoldChange < 0,]

# Assign quantiles for sex-averaged mean expression
#male.biased.body = male.biased.body %>% mutate(sex.averaged.expression.quantile = ntile(baseMean, 3))
#male.biased.head = male.biased.body %>% mutate(sex.averaged.expression.quantile = ntile(baseMean, 3))
#female.biased.body = female.biased.body %>% mutate(sex.averaged.expression.quantile = ntile(baseMean, 3))
#female.biased.head = female.biased.head %>% mutate(sex.averaged.expression.quantile = ntile(baseMean, 3))

# Assign quantile for both MBG and FBG within each sex-averaged expression quantile ## Careful in using this variable, it is only relevent when parsed by sex-averaged gene expression!
male.biased.body.lowexp = male.biased.body[male.biased.body$sex.averaged.expression.quantile == 1,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
male.biased.body.intermediateexp = male.biased.body[male.biased.body$sex.averaged.expression.quantile == 2,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
male.biased.body.highexp = male.biased.body[male.biased.body$sex.averaged.expression.quantile == 3,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
male.biased.head.lowexp = male.biased.head[male.biased.head$sex.averaged.expression.quantile == 1,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
male.biased.head.intermediateexp = male.biased.head[male.biased.head$sex.averaged.expression.quantile == 2,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
male.biased.head.highexp = male.biased.head[male.biased.head$sex.averaged.expression.quantile == 3,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))

female.biased.body.lowexp = female.biased.body[female.biased.body$sex.averaged.expression.quantile == 1,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.body.intermediateexp = female.biased.body[female.biased.body$sex.averaged.expression.quantile == 2,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.body.highexp = female.biased.body[female.biased.body$sex.averaged.expression.quantile == 3,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.head.lowexp = female.biased.head[female.biased.head$sex.averaged.expression.quantile == 1,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.head.intermediateexp = female.biased.head[female.biased.head$sex.averaged.expression.quantile == 2,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.head.highexp = female.biased.head[female.biased.head$sex.averaged.expression.quantile == 3,] %>% mutate(sex.averaged.log2FC.quantile = ntile(log2FoldChange, 3))

# For the male genes, lets add 3 to each quantile
male.biased.body.lowexp$sex.averaged.log2FC.quantile = male.biased.body.lowexp$sex.averaged.log2FC.quantile + 3
male.biased.body.intermediateexp$sex.averaged.log2FC.quantile = male.biased.body.intermediateexp$sex.averaged.log2FC.quantile + 3
male.biased.body.highexp$sex.averaged.log2FC.quantile = male.biased.body.highexp$sex.averaged.log2FC.quantile + 3
male.biased.head.lowexp$sex.averaged.log2FC.quantile = male.biased.head.lowexp$sex.averaged.log2FC.quantile + 3
male.biased.head.intermediateexp$sex.averaged.log2FC.quantile = male.biased.head.intermediateexp$sex.averaged.log2FC.quantile + 3
male.biased.head.highexp$sex.averaged.log2FC.quantile = male.biased.head.highexp$sex.averaged.log2FC.quantile + 3

# Combine back into male-biased and female-biased dataframes
male.biased.body = rbind(male.biased.body.lowexp, male.biased.body.intermediateexp,male.biased.body.highexp)
male.biased.head = rbind(male.biased.head.lowexp, male.biased.head.intermediateexp,male.biased.head.highexp)
female.biased.body = rbind(female.biased.body.lowexp, female.biased.body.intermediateexp,female.biased.body.highexp)
female.biased.head = rbind(female.biased.head.lowexp, female.biased.head.intermediateexp,female.biased.head.highexp)

# Assign quantile for both MBG and FBG overall
male.biased.body = male.biased.body %>% mutate(log2FC.quantile = ntile(log2FoldChange, 3))
male.biased.head = male.biased.head %>% mutate(log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.body = female.biased.body %>% mutate(log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.head = female.biased.head %>% mutate(log2FC.quantile = ntile(log2FoldChange, 3))

# For the male genes, lets add 3 to each quantile
male.biased.body$log2FC.quantile = male.biased.body$log2FC.quantile + 3
male.biased.head$log2FC.quantile = male.biased.head$log2FC.quantile + 3

# Merge data back
body.pin.pis = rbind(male.biased.body, female.biased.body)
head.pin.pis = rbind(male.biased.head, female.biased.head)
body.pin.pis$tissue = "body"
head.pin.pis$tissue = "head"

# Assign genes to predefined 'bins' of log2FC in gene expression
# Add upper and lower CIs for log2FC means
body.pin.pis$log2FC.upperCI = body.pin.pis$log2FoldChange + body.pin.pis$lfcSE * 2
body.pin.pis$log2FC.lowerCI = body.pin.pis$log2FoldChange - body.pin.pis$lfcSE * 2
head.pin.pis$log2FC.upperCI = head.pin.pis$log2FoldChange + head.pin.pis$lfcSE * 2
head.pin.pis$log2FC.lowerCI = head.pin.pis$log2FoldChange - head.pin.pis$lfcSE * 2

body.pin.pis$log2FC.bins[body.pin.pis$log2FC.upperCI < -2 ] = 1
body.pin.pis$log2FC.bins[body.pin.pis$log2FC.lowerCI >= -2 & body.pin.pis$log2FC.upperCI <= -0.5 ] = 2
body.pin.pis$log2FC.bins[body.pin.pis$log2FC.lowerCI > -0.5 & body.pin.pis$log2FC.upperCI < 0.5 ] = 3
body.pin.pis$log2FC.bins[body.pin.pis$log2FC.lowerCI >= 0.5 & body.pin.pis$log2FC.upperCI <= 2 ] = 4
body.pin.pis$log2FC.bins[body.pin.pis$log2FC.lowerCI > 2 ] = 5

head.pin.pis$log2FC.bins[head.pin.pis$log2FC.upperCI < -2 ] = 1
head.pin.pis$log2FC.bins[head.pin.pis$log2FC.lowerCI >= -2 & head.pin.pis$log2FC.upperCI <= -0.5 ] = 2
head.pin.pis$log2FC.bins[head.pin.pis$log2FC.lowerCI > -0.5 & head.pin.pis$log2FC.upperCI < 0.5 ] = 3
head.pin.pis$log2FC.bins[head.pin.pis$log2FC.lowerCI >= 0.5 & head.pin.pis$log2FC.upperCI <= 2 ] = 4
head.pin.pis$log2FC.bins[head.pin.pis$log2FC.lowerCI > 2 ] = 5

## Data frame for plotting
pin.pis = rbind(body.pin.pis,head.pin.pis)


###     Model Fitting     ###
# Fitting with lm()
pinpis.body.model = lm(piN.piS ~ baseMean + abs(log2FoldChange) + sig.hit, data = pin.pis[pin.pis$tissue == "body", ])

pinpis.body.model = lm(log(piN.piS) ~ baseMean + abs(log2FoldChange) + sig.hit, data = pin.pis[pin.pis$tissue == "body", ])
pinpis.head.model = lm(piN.piS ~ baseMean + abs(log2FoldChange) + sig.hit, data = pin.pis[pin.pis$tissue == "head", ])

pinpis.body.model.male.biased = lm(piN.piS ~ baseMean + abs(log2FoldChange) + sig.hit, data = pin.pis[pin.pis$tissue == "body" & pin.pis$log2FoldChange > 0, ])
pinpis.body.model.female.biased = lm(piN.piS ~ baseMean + log2FoldChange + sig.hit, data = pin.pis[pin.pis$tissue == "body" & pin.pis$log2FoldChange < 0, ])
pinpis.head.model.male.biased = lm(piN.piS ~ baseMean + abs(log2FoldChange) + sig.hit, data = pin.pis[pin.pis$tissue == "head" & pin.pis$log2FoldChange > 0, ])
pinpis.head.model.female.biased = lm(piN.piS ~ baseMean + log2FoldChange + sig.hit, data = pin.pis[pin.pis$tissue == "head" & pin.pis$log2FoldChange < 0, ])

# Model fitting with permuco
set.seed(1)
piNpiS.body.model = lmperm(log(piN.piS) ~ baseMean + abs(log2FoldChange) + sig.hit,  data = pin.pis[pin.pis$tissue == "body", ], np = 10000)
piNpiS.head.model = lmperm(log(piN.piS) ~ baseMean + abs(log2FoldChange) + sig.hit,  data = pin.pis[pin.pis$tissue == "head", ], np = 10000)

piNpiS.body.MB.model = lmperm(piN.piS ~ baseMean + abs(log2FoldChange) + sig.hit,  data = pin.pis[pin.pis$tissue == "body" & pin.pis$log2FoldChange > 0, ], np = 10000)
piNpiS.body.FB.model = lmperm(piN.piS ~ baseMean + abs(log2FoldChange) + sig.hit,  data = pin.pis[pin.pis$tissue == "body" & pin.pis$log2FoldChange < 0, ], np = 10000)
piNpiS.head.MB.model = lmperm(piN.piS ~ baseMean + abs(log2FoldChange) + sig.hit,  data = pin.pis[pin.pis$tissue == "head" & pin.pis$log2FoldChange > 0, ], np = 10000)
piNpiS.head.FB.model = lmperm(piN.piS ~ baseMean + abs(log2FoldChange) + sig.hit,  data = pin.pis[pin.pis$tissue == "head" & pin.pis$log2FoldChange < 0, ], np = 10000)

# Alternative method
# Lets first seperarte out all genes where piN/piS = 0
pin.pis.sub = pin.pis[pin.pis$piN.piS > 0,]

# Fit linear models on the log(piN/piS) with permuco
set.seed(1)
piNpiS.body.model = lmperm(log(piN.piS) ~ baseMean + abs(log2FoldChange) + sig.hit + abs(log2FoldChange)*sig.hit,  data = pin.pis.sub[pin.pis.sub$tissue == "body", ], np = 10000)
piNpiS.head.model = lmperm(log(piN.piS) ~ baseMean + abs(log2FoldChange) + sig.hit + abs(log2FoldChange)*sig.hit,  data = pin.pis.sub[pin.pis.sub$tissue == "head", ], np = 10000)
piNpiS.body.MB.model = lmperm(log(piN.piS) ~ baseMean + abs(log2FoldChange) + sig.hit + abs(log2FoldChange)*sig.hit,  data = pin.pis.sub[pin.pis.sub$tissue == "body" & pin.pis.sub$log2FoldChange > 0, ], np = 10000)
piNpiS.body.FB.model = lmperm(log(piN.piS) ~ baseMean + abs(log2FoldChange) + sig.hit + abs(log2FoldChange)*sig.hit,  data = pin.pis.sub[pin.pis.sub$tissue == "body" & pin.pis.sub$log2FoldChange < 0, ], np = 10000)
piNpiS.head.MB.model = lmperm(log(piN.piS) ~ baseMean + abs(log2FoldChange) + sig.hit + abs(log2FoldChange)*sig.hit,  data = pin.pis.sub[pin.pis.sub$tissue == "head" & pin.pis.sub$log2FoldChange > 0, ], np = 10000)
piNpiS.head.FB.model = lmperm(log(piN.piS) ~ baseMean + abs(log2FoldChange) + sig.hit + abs(log2FoldChange)*sig.hit,  data = pin.pis.sub[pin.pis.sub$tissue == "head" & pin.pis.sub$log2FoldChange < 0, ], np = 10000)

# Fit a logistic regression with the genes where piN/piS is 0 and those that are greater than 0
pin.pis$binary.trait[pin.pis$piN.piS == 0] = 0
pin.pis$binary.trait[pin.pis$piN.piS > 0] = 1
piNpiS.body.logistic.fit = glm(binary.trait ~ baseMean + abs(log2FoldChange) + sig.hit, data = pin.pis[pin.pis$tissue == "body", ], family = binomial)
piNpiS.head.logistic.fit = glm(binary.trait ~ baseMean + abs(log2FoldChange) + sig.hit, data = pin.pis[pin.pis$tissue == "head", ], family = binomial)



##################
##    Ploting   ##
##################

### First plot is averaging across both sex-bias in gene expression and sex-averaged gene expression
# Summarize true data
piNpiS.summary = summaryBy(piN.piS ~ sig.hit + tissue, FUN=c(median, length), data = pin.pis)
# Bootstrap means for each subset
# Data frame to hold resampled results
resample.data = as.data.frame(cbind(vector(mode="numeric", length = 10000 * nrow(piNpiS.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(piNpiS.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(piNpiS.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(piNpiS.summary))))

## Loop to resample piNpiS data

output.row.start = 1
output.row.end = 4

for (i in 1:10000){

resampled.df=rbind( sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body", ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body", ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body", ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body", ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head", ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head", ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head", ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head", ]), replace = TRUE))

# Output summary of resampled data to resample dataframe
resample.data[output.row.start:output.row.end, ] = summaryBy(piN.piS ~ sig.hit + tissue, FUN=c(median, length), data = resampled.df)
output.row.start = output.row.end  + 1
output.row.end = output.row.end + 4
print(i)
}
write.table(resample.data, file = "/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/piNpiS.resampled.overall.average.filtered.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")

resample.data = read.table("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/piNpiS.resampled.overall.average.filtered.txt", header = TRUE, sep = "\t")
# Rename columns of resampled data
colnames(resample.data) = c("sig.hit","tissue","piNpiS","Number.of.Genes")

piNpiS.data.summary = summaryBy(piNpiS ~ sig.hit + tissue, FUN = function(x) c(Median = mean(x), lower.ci = quantile(x, probs = 0.025), upper.ci=quantile(x, probs = 0.975)), data = resample.data)
colnames(piNpiS.data.summary)[4:5] = c("piNpiS.lowerCI","piNpiS.upperCI")

# Replace resample.data.summary "mean" with true observed mean
piNpiS.data.summary$piNpiS.Mean = piNpiS.summary$piN.piS.median

piNpiS.summary.plot = ggplot(piNpiS.data.summary, aes(y = piNpiS.Mean, x = as.factor(tissue), colour = as.factor(sig.hit))) +
                                      geom_point(aes(y = piNpiS.Mean, x = as.factor(tissue), colour = as.factor(sig.hit)),size = 10,
                                      position = position_dodge(width = 0.5)) + ylim(0.08, 0.12) +
                                      geom_errorbar(aes(ymin = piNpiS.lowerCI, ymax = piNpiS.upperCI, x = as.factor(tissue), colour=as.factor(sig.hit)),
                                      width = 0, position = position_dodge(width = 0.5)) +
                                      theme_bw()  + scale_colour_manual(values = c("#800080", "#65c86e")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none")

pdf("/plas1/amardeep.singh/tmp/piNpiS.summary.plot.filtered.sept9.pdf", height = 10, width = 5)
piNpiS.summary.plot
dev.off()


### 2A. Second plot is without parsing out by sex-bias in gene expression but not sex-averaged expression for SDIU and non-SDIU genes
#### Plotting by assessing piN/piS at genes showing DEU parsed by sex bias in gene expression


# Filter out any genes that aren't binned by log2FC in gene expression
pin.pis.plotting = pin.pis[!(is.na(pin.pis$log2FC.bins)),]

# Summarize true data
pin.pis.summary = summaryBy(piN.piS ~ log2FC.bins + sig.hit + tissue, FUN=c(median, length), data = pin.pis.plotting)

# Bootstrap means for each subset
# Data frame to hold resampled results
resample.data = as.data.frame(cbind(vector(mode="numeric", length = 10000 * nrow(pin.pis.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary))))

## Loop to resample piNpiS data

output.row.start = 1
output.row.end = 19

for (i in 1:10000){

resampled.df=rbind( sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 1, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 1, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 1, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 1, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 2, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 2, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 2, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 2, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 3, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 3, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 3, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 3, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 4, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 4, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 4, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 4, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 5, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 5, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 5, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 5, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 6, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 6, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 6, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 6, ]), replace = TRUE),

                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 1, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 1, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 1, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 1, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 2, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 2, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 2, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 2, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 3, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 3, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 3, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 3, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 4, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 4, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 4, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 4, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 5, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 5, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 5, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 5, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 6, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 1 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 6, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 6, ], nrow(pin.pis.plotting[pin.pis.plotting$sig.hit == 0 & pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 6, ]), replace = TRUE))

# Output summary of resampled data to resample dataframe
resample.data[output.row.start:output.row.end, ] = summaryBy(piN.piS ~ log2FC.bins + sig.hit + tissue, FUN=c(median, length), data = resampled.df)
output.row.start = output.row.end  + 1
output.row.end = output.row.end + 19
print(i)
}
write.table(resample.data, file = "/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/piNpiS.resampled.log2FC.bins.averaged.across.abs.gene.expression.filtered.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")

resample.data = read.table("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/piNpiS.resampled.log2FC.bins.averaged.across.abs.gene.expression.filtered.txt", header = TRUE, sep = "\t")
colnames(resample.data) = c("log2FC.bins","sig.hit","tissue","piNpiS","number.of.genes")

# Rename columns of resampled data
piNpiS.data.summary = summaryBy(piNpiS ~ log2FC.bins + sig.hit + tissue, FUN = function(x) c(Median = mean(x), lower.ci = quantile(x, probs = 0.025), upper.ci=quantile(x, probs = 0.975)), data = resample.data)

# Replace resample.data.summary "mean" with true observed mean
colnames(piNpiS.data.summary) = c("log2FC.bins","sig.hit","tissue","piNpiS.Median","piNpiS.lowerCI","piNpiS.upperCI")
piNpiS.data.summary$piNpiS.Median = pin.pis.summary$piN.piS.median


## Body/head piN/piS plot - Averaged across all levels of gene expression
piN_piS.expression.plot = ggplot(piNpiS.data.sub, aes(y = piNpiS.Median, x = as.factor(log2FC.bins), colour = as.factor(sig.hit))) +
                                      geom_point(aes(y = piNpiS.Median, x = as.factor(log2FC.bins), colour = as.factor(sig.hit)), size = 7,
                                      position = position_dodge(width = 0.5)) + ylim(0.00,0.19) +
                                      geom_errorbar(aes(ymin = piNpiS.lowerCI, ymax = piNpiS.upperCI, x = as.factor(log2FC.bins), colour=as.factor(sig.hit)),
                                      width = 0, position = position_dodge(width = 0.5)) +
                                      theme_bw()  + scale_colour_manual(values = c("#800080", "#65c86e")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none") +
                                      facet_grid(tissue ~., scales = "free")

pdf("/plas1/amardeep.singh/tmp/piNpiS.by.log2FC.expression.bins.subset.sept9.pdf", height = 10, width = 10)
piN_piS.expression.plot
dev.off()



### 2B. Second plot is parsing out by sex-bias in gene expression but not sex-averaged expression for all genes
#### Plotting by assessing piN/piS at genes showing DEU parsed by sex bias in gene expression

# Filter out any genes that aren't binned by log2FC in gene expression
pin.pis.plotting = pin.pis[!(is.na(pin.pis$log2FC.bins)),]

# Summarize true data
pin.pis.summary = summaryBy(piN.piS ~ log2FC.bins + tissue, FUN=c(median, length), data = pin.pis.plotting)

# Bootstrap means for each subset
# Data frame to hold resampled results
resample.data = as.data.frame(cbind(vector(mode="numeric", length = 10000 * nrow(pin.pis.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary))))

## Loop to resample piNpiS data

output.row.start = 1
output.row.end = 10

for (i in 1:10000){

resampled.df=rbind( sample_n(pin.pis.plotting[pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 1, ], nrow(pin.pis.plotting[pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 1, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 2, ], nrow(pin.pis.plotting[pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 2, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 3, ], nrow(pin.pis.plotting[pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 3, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 4, ], nrow(pin.pis.plotting[pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 4, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 5, ], nrow(pin.pis.plotting[pin.pis.plotting$tissue == "body" & pin.pis.plotting$log2FC.bins == 5, ]), replace = TRUE),

                    sample_n(pin.pis.plotting[pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 1, ], nrow(pin.pis.plotting[pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 1, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 2, ], nrow(pin.pis.plotting[pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 2, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 3, ], nrow(pin.pis.plotting[pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 3, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 4, ], nrow(pin.pis.plotting[pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 4, ]), replace = TRUE),
                    sample_n(pin.pis.plotting[pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 5, ], nrow(pin.pis.plotting[pin.pis.plotting$tissue == "head" & pin.pis.plotting$log2FC.bins == 5, ]), replace = TRUE))

# Output summary of resampled data to resample dataframe
resample.data[output.row.start:output.row.end, ] = summaryBy(piN.piS ~ log2FC.bins + tissue, FUN=c(median, length), data = resampled.df)
output.row.start = output.row.end  + 1
output.row.end = output.row.end + 10
print(i)
}
colnames(resample.data) = c("log2FC.bins","tissue","piNpiS","number.of.genes")
write.table(resample.data, file = "/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/piNpiS.resampled.log2FC.bins.averaged.across.abs.gene.expression.filtered.no.SDIU.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")

resample.data = read.table("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/piNpiS.resampled.log2FC.bins.averaged.across.abs.gene.expression.filtered.no.SDIU.txt", header = TRUE, sep = "\t")
colnames(resample.data) = c("log2FC.bins","tissue","piNpiS","number.of.genes")

# Rename columns of resampled data
piNpiS.data.summary = summaryBy(piNpiS ~ log2FC.bins + tissue, FUN = function(x) c(Median = mean(x), lower.ci = quantile(x, probs = 0.025), upper.ci=quantile(x, probs = 0.975)), data = resample.data)

# Replace resample.data.summary "mean" with true observed mean
colnames(piNpiS.data.summary) = c("log2FC.bins","tissue","piNpiS.Median","piNpiS.lowerCI","piNpiS.upperCI")
piNpiS.data.summary$piNpiS.Median = pin.pis.summary$piN.piS.median
piNpiS.data.summary$sexbias[piNpiS.data.summary$log2FC.bins == 1 & piNpiS.data.summary$tissue == "body"] = "FB"
piNpiS.data.summary$sexbias[piNpiS.data.summary$log2FC.bins == 1 & piNpiS.data.summary$tissue == "head"] = "FB.1"
piNpiS.data.summary$sexbias[piNpiS.data.summary$log2FC.bins == 2] = "FB"
piNpiS.data.summary$sexbias[piNpiS.data.summary$log2FC.bins == 3] = "UB"
piNpiS.data.summary$sexbias[piNpiS.data.summary$log2FC.bins == 4] = "MB"
piNpiS.data.summary$sexbias[piNpiS.data.summary$log2FC.bins == 5 & piNpiS.data.summary$tissue == "body"] = "MB"
piNpiS.data.summary$sexbias[piNpiS.data.summary$log2FC.bins == 5 & piNpiS.data.summary$tissue == "head"] = "MB.1"

# Colours: darkred: #b30000; light red: #e09999; Dark Blue: #0000b3; light blue: #9999e0

## Body/head piN/piS plot - Averaged across all levels of gene expression
piN_piS.expression.plot = ggplot(piNpiS.data.summary, aes(y = piNpiS.Median, x = as.factor(log2FC.bins), colour = as.factor(sexbias))) +
                                      geom_point(aes(y = piNpiS.Median, x = as.factor(log2FC.bins), colour = as.factor(sexbias)), size = 7,
                                      position = position_dodge(width = 0.5)) +# ylim(0.00,0.3) +
                                      geom_errorbar(aes(ymin = piNpiS.lowerCI, ymax = piNpiS.upperCI, x = as.factor(log2FC.bins), colour=as.factor(sexbias)),
                                      width = 0, position = position_dodge(width = 0.5)) +
                                      #theme_bw()  + scale_colour_manual(values = c("#b30000","#e09999", "#0000b3","#9999e0", "#000000")) +
                                      theme_bw()  + scale_colour_manual(values = c("#b30000", "#0000b3", "#000000")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none") +
                                      facet_grid(tissue ~., scales = "free")

pdf("/plas1/amardeep.singh/tmp/piNpiS.by.log2FC.expression.bins.nosdiu.sept15.pdf", height = 10, width = 10)
piN_piS.expression.plot
dev.off()



### 3A. Third plot is parsing out by sex-averaged gene expression over all sex-bias in gene expression levels split by SDIU and non-SDIU genes
#### Plotting by assessing piN/piS at genes showing DEU parsed by sex bias in gene expression

# Summarize true data
pin.pis.summary = summaryBy(piN.piS ~ sex.averaged.expression.quantile + sig.hit + tissue, FUN=c(median, length), data = pin.pis)

# Bootstrap means for each subset
# Data frame to hold resampled results
resample.data = as.data.frame(cbind(vector(mode="numeric", length = 10000 * nrow(pin.pis.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary))))

## Loop to resample piNpiS data

output.row.start = 1
output.row.end = 12

for (i in 1:10000){

resampled.df=rbind( sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),

                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE))

# Output summary of resampled data to resample dataframe
resample.data[output.row.start:output.row.end, ] = summaryBy(piN.piS ~ sex.averaged.expression.quantile + sig.hit + tissue, FUN=c(median, length), data = resampled.df)
output.row.start = output.row.end  + 1
output.row.end = output.row.end + 12
print(i)
}
write.table(resample.data, file = "/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/piNpiS.resampled.parsed.by.abs.gene.expression.filtered.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")

resample.data = read.table("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/piNpiS.resampled.parsed.by.abs.gene.expression.filtered.txt", header = TRUE, sep = "\t")
colnames(resample.data) = c("sex.averaged.expression.quantile","sig.hit","tissue","piNpiS","number.of.genes")

# Rename columns of resampled data
piNpiS.data.summary = summaryBy(piNpiS ~ sex.averaged.expression.quantile + sig.hit + tissue, FUN = function(x) c(Median = mean(x), lower.ci = quantile(x, probs = 0.025), upper.ci=quantile(x, probs = 0.975)), data = resample.data)

# Replace resample.data.summary "mean" with true observed mean
colnames(piNpiS.data.summary) = c("average.expression","sig.hit","tissue","piNpiS.Median","piNpiS.lowerCI","piNpiS.upperCI")
piNpiS.data.summary$piNpiS.Median = pin.pis.summary$piN.piS.median


## Body/head piN/piS plot - Averaged across all levels of gene expression
piN_piS.expression.plot = ggplot(piNpiS.data.summary, aes(y = piNpiS.Median, x = as.factor(average.expression), colour = as.factor(sig.hit))) +
                                      geom_point(aes(y = piNpiS.Median, x = as.factor(average.expression), colour = as.factor(sig.hit)), size = 10,
                                      position = position_dodge(width = 0.5)) + ylim(0.05,0.16) +
                                      geom_errorbar(aes(ymin = piNpiS.lowerCI, ymax = piNpiS.upperCI, x = as.factor(average.expression), colour=as.factor(sig.hit)),
                                      width = 0, position = position_dodge(width = 0.5)) +
                                      theme_bw()  + scale_colour_manual(values = c("#800080", "#65c86e")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none") +
                                      facet_grid(tissue ~. )

pdf("/plas1/amardeep.singh/tmp/piNpiS.by.average.expression.filtered.sept9.pdf", height = 10, width = 10)
piN_piS.expression.plot
dev.off()


### 3B. Third plot is without parsing out by sex-averaged gene expression over all sex-bias in gene expression levels across all genes
#### Plotting by assessing piN/piS at genes showing DEU parsed by sex bias in gene expression

# Summarize true data
pin.pis.summary = summaryBy(piN.piS ~ sex.averaged.expression.quantile + tissue, FUN=c(median, length), data = pin.pis)

# Bootstrap means for each subset
# Data frame to hold resampled results
resample.data = as.data.frame(cbind(vector(mode="numeric", length = 10000 * nrow(pin.pis.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary))))

## Loop to resample piNpiS data

output.row.start = 1
output.row.end = 6

for (i in 1:10000){

resampled.df=rbind( sample_n(pin.pis[pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$tissue == "body" & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$tissue == "head" & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE))

# Output summary of resampled data to resample dataframe
resample.data[output.row.start:output.row.end, ] = summaryBy(piN.piS ~ sex.averaged.expression.quantile + tissue, FUN=c(median, length), data = resampled.df)
output.row.start = output.row.end  + 1
output.row.end = output.row.end + 6
print(i)
}
colnames(resample.data) = c("sex.averaged.expression.quantile","tissue","piNpiS","number.of.genes")
write.table(resample.data, file = "/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/piNpiS.resampled.parsed.by.abs.gene.expression.filtered.no.SDIU.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")

resample.data = read.table("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/piNpiS.resampled.parsed.by.abs.gene.expression.filtered.no.SDIU.txt", header = TRUE, sep = "\t")
colnames(resample.data) = c("sex.averaged.expression.quantile","tissue","piNpiS","number.of.genes")

# Rename columns of resampled data
piNpiS.data.summary = summaryBy(piNpiS ~ sex.averaged.expression.quantile + tissue, FUN = function(x) c(Median = mean(x), lower.ci = quantile(x, probs = 0.025), upper.ci=quantile(x, probs = 0.975)), data = resample.data)

# Replace resample.data.summary "mean" with true observed mean
colnames(piNpiS.data.summary) = c("average.expression","tissue","piNpiS.Median","piNpiS.lowerCI","piNpiS.upperCI")
piNpiS.data.summary$piNpiS.Median = pin.pis.summary$piN.piS.median

## Body/head piN/piS plot - Averaged across all levels of gene expression
piN_piS.expression.plot = ggplot(piNpiS.data.summary, aes(y = piNpiS.Median, x = as.factor(average.expression))) +
                                      geom_point(aes(y = piNpiS.Median, x = as.factor(average.expression)), size = 10,
                                      position = position_dodge(width = 0.5)) + ylim(0.07,0.12) +
                                      geom_errorbar(aes(ymin = piNpiS.lowerCI, ymax = piNpiS.upperCI, x = as.factor(average.expression)),
                                      width = 0, position = position_dodge(width = 0.5)) +
                                      theme_bw()  + scale_colour_manual(values = c("#000000")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none") +
                                      facet_grid(tissue ~. )

pdf("/plas1/amardeep.singh/tmp/piNpiS.by.average.expression.filtered.noSDIU.sept15.pdf", height = 10, width = 10)
piN_piS.expression.plot
dev.off()


### Plotting piN/piS against sex-bias in gene expression for three levels of sex-averaged gene expression

# Summarize true data
pin.pis.summary.by.abs.expression = summaryBy(piN.piS ~  sex.averaged.expression.quantile + sex.averaged.log2FC.quantile + sig.hit + tissue, FUN=c(median, length), data = pin.pis)


# Bootstrap means for each subset
# Data frame to hold resampled results
resample.data = as.data.frame(cbind(vector(mode="numeric", length = 10000 * nrow(pin.pis.summary.by.abs.expression)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary.by.abs.expression)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary.by.abs.expression)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary.by.abs.expression)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary.by.abs.expression)),
                                    vector(mode="numeric", length = 10000 * nrow(pin.pis.summary.by.abs.expression))))

## Loop to resample piNpiS data

output.row.start = 1
output.row.end = 72

for (i in 1:10000){

resample.data.by.abs.expression=rbind( sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),

                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),

                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "body" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),

                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 1, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 1, ]), replace = TRUE),

                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 2, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 2, ]), replace = TRUE),

                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 1 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 2 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 3 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 4 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 5 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 1 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE),
                    sample_n(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 3, ], nrow(pin.pis[pin.pis$sig.hit == 0 & pin.pis$tissue == "head" & pin.pis$sex.averaged.log2FC.quantile == 6 & pin.pis$sex.averaged.expression.quantile == 3, ]), replace = TRUE))

# Output summary of resampled data to resample dataframe
resample.data[output.row.start:output.row.end, ] = summaryBy(piN.piS ~ sex.averaged.expression.quantile + sex.averaged.log2FC.quantile + sig.hit + tissue, FUN=c(median, length), data = resample.data.by.abs.expression)
output.row.start = output.row.end  + 1
output.row.end = output.row.end + 72
print(i)
}
colnames(resample.data) = c("sex.averaged.expression.quantile", "sex.averagedlog2FC.quantile","sig.hit","tissue","piNpiS.median","number.of.genes")
write.table(resample.data, file = "/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/piNpiS.parsed.by.abs.expression.txt.filtered", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")

resample.data = read.table("/plas1/amardeep.singh/RNA.Seq.Data/piNpiS.Analysis/piNpiS.parsed.by.abs.expression.txt.filtered", header = TRUE, sep = "\t")

# Rename columns of resampled data
piNpiS.data.summary.by.abs.expression = summaryBy(piNpiS.median ~ sex.averaged.expression.quantile + sex.averagedlog2FC.quantile + sig.hit + tissue, FUN = function(x) c(Median = median(x), lower.ci = quantile(x, probs = 0.025), upper.ci=quantile(x, probs = 0.975)), data = resample.data)

# Replace resample.data.summary "mean" with true observed mean
colnames(piNpiS.data.summary.by.abs.expression) = c("sex.averaged.expression.quantile", "sex.averagedlog2FC.quantile", "sig.hit", "tissue", "piNpiS.Median","piNpiS.lowerCI","piNpiS.upperCI")
piNpiS.data.summary.by.abs.expression$piNpiS.Median = pin.pis.summary.by.abs.expression$piN.piS.median


## Plotting
## Body/head piN/piS plot -- Seperated by absolute gene expression (i.e., averaged across the sexes)
piN_piS.expression.plot = ggplot(piNpiS.data.summary.by.abs.expression, aes(y = piNpiS.Median, x = as.factor(sex.averagedlog2FC.quantile), colour = as.factor(sig.hit))) +
                                      geom_point(aes(y = piNpiS.Median, x = as.factor(sex.averagedlog2FC.quantile), colour = as.factor(sig.hit)),size = 5,
                                      position = position_dodge(width = 0.5)) + #scale_y_continuous(limits = c(-0.1, 0.1)) +
                                      geom_errorbar(aes(ymin = piNpiS.lowerCI, ymax = piNpiS.upperCI, x = as.factor(sex.averagedlog2FC.quantile), colour=as.factor(sig.hit)),
                                      width = 0, position = position_dodge(width = 0.5)) +
                                      theme_bw()  + scale_colour_manual(values = c("#7294D4", "#5B1A18")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none") +
                                      facet_grid(tissue ~ as.factor(sex.averaged.expression.quantile), scale = "free")

pdf("/plas1/amardeep.singh/tmp/piNpiS.by.log2FC.expression.by.abs.expression.filtered.sept8.pdf", width = 10, height = 10)
piN_piS.expression.plot
dev.off()










#
