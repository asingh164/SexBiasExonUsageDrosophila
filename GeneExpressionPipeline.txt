#
################################################################
######              Gene Expression Pipeline               #####
################################################################

## Author: Amardeep Singh -- amardeep.singh[at]utoronto.ca
## This program makes use of SAM files that I created separately see: STAR.Alignment.Pipeline.sh

### Script Details ###
# This script is written primarily in R, Bash commands are denoted by #---- BASH ---- and end with # ---- ----
# This script is meant to determine differential gene expression between the sexes

##
# Path to sam files: /plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/RAL.mapped.files.to.ensembl/bam.files/samtools.sort.out
# PAth to gtf /plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/gtf/Drosophila_melanogaster.BDGP6.28.99.gtf.gz

# ---- R Script ----

###### Whole Body Tissue   ######

#####################################################################
###     Creating count matrices of each aligned transcriptome     ###
#####################################################################
require("GenomicFeatures")
require("Rsamtools")
require("GenomicAlignments")
require("DESeq2")


#############################
###   GENOMIC FEATURES    ###
#############################
# Read in gene model from GFF file
gtf.TxDb = makeTxDbFromGFF("/plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/gtf/Drosophila_melanogaster.BDGP6.28.99.gtf.gz", format="gtf")

# Creates a list of exons grouped by gene
exonsByGene = exonsBy(gtf.TxDb, by="gene")

# Specify BAM files to be used for generating read count matrix
bam_files.body = list.files("/plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/RAL.mapped.files.to.ensembl/bam.files/samtools.sort.out/OnlyBodySamples", pattern="SAM.sorted.trimmed.RAL", full=TRUE)
bam_files.head = list.files("/plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/RAL.mapped.files.to.ensembl/bam.files/samtools.sort.out/OnlyHeadSamples", pattern="SAM.sorted.trimmed.RAL", full=TRUE)

# Indicate that bamLst are BAM files
bamLst.body = BamFileList(bam_files.body, yieldSize=100000)
bamLst.head = BamFileList(bam_files.head, yieldSize=100000)

###############################
###   GENOMIC ALIGNMENTS    ###
###############################
# Call sumarizeOvarlaps to count reads and produce sum_exp which gets inputted into DESeq2
sum_exp.body <- summarizeOverlaps(exonsByGene, bamLst.body, mode="Union", singleEnd=TRUE, ignore.strand=TRUE)
sum_exp.head <- summarizeOverlaps(exonsByGene, bamLst.head, mode="Union", singleEnd=TRUE, ignore.strand=TRUE)

############################################
###      Prepping files for DESEQ2       ###
############################################
# Differential gene expression analysis pipeline
# Provide metadata about the individuals found the count matrix
# (each column of matrix = individual, each row of RNA_Data = info about individual)
# Making sure order of individuals in RNA Data and in summarized experiment match

# Make a condition table
# Body
condition.table.body = as.data.frame(factor(colnames(sum_exp.body)))
colnames(condition.table.body) = "SampleName"
condition.table.body$condition = factor(rep(c("female", "male"), 18))
condition.table.body$condition = as.factor(condition.table.body$condition)
#condition.table = as.data.frame(condition.table)
colData(sum_exp.body) = DataFrame(condition.table.body)

# Body
condition.table.head = as.data.frame(factor(colnames(sum_exp.head)))
colnames(condition.table.head) = "SampleName"
condition.table.head$condition = factor(rep(c("female", "male"), 18))
condition.table.head$condition = as.factor(condition.table.head$condition)
#condition.table = as.data.frame(condition.table)
colData(sum_exp.head) = DataFrame(condition.table.head)

###########################################
###     Running the DESeq2 pipeline     ###
###########################################

# build the DESeqDataSet from a SummarizedExperiment

# Whole Body
dds_interaction.body = DESeqDataSet(sum_exp.body, design = ~ condition)
#run DESeq2
dds_interaction.body = DESeq(dds_interaction.body)
#name results
all_genes_interaction.body = results(dds_interaction.body, contrast=c("condition", "male", "female")) # This specifies the output such that the log2FC is male/female
all_genes_interaction.alt.body = results(dds_interaction.body)

# Head
dds_interaction.head = DESeqDataSet(sum_exp.head, design = ~ condition)
#run DESeq2
dds_interaction.head = DESeq(dds_interaction.head)
#name results
all_genes_interaction.head = results(dds_interaction.head, contrast=c("condition", "male", "female")) # This specifies the output such that the log2FC is male/female
all_genes_interaction.alt.head = results(dds_interaction.head)

# Add FlyBase ID as first column
all_genes_interaction.head$FlyBaseID= rownames(all_genes_interaction.head)
all_genes_interaction.head = all_genes_interaction.head[,c(7,1:6)]
all_genes_interaction.body$FlyBaseID= rownames(all_genes_interaction.body)
all_genes_interaction.body = all_genes_interaction.body[,c(7,1:6)]

# Save output files for both whole body and head
write.table(all_genes_interaction.body, file = "/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.body.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
write.table(all_genes_interaction.head, file = "/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.head.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)











#
