#############################################################################
######              Differential Gene Expression Pipeline               #####
#############################################################################

## Author: Amardeep Singh -- amardeep.singh[at]utoronto.ca
## This program makes use of SAM files that I created separately see: STAR.Alignment.Pipeline.sh
## Originally obtained from Julia Kriener and modified by Amardeep Singh

### Script Details ###
# This script is written primarily in R, Bash commands are denoted by #---- BASH ---- and end with # ----/----

##
# Path to sam files: /plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/RAL.mapped.files.to.ensembl/bam.files/samtools.sort.out
# Path to gtf /plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/gtf/Drosophila_melanogaster.BDGP6.28.99.gtf.gz

#####################################################################
###     Creating count matrices of each aligned transcriptome     ###
#####################################################################
require("GenomicFeatures")
require("Rsamtools")
require("GenomicAlignments")
require("DESeq2")

#############################
###   GENOMIC FEATURES    ###
#############################
# Read in gene model from GFF file
gtf.TxDb = makeTxDbFromGFF("/plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/gtf/Drosophila_melanogaster.BDGP6.28.99.gtf.gz", format="gtf")

# Creates a list of exons grouped by gene
exonsByGene = exonsBy(gtf.TxDb, by="gene")

# Specify BAM files to be used for generating read count matrix
bam_files.body = list.files("/plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/RAL.mapped.files.to.ensembl/bam.files/samtools.sort.out/OnlyBodySamples", pattern="SAM.sorted.trimmed.RAL", full=TRUE)
bam_files.head = list.files("/plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/RAL.mapped.files.to.ensembl/bam.files/samtools.sort.out/OnlyHeadSamples", pattern="SAM.sorted.trimmed.RAL", full=TRUE)

# Indicate that bamLst are BAM files
bamLst.body = BamFileList(bam_files.body, yieldSize=100000)
bamLst.head = BamFileList(bam_files.head, yieldSize=100000)

###############################
###   GENOMIC ALIGNMENTS    ###
###############################
# Call sumarizeOvarlaps to count reads and produce sum_exp which gets inputted into DESeq2
sum_exp.body <- summarizeOverlaps(exonsByGene, bamLst.body, mode="Union", singleEnd=TRUE, ignore.strand=TRUE)
sum_exp.head <- summarizeOverlaps(exonsByGene, bamLst.head, mode="Union", singleEnd=TRUE, ignore.strand=TRUE)

############################################
###      Prepping files for DESEQ2       ###
############################################
# Differential gene expression analysis pipeline
# Provide metadata about the individuals found the count matrix
# (each column of matrix = individual, each row of RNA_Data = info about individual)
# Making sure order of individuals in RNA Data and in summarized experiment match

# Make a condition table
# Body
condition.table.body = as.data.frame(factor(colnames(sum_exp.body)))
colnames(condition.table.body) = "SampleName"
condition.table.body$condition = factor(rep(c("female", "male"), 18))
condition.table.body$condition = as.factor(condition.table.body$condition)
#condition.table = as.data.frame(condition.table)
colData(sum_exp.body) = DataFrame(condition.table.body)

# Head
condition.table.head = as.data.frame(factor(colnames(sum_exp.head)))
colnames(condition.table.head) = "SampleName"
condition.table.head$condition = factor(rep(c("female", "male"), 18))
condition.table.head$condition = as.factor(condition.table.head$condition)
#condition.table = as.data.frame(condition.table)
colData(sum_exp.head) = DataFrame(condition.table.head)

###########################################
###     Running the DESeq2 pipeline     ###
###########################################

# build the DESeqDataSet from a SummarizedExperiment

# Whole Body
dds_interaction.body = DESeqDataSet(sum_exp.body, design = ~ condition)
# Filter out genes with fewer than 50 reads mapping across all samples (more stringent filtering is applied downstream)
keep.body = rowMeans(counts(dds_interaction.body)) >= 50
dds_interaction.body = dds_interaction.body[keep.body,]
#run DESeq2
dds_interaction.body = DESeq(dds_interaction.body)
#name results
all_genes_interaction.body = results(dds_interaction.body, contrast=c("condition", "male", "female")) # This specifies the output such that the log2FC is male/female

# Head
dds_interaction.head = DESeqDataSet(sum_exp.head, design = ~ condition)
# Filter out genes with fewer than 20 reads mapping across all samples (more stringent filtering is applied downstream)
keep.head = rowMeans(counts(dds_interaction.head)) >= 50
dds_interaction.head = dds_interaction.head[keep.head,]
#run DESeq2
dds_interaction.head = DESeq(dds_interaction.head)
#name results
all_genes_interaction.head = results(dds_interaction.head, contrast=c("condition", "male", "female")) # This specifies the output such that the log2FC is male/female

# FlyBaseID as first column
all_genes_interaction.body$FlyBaseID= rownames(all_genes_interaction.body)
all_genes_interaction.body = all_genes_interaction.body[,c(7,1:6)]
all_genes_interaction.head$FlyBaseID= rownames(all_genes_interaction.head)
all_genes_interaction.head = all_genes_interaction.head[,c(7,1:6)]

# Save output files for both whole body and head
write.table(all_genes_interaction.body, file = "/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.body.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
write.table(all_genes_interaction.head, file = "/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.head.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)

# Save DESeq2 RDS files
saveRDS(dds_interaction.body, file = "/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/DESeq2.output.body.rds")
saveRDS(dds_interaction.head, file = "/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/DESeq2.output.head.rds")


###########################################################################################
###     Comparing Gene Expression at genes with SD in Exon usage to those without       ###
###########################################################################################
# --- R Code ---
rm(list=ls())
require(dplyr)
require(doBy)
require(ggplot2)
require(grid)
require(VennDiagram)
require(grDevices)
require(ggExtra)

## Loading in data files
# Read in JunctionSeq results
junctionseq.results.body = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/BodyOutput/Aug1.Body.OnlyallGenes.results.txt", header = TRUE, sep = "\t")
junctionseq.results.head = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/HeadOutput/Aug1.Head.OnlyallGenes.results.txt", header = TRUE, sep = "\t")
## Load in the differential gene expression data
DGE.data.body = read.table("/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.body.txt", header = TRUE, sep = "\t")
DGE.data.head = read.table("/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.head.txt", header = TRUE, sep = "\t")

## Cleaning up data files
# Remove any sites that were not tested in the JunctionSeq output
junctionseq.results.body = junctionseq.results.body[!(is.na(junctionseq.results.body$pvalue)),]
junctionseq.results.head = junctionseq.results.head[!(is.na(junctionseq.results.head$pvalue)),]
# Lets remove any rows where the expr in males or females is less than 10 in the junctionseq data
junctionseq.results.filtered.body = junctionseq.results.body[junctionseq.results.body$expr_male > 50 & junctionseq.results.body$expr_female > 50,]
junctionseq.results.filtered.head = junctionseq.results.head[junctionseq.results.head$expr_male > 50 & junctionseq.results.head$expr_female > 50,]

# Assign significant hits to JunctionSeq output and clean up columns we don't care about
junctionseq.results.filtered.body$sig.hit = NA
junctionseq.results.filtered.body$sig.hit[junctionseq.results.filtered.body$geneWisePadj <= 0.01] = 1
junctionseq.results.filtered.body$sig.hit[!(junctionseq.results.filtered.body$geneWisePadj <= 0.01)] = 0
junctionseq.results.filtered.body = junctionseq.results.filtered.body[,c(2,25:26)]
junctionseq.results.filtered.head$sig.hit = NA
junctionseq.results.filtered.head$sig.hit[junctionseq.results.filtered.head$geneWisePadj <= 0.01] = 1
junctionseq.results.filtered.head$sig.hit[!(junctionseq.results.filtered.head$geneWisePadj <= 0.01)] = 0
junctionseq.results.filtered.head = junctionseq.results.filtered.head[,c(2,25:26)]

# Collapse duplicates
junctionseq.results.body.unique = unique(junctionseq.results.filtered.body)
junctionseq.results.head.unique = unique(junctionseq.results.filtered.head)

# Merge Junctionseq data with DGE data
junctionseq.results.body.merged.unique = merge(junctionseq.results.body.unique, DGE.data.body, by.x = "geneID", by.y = "FlyBaseID")
junctionseq.results.head.merged.unique = merge(junctionseq.results.head.unique, DGE.data.head, by.x = "geneID", by.y = "FlyBaseID")

# Subset out the columns of interest (i.e., gene ID, TajimasD, significant differences in exon usage, and log2FC)
expression.data.body = junctionseq.results.body.merged.unique[, c(1:6)]
expression.data.head = junctionseq.results.head.merged.unique[, c(1:6)]
# Add upper and lower CIs for log2FC means
expression.data.body$log2FC.upperCI = expression.data.body$log2FoldChange + expression.data.body$lfcSE * 2
expression.data.body$log2FC.lowerCI = expression.data.body$log2FoldChange - expression.data.body$lfcSE * 2

expression.data.head$log2FC.upperCI = expression.data.head$log2FoldChange + expression.data.head$lfcSE * 2
expression.data.head$log2FC.lowerCI = expression.data.head$log2FoldChange - expression.data.head$lfcSE * 2

# Assign quantile bins for sex-averaged gene expression
expression.data.body = expression.data.body %>% mutate(gene.expression.quantile = ntile(baseMean, 3))
expression.data.head = expression.data.head %>% mutate(gene.expression.quantile = ntile(baseMean, 3))

expression.data.head = expression.data.head %>% mutate(log2FC.quantile.all = ntile(log2FoldChange, 6))
expression.data.body = expression.data.body %>% mutate(log2FC.quantile.all = ntile(log2FoldChange, 6))

# Assign quartile bins for male and female biased gene expression
male.biased.body = expression.data.body[expression.data.body$log2FoldChange > 0,]
female.biased.body = expression.data.body[expression.data.body$log2FoldChange < 0,]
male.biased.head = expression.data.head[expression.data.head$log2FoldChange > 0,]
female.biased.head = expression.data.head[expression.data.head$log2FoldChange < 0,]

# Remove any rows that have an NA added to them
male.biased.body = male.biased.body[!(is.na(male.biased.body$log2FoldChange)),]
female.biased.body = female.biased.body[!(is.na(female.biased.body$log2FoldChange)),]
male.biased.head = male.biased.head[!(is.na(male.biased.head$log2FoldChange)),]
female.biased.head = female.biased.head[!(is.na(female.biased.head$log2FoldChange)),]

# Assign quartiles for both MBG and FBG
male.biased.body = male.biased.body %>% mutate(log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.body = female.biased.body %>% mutate(log2FC.quantile = ntile(log2FoldChange, 3))
male.biased.head = male.biased.head %>% mutate(log2FC.quantile = ntile(log2FoldChange, 3))
female.biased.head = female.biased.head %>% mutate(log2FC.quantile = ntile(log2FoldChange, 3))

# For the male genes, lets add 4 to each quartile
male.biased.body$log2FC.quantile = male.biased.body$log2FC.quantile + 3
male.biased.head$log2FC.quantile = male.biased.head$log2FC.quantile + 3

# Merge data back within each tissue type
expression.data.body = rbind(male.biased.body,female.biased.body)
expression.data.body$tissue = "body"
expression.data.head = rbind(male.biased.head,female.biased.head)
expression.data.head$tissue = "head"

# Assign to bins of log2FC based on CIs within tissue types ## This bins genes into 5 bins
expression.data.body$log2FC.quantile.CIs[expression.data.body$log2FC.upperCI < -2 ] = 1
expression.data.body$log2FC.quantile.CIs[expression.data.body$log2FC.lowerCI >= -2 & expression.data.body$log2FC.upperCI <= -0.5 ] = 2
expression.data.body$log2FC.quantile.CIs[expression.data.body$log2FC.lowerCI > -0.5 & expression.data.body$log2FC.upperCI < 0.5 ] = 3
expression.data.body$log2FC.quantile.CIs[expression.data.body$log2FC.lowerCI >= 0.5 & expression.data.body$log2FC.upperCI <= 2 ] = 4
expression.data.body$log2FC.quantile.CIs[expression.data.body$log2FC.lowerCI > 2 ] = 5

expression.data.head$log2FC.quantile.CIs[expression.data.head$log2FC.upperCI < -2 ] = 1
expression.data.head$log2FC.quantile.CIs[expression.data.head$log2FC.lowerCI >= -2 & expression.data.head$log2FC.upperCI <= -0.5 ] = 2
expression.data.head$log2FC.quantile.CIs[expression.data.head$log2FC.lowerCI > -0.5 & expression.data.head$log2FC.upperCI < 0.5 ] = 3
expression.data.head$log2FC.quantile.CIs[expression.data.head$log2FC.lowerCI >= 0.5 & expression.data.head$log2FC.upperCI <= 2 ] = 4
expression.data.head$log2FC.quantile.CIs[expression.data.head$log2FC.lowerCI > 2 ] = 5

expression.data=rbind(expression.data.body,expression.data.head)

###################
###   Plotting  ###
###################

## Comparing average log gene expression at exon dimorphic genes versus monomorphic genes
expression.data$log.baseMean = log(expression.data$baseMean)
expression.summary = summaryBy(log.baseMean ~ sig.hit + tissue, FUN = c(mean), data = expression.data)

# Bootstrap means for each subset
# Data frame to hold resampled results
resample.data = as.data.frame(cbind(vector(mode="numeric", length = 10000 * nrow(expression.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.summary))))

## Loop to resample Expression data
output.row.start = 1
output.row.end = 4
for (i in 1:10000){
  resampled.df=rbind(sample_n(expression.data[expression.data$sig.hit == 1 & expression.data$tissue == "body", ], nrow(expression.data[expression.data$sig.hit == 1 & expression.data$tissue == "body", ]), replace = TRUE),
                     sample_n(expression.data[expression.data$sig.hit == 0 & expression.data$tissue == "body", ], nrow(expression.data[expression.data$sig.hit == 0 & expression.data$tissue == "body", ]), replace = TRUE),
                     sample_n(expression.data[expression.data$sig.hit == 1 & expression.data$tissue == "head", ], nrow(expression.data[expression.data$sig.hit == 1 & expression.data$tissue == "head", ]), replace = TRUE),
                     sample_n(expression.data[expression.data$sig.hit == 0 & expression.data$tissue == "head", ], nrow(expression.data[expression.data$sig.hit == 0 & expression.data$tissue == "head", ]), replace = TRUE))

                    # Output summary of resampled data to resample dataframe
                    resample.data[output.row.start:output.row.end, ] = summaryBy(log.baseMean ~ sig.hit + tissue, FUN=c(mean, length), data = resampled.df)
                    output.row.start = output.row.end  + 1
                    output.row.end = output.row.end + 4
                    print(i)
}
colnames(resample.data) = c("sig.hit","tissue","log.sex.averaged.expression","number.of.genes")
write.table(resample.data, file = "/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/sex.averaged.gene.expression.resampled.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")

resample.data = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/sex.averaged.gene.expression.resampled.txt", header = TRUE)

# Rename columns of resampled data
gene.expression.data.summary = summaryBy(log.sex.averaged.expression ~ sig.hit + tissue, FUN = function(x) c(Mean = mean(x), lower.ci = quantile(x, probs = 0.05), upper.ci=quantile(x, probs = 0.95)), data = resample.data)
colnames(gene.expression.data.summary)[3:5] = c("log.expression","lowerCI", "upperCI")

# Replace resample.data.summary "median" with true observed median
colnames(expression.summary) = c("sig.hit", "tissue", "log.expression")
gene.expression.data.summary$log.expression = expression.summary$log.expression

sex.averaged.expression.plot = ggplot(gene.expression.data.summary, aes(y = log.expression, x = as.factor(tissue), colour = as.factor(sig.hit))) +
                                      geom_point(aes(y = log.expression, x = as.factor(tissue), colour = as.factor(sig.hit)),size = 10,
                                      position = position_dodge(width = 0.5)) +
                                      geom_errorbar(aes(ymin = lowerCI, ymax = upperCI, x = as.factor(tissue), colour=as.factor(sig.hit)),
                                      width = 0, position = position_dodge(width = 0.5)) +
                                      theme_bw()  + scale_colour_manual(values = c("#800080", "#65c86e")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none")


pdf("/plas1/amardeep.singh/tmp/Sex.averaged.expression.pdf", height = 10, width = 5)
sex.averaged.expression.plot
dev.off()


## Comparing average log 2FC (i.e., sex-bias) in gene expression at exon dimorphic genes versus monomorphic genes
#expression.data$log.baseMean = log(expression.data$baseMean)
expression.summary = summaryBy(log2FoldChange ~ sig.hit + tissue, FUN = c(mean), data = expression.data)

# Bootstrap means for each subset
# Data frame to hold resampled results
resample.data = as.data.frame(cbind(vector(mode="numeric", length = 10000 * nrow(expression.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.summary)),
                                    vector(mode="numeric", length = 10000 * nrow(expression.summary))))

## Loop to resample Expression data
output.row.start = 1
output.row.end = 4
for (i in 1:10000){
  resampled.df=rbind(sample_n(expression.data[expression.data$sig.hit == 1 & expression.data$tissue == "body", ], nrow(expression.data[expression.data$sig.hit == 1 & expression.data$tissue == "body", ]), replace = TRUE),
                     sample_n(expression.data[expression.data$sig.hit == 0 & expression.data$tissue == "body", ], nrow(expression.data[expression.data$sig.hit == 0 & expression.data$tissue == "body", ]), replace = TRUE),
                     sample_n(expression.data[expression.data$sig.hit == 1 & expression.data$tissue == "head", ], nrow(expression.data[expression.data$sig.hit == 1 & expression.data$tissue == "head", ]), replace = TRUE),
                     sample_n(expression.data[expression.data$sig.hit == 0 & expression.data$tissue == "head", ], nrow(expression.data[expression.data$sig.hit == 0 & expression.data$tissue == "head", ]), replace = TRUE))

                    # Output summary of resampled data to resample dataframe
                    resample.data[output.row.start:output.row.end, ] = summaryBy(log2FoldChange ~ sig.hit + tissue, FUN=c(mean, length), data = resampled.df)
                    output.row.start = output.row.end  + 1
                    output.row.end = output.row.end + 4
                    print(i)
}
colnames(resample.data) = c("sig.hit","tissue","log2FC.expression","number.of.genes")
write.table(resample.data, file = "/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/sex.bias.gene.expression.resampled.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")

resample.data = read.delim("/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/sex.bias.gene.expression.resampled.txt", header = TRUE)

# Rename columns of resampled data
gene.expression.data.summary = summaryBy(log2FC.expression ~ sig.hit + tissue, FUN = function(x) c(Mean = mean(x), lower.ci = quantile(x, probs = 0.05), upper.ci=quantile(x, probs = 0.95)), data = resample.data)
colnames(gene.expression.data.summary)[3:5] = c("log2FC.expression","lowerCI", "upperCI")

# Replace resample.data.summary "median" with true observed median
gene.expression.data.summary$log2FC.expression = expression.summary$log2FoldChange

sex.averaged.expression.plot = ggplot(gene.expression.data.summary, aes(y = log2FC.expression, x = as.factor(tissue), colour = as.factor(sig.hit))) +
                                      geom_point(aes(y = log2FC.expression, x = as.factor(tissue), colour = as.factor(sig.hit)),size = 10,
                                      position = position_dodge(width = 0.5)) +
                                      geom_errorbar(aes(ymin = lowerCI, ymax = upperCI, x = as.factor(tissue), colour=as.factor(sig.hit)),
                                      width = 0, position = position_dodge(width = 0.5)) +
                                      theme_bw()  + scale_colour_manual(values = c("#800080", "#65c86e")) +
                                      theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                            panel.border = element_rect(colour = "black", fill=NA, size=1),
                                            axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                            axis.title=element_blank(), legend.position = "none")

pdf("/plas1/amardeep.singh/tmp/Sex.bias.expression.pdf", height = 10, width = 5)
sex.averaged.expression.plot
dev.off()


##   Plotting Fractions of sig to non-sig genes   ##
# First plot will be the fraction of genes in gene expression quantiles that are significantly DEU or not regardless of average gene expression
# I'm doing this using three different "sub method" ways of defining quantiles.
# First sub method is simply dividing by equal quantiles
# Subset quantiles of gene expression
body.quantile.bin.1 = expression.data.body[expression.data.body$log2FC.quantile == 1, ]
body.quantile.bin.2 = expression.data.body[expression.data.body$log2FC.quantile == 2, ]
body.quantile.bin.3 = expression.data.body[expression.data.body$log2FC.quantile == 3, ]
body.quantile.bin.4 = expression.data.body[expression.data.body$log2FC.quantile == 4, ]
body.quantile.bin.5 = expression.data.body[expression.data.body$log2FC.quantile == 5, ]
body.quantile.bin.6 = expression.data.body[expression.data.body$log2FC.quantile == 6, ]
body.quantile.bin.7 = expression.data.body[expression.data.body$log2FC.quantile == 7, ]
body.quantile.bin.8 = expression.data.body[expression.data.body$log2FC.quantile == 8, ]

head.quantile.bin.1 = expression.data.head[expression.data.head$log2FC.quantile == 1, ]
head.quantile.bin.2 = expression.data.head[expression.data.head$log2FC.quantile == 2, ]
head.quantile.bin.3 = expression.data.head[expression.data.head$log2FC.quantile == 3, ]
head.quantile.bin.4 = expression.data.head[expression.data.head$log2FC.quantile == 4, ]
head.quantile.bin.5 = expression.data.head[expression.data.head$log2FC.quantile == 5, ]
head.quantile.bin.6 = expression.data.head[expression.data.head$log2FC.quantile == 6, ]
head.quantile.bin.7 = expression.data.head[expression.data.head$log2FC.quantile == 7, ]
head.quantile.bin.8 = expression.data.head[expression.data.head$log2FC.quantile == 8, ]

# Fractions in each quantile
body.df.fraction = c( (nrow(body.quantile.bin.1[body.quantile.bin.1$sig.hit == 1,])) / ( nrow(body.quantile.bin.1[body.quantile.bin.1$sig.hit == 0,]) + nrow(body.quantile.bin.1[body.quantile.bin.1$sig.hit == 1,])),
                      (nrow(body.quantile.bin.2[body.quantile.bin.2$sig.hit == 1,])) / ( nrow(body.quantile.bin.2[body.quantile.bin.2$sig.hit == 0,]) + nrow(body.quantile.bin.2[body.quantile.bin.2$sig.hit == 1,])),
                      (nrow(body.quantile.bin.3[body.quantile.bin.3$sig.hit == 1,])) / ( nrow(body.quantile.bin.3[body.quantile.bin.3$sig.hit == 0,]) + nrow(body.quantile.bin.3[body.quantile.bin.3$sig.hit == 1,])),
                      (nrow(body.quantile.bin.4[body.quantile.bin.4$sig.hit == 1,])) / ( nrow(body.quantile.bin.4[body.quantile.bin.4$sig.hit == 0,]) + nrow(body.quantile.bin.4[body.quantile.bin.4$sig.hit == 1,])),
                      (nrow(body.quantile.bin.5[body.quantile.bin.5$sig.hit == 1,])) / ( nrow(body.quantile.bin.5[body.quantile.bin.5$sig.hit == 0,]) + nrow(body.quantile.bin.5[body.quantile.bin.5$sig.hit == 1,])),
                      (nrow(body.quantile.bin.6[body.quantile.bin.6$sig.hit == 1,])) / ( nrow(body.quantile.bin.6[body.quantile.bin.6$sig.hit == 0,]) + nrow(body.quantile.bin.6[body.quantile.bin.6$sig.hit == 1,])))
                      #(nrow(body.quantile.bin.7[body.quantile.bin.7$sig.hit == 1,])) / ( nrow(body.quantile.bin.7[body.quantile.bin.7$sig.hit == 0,] + )),
                      #(nrow(body.quantile.bin.8[body.quantile.bin.8$sig.hit == 1,])) / ( nrow(body.quantile.bin.8[body.quantile.bin.8$sig.hit == 0,] + )))

head.df.fraction = c( (nrow(head.quantile.bin.1[head.quantile.bin.1$sig.hit == 1,])) / ( nrow(head.quantile.bin.1[head.quantile.bin.1$sig.hit == 0,]) + nrow(head.quantile.bin.1[head.quantile.bin.1$sig.hit == 1,])),
                      (nrow(head.quantile.bin.2[head.quantile.bin.2$sig.hit == 1,])) / ( nrow(head.quantile.bin.2[head.quantile.bin.2$sig.hit == 0,]) + nrow(head.quantile.bin.2[head.quantile.bin.2$sig.hit == 1,])),
                      (nrow(head.quantile.bin.3[head.quantile.bin.3$sig.hit == 1,])) / ( nrow(head.quantile.bin.3[head.quantile.bin.3$sig.hit == 0,]) + nrow(head.quantile.bin.3[head.quantile.bin.3$sig.hit == 1,])),
                      (nrow(head.quantile.bin.4[head.quantile.bin.4$sig.hit == 1,])) / ( nrow(head.quantile.bin.4[head.quantile.bin.4$sig.hit == 0,]) + nrow(head.quantile.bin.4[head.quantile.bin.4$sig.hit == 1,])),
                      (nrow(head.quantile.bin.5[head.quantile.bin.5$sig.hit == 1,])) / ( nrow(head.quantile.bin.5[head.quantile.bin.5$sig.hit == 0,]) + nrow(head.quantile.bin.5[head.quantile.bin.5$sig.hit == 1,])),
                      (nrow(head.quantile.bin.6[head.quantile.bin.6$sig.hit == 1,])) / ( nrow(head.quantile.bin.6[head.quantile.bin.6$sig.hit == 0,]) + nrow(head.quantile.bin.6[head.quantile.bin.6$sig.hit == 1,])))
                      #(nrow(head.quantile.bin.7[head.quantile.bin.7$sig.hit == 1,])) / ( nrow(head.quantile.bin.7[head.quantile.bin.7$sig.hit == 0,])),
                      #(nrow(head.quantile.bin.8[head.quantile.bin.8$sig.hit == 1,])) / ( nrow(head.quantile.bin.8[head.quantile.bin.8$sig.hit == 0,])))


body.quantile.1.fraction = vector(mode = "numeric", length = 10000)
body.quantile.2.fraction = vector(mode = "numeric", length = 10000)
body.quantile.3.fraction = vector(mode = "numeric", length = 10000)
body.quantile.4.fraction = vector(mode = "numeric", length = 10000)
body.quantile.5.fraction = vector(mode = "numeric", length = 10000)
body.quantile.6.fraction = vector(mode = "numeric", length = 10000)
body.quantile.7.fraction = vector(mode = "numeric", length = 10000)
body.quantile.8.fraction = vector(mode = "numeric", length = 10000)

# Head Data
head.quantile.1.fraction = vector(mode = "numeric", length = 10000)
head.quantile.2.fraction = vector(mode = "numeric", length = 10000)
head.quantile.3.fraction = vector(mode = "numeric", length = 10000)
head.quantile.4.fraction = vector(mode = "numeric", length = 10000)
head.quantile.5.fraction = vector(mode = "numeric", length = 10000)
head.quantile.6.fraction = vector(mode = "numeric", length = 10000)
head.quantile.7.fraction = vector(mode = "numeric", length = 10000)
head.quantile.8.fraction = vector(mode = "numeric", length = 10000)

# Resampling
for (i in 1:10000){

  sample.body.quantile1 = sample(body.quantile.bin.1$sig.hit, nrow(body.quantile.bin.1), replace = TRUE)
  sample.body.quantile2 = sample(body.quantile.bin.2$sig.hit, nrow(body.quantile.bin.2), replace = TRUE)
  sample.body.quantile3 = sample(body.quantile.bin.3$sig.hit, nrow(body.quantile.bin.3), replace = TRUE)
  sample.body.quantile4 = sample(body.quantile.bin.4$sig.hit, nrow(body.quantile.bin.4), replace = TRUE)
  sample.body.quantile5 = sample(body.quantile.bin.5$sig.hit, nrow(body.quantile.bin.5), replace = TRUE)
  sample.body.quantile6 = sample(body.quantile.bin.6$sig.hit, nrow(body.quantile.bin.6), replace = TRUE)
  #sample.body.quantile7 = sample(body.quantile.bin.7$sig.hit, nrow(body.quantile.bin.7), replace = TRUE)
  #sample.body.quantile8 = sample(body.quantile.bin.8$sig.hit, nrow(body.quantile.bin.8), replace = TRUE)

  sample.head.quantile1 = sample(head.quantile.bin.1$sig.hit, nrow(head.quantile.bin.1), replace = TRUE)
  sample.head.quantile2 = sample(head.quantile.bin.2$sig.hit, nrow(head.quantile.bin.2), replace = TRUE)
  sample.head.quantile3 = sample(head.quantile.bin.3$sig.hit, nrow(head.quantile.bin.3), replace = TRUE)
  sample.head.quantile4 = sample(head.quantile.bin.4$sig.hit, nrow(head.quantile.bin.4), replace = TRUE)
  sample.head.quantile5 = sample(head.quantile.bin.5$sig.hit, nrow(head.quantile.bin.5), replace = TRUE)
  sample.head.quantile6 = sample(head.quantile.bin.6$sig.hit, nrow(head.quantile.bin.6), replace = TRUE)
  #sample.head.quantile7 = sample(head.quantile.bin.7$sig.hit, nrow(head.quantile.bin.7), replace = TRUE)
  #sample.head.quantile8 = sample(head.quantile.bin.8$sig.hit, nrow(head.quantile.bin.8), replace = TRUE)

  body.quantile.1.fraction[i] = length(sample.body.quantile1[sample.body.quantile1 == 1]) / (length(sample.body.quantile1[sample.body.quantile1 == 0]) + length(sample.body.quantile1[sample.body.quantile1 == 1]))
  body.quantile.2.fraction[i] = length(sample.body.quantile2[sample.body.quantile2 == 1]) / (length(sample.body.quantile2[sample.body.quantile2 == 0]) + length(sample.body.quantile2[sample.body.quantile2 == 1]))
  body.quantile.3.fraction[i] = length(sample.body.quantile3[sample.body.quantile3 == 1]) / (length(sample.body.quantile3[sample.body.quantile3 == 0]) + length(sample.body.quantile3[sample.body.quantile3 == 1]))
  body.quantile.4.fraction[i] = length(sample.body.quantile4[sample.body.quantile4 == 1]) / (length(sample.body.quantile4[sample.body.quantile4 == 0]) + length(sample.body.quantile4[sample.body.quantile4 == 1]))
  body.quantile.5.fraction[i] = length(sample.body.quantile5[sample.body.quantile5 == 1]) / (length(sample.body.quantile5[sample.body.quantile5 == 0]) + length(sample.body.quantile5[sample.body.quantile5 == 1]))
  body.quantile.6.fraction[i] = length(sample.body.quantile6[sample.body.quantile6 == 1]) / (length(sample.body.quantile6[sample.body.quantile6 == 0]) + length(sample.body.quantile6[sample.body.quantile6 == 1]))
  #body.quantile.7.fraction[i] = length(sample.body.quantile7[sample.body.quantile7 == 1]) / (length(sample.body.quantile7[sample.body.quantile7 == 0]) + length(sample.body.quantile7[sample.body.quantile7 == 1]))
  #body.quantile.8.fraction[i] = length(sample.body.quantile8[sample.body.quantile8 == 1]) / (length(sample.body.quantile8[sample.body.quantile8 == 0]) + length(sample.body.quantile8[sample.body.quantile8 == 1]))

  head.quantile.1.fraction[i] = length(sample.head.quantile1[sample.head.quantile1 == 1]) / (length(sample.head.quantile1[sample.head.quantile1 == 0]) + length(sample.head.quantile1[sample.head.quantile1 == 1]))
  head.quantile.2.fraction[i] = length(sample.head.quantile2[sample.head.quantile2 == 1]) / (length(sample.head.quantile2[sample.head.quantile2 == 0]) + length(sample.head.quantile2[sample.head.quantile2 == 1]))
  head.quantile.3.fraction[i] = length(sample.head.quantile3[sample.head.quantile3 == 1]) / (length(sample.head.quantile3[sample.head.quantile3 == 0]) + length(sample.head.quantile3[sample.head.quantile3 == 1]))
  head.quantile.4.fraction[i] = length(sample.head.quantile4[sample.head.quantile4 == 1]) / (length(sample.head.quantile4[sample.head.quantile4 == 0]) + length(sample.head.quantile4[sample.head.quantile4 == 1]))
  head.quantile.5.fraction[i] = length(sample.head.quantile5[sample.head.quantile5 == 1]) / (length(sample.head.quantile5[sample.head.quantile5 == 0]) + length(sample.head.quantile5[sample.head.quantile5 == 1]))
  head.quantile.6.fraction[i] = length(sample.head.quantile6[sample.head.quantile6 == 1]) / (length(sample.head.quantile6[sample.head.quantile6 == 0]) + length(sample.head.quantile6[sample.head.quantile6 == 1]))
  #head.quantile.7.fraction[i] = length(sample.head.quantile7[sample.head.quantile7 == 1]) / (length(sample.head.quantile7[sample.head.quantile7 == 0]) + length(sample.head.quantile7[sample.head.quantile7 == 1]))
  #head.quantile.8.fraction[i] = length(sample.head.quantile8[sample.head.quantile8 == 1]) / (length(sample.head.quantile8[sample.head.quantile8 == 0]) + length(sample.head.quantile8[sample.head.quantile8 == 1]))

  print (i)
}

body.lower.CI = as.vector( c( quantile(body.quantile.1.fraction, 0.05)[1],
                              quantile(body.quantile.2.fraction, 0.05)[1],
                              quantile(body.quantile.3.fraction, 0.05)[1],
                              quantile(body.quantile.4.fraction, 0.05)[1],
                              quantile(body.quantile.5.fraction, 0.05)[1],
                              quantile(body.quantile.6.fraction, 0.05)[1]))
                              #quantile(body.quantile.7.fraction, 0.05)[1],
                              #quantile(body.quantile.8.fraction, 0.05)[1]


body.high.CI = as.vector( c( quantile(body.quantile.1.fraction, 0.95)[1],
                              quantile(body.quantile.2.fraction, 0.95)[1],
                              quantile(body.quantile.3.fraction, 0.95)[1],
                              quantile(body.quantile.4.fraction, 0.95)[1],
                              quantile(body.quantile.5.fraction, 0.95)[1],
                              quantile(body.quantile.6.fraction, 0.95)[1]))
                              #quantile(body.quantile.7.fraction, 0.95)[1],
                              #quantile(body.quantile.8.fraction, 0.95)[1]))
#
head.lower.CI = as.vector( c( quantile(head.quantile.1.fraction, 0.05)[1],
                              quantile(head.quantile.2.fraction, 0.05)[1],
                              quantile(head.quantile.3.fraction, 0.05)[1],
                              quantile(head.quantile.4.fraction, 0.05)[1],
                              quantile(head.quantile.5.fraction, 0.05)[1],
                              quantile(head.quantile.6.fraction, 0.05)[1]))
                              #quantile(head.quantile.7.fraction, 0.05)[1],
                              #quantile(head.quantile.8.fraction, 0.05)[1]))

head.high.CI = as.vector( c( quantile(head.quantile.1.fraction, 0.95)[1],
                              quantile(head.quantile.2.fraction, 0.95)[1],
                              quantile(head.quantile.3.fraction, 0.95)[1],
                              quantile(head.quantile.4.fraction, 0.95)[1],
                              quantile(head.quantile.5.fraction, 0.95)[1],
                              quantile(head.quantile.6.fraction, 0.95)[1]))
                              #quantile(head.quantile.7.fraction, 0.95)[1],
                              #quantile(head.quantile.8.fraction, 0.95)[1]))

body.gene.expression.df = as.data.frame(cbind(body.df.fraction, body.lower.CI, body.high.CI))
body.gene.expression.df$quantile = seq(1,6,1)
body.gene.expression.df$expbias = c(rep("FB",3), rep("MB",3))
body.gene.expression.df$tissue = "body"
colnames(body.gene.expression.df) = c("fraction", "lower.CI", "upper.CI", "quantile", "expbias", "tissue")
head.gene.expression.df = as.data.frame(cbind(head.df.fraction, head.lower.CI, head.high.CI))
head.gene.expression.df$quantile = seq(1,6,1)
head.gene.expression.df$expbias = c(rep("FB",3), rep("MB",3))
head.gene.expression.df$tissue = "head"
colnames(head.gene.expression.df) = c("fraction", "lower.CI", "upper.CI", "quantile", "expbias", "tissue")

gene.expression.df = rbind(body.gene.expression.df,head.gene.expression.df)

# Plotting fractions -- Plot with free y scale
fraction.of.genes = ggplot(gene.expression.df, aes(y=fraction, x = as.factor(quantile), colour = expbias)) +
                           geom_point(aes(x = as.factor(quantile), y = fraction,  colour = expbias), size = 10,
                           position = position_dodge(width = 0.5)) + #ylim(0,0.75) +
                           geom_errorbar(aes(ymin = lower.CI, ymax = upper.CI, x = as.factor(quantile)),
                           width = 0, position = position_dodge(width = 0.5)) +
                           theme_bw()  + scale_colour_manual(values = c("#6361f2","#f29161")) +
                           theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                 panel.border = element_rect(colour = "black", fill=NA, size=1),
                                 axis.text = element_text(face="bold", color="black",size=15, family = "Helvetica"),
                                 axis.title=element_blank(), legend.position = "none") +
                          facet_grid(tissue~., scales = "free") + theme(panel.spacing = unit(2, "lines"))
pdf("/plas1/amardeep.singh/tmp/gene.expression.fractions_free_scale.pdf")
fraction.of.genes
dev.off()


# Second sub method is simply dividing by 5 predefined bins based on confidence interavals quantiles
# Subset quantiles of gene expression
# Remove any row with an NA in the quantile column
#log2FC.quantile.CIs
expression.data.body = expression.data.body[!is.na(expression.data.body$log2FC.quantile.CIs), ]
expression.data.head = expression.data.head[!is.na(expression.data.head$log2FC.quantile.CIs), ]

body.quantile.bin.1 = expression.data.body[expression.data.body$log2FC.quantile.CIs == 1, ]
body.quantile.bin.2 = expression.data.body[expression.data.body$log2FC.quantile.CIs == 2, ]
body.quantile.bin.3 = expression.data.body[expression.data.body$log2FC.quantile.CIs == 3, ]
body.quantile.bin.4 = expression.data.body[expression.data.body$log2FC.quantile.CIs == 4, ]
body.quantile.bin.5 = expression.data.body[expression.data.body$log2FC.quantile.CIs == 5, ]


head.quantile.bin.1 = expression.data.head[expression.data.head$log2FC.quantile.CIs == 1, ]
head.quantile.bin.2 = expression.data.head[expression.data.head$log2FC.quantile.CIs == 2, ]
head.quantile.bin.3 = expression.data.head[expression.data.head$log2FC.quantile.CIs == 3, ]
head.quantile.bin.4 = expression.data.head[expression.data.head$log2FC.quantile.CIs == 4, ]
head.quantile.bin.5 = expression.data.head[expression.data.head$log2FC.quantile.CIs == 5, ]


# Fractions in each quantile
body.df.fraction = c( (nrow(body.quantile.bin.1[body.quantile.bin.1$sig.hit == 1,])) / ( nrow(body.quantile.bin.1[body.quantile.bin.1$sig.hit == 0,]) + nrow(body.quantile.bin.1[body.quantile.bin.1$sig.hit == 1,])),
                      (nrow(body.quantile.bin.2[body.quantile.bin.2$sig.hit == 1,])) / ( nrow(body.quantile.bin.2[body.quantile.bin.2$sig.hit == 0,]) + nrow(body.quantile.bin.2[body.quantile.bin.2$sig.hit == 1,])),
                      (nrow(body.quantile.bin.3[body.quantile.bin.3$sig.hit == 1,])) / ( nrow(body.quantile.bin.3[body.quantile.bin.3$sig.hit == 0,]) + nrow(body.quantile.bin.3[body.quantile.bin.3$sig.hit == 1,])),
                      (nrow(body.quantile.bin.4[body.quantile.bin.4$sig.hit == 1,])) / ( nrow(body.quantile.bin.4[body.quantile.bin.4$sig.hit == 0,]) + nrow(body.quantile.bin.4[body.quantile.bin.4$sig.hit == 1,])),
                      (nrow(body.quantile.bin.5[body.quantile.bin.5$sig.hit == 1,])) / ( nrow(body.quantile.bin.5[body.quantile.bin.5$sig.hit == 0,]) + nrow(body.quantile.bin.5[body.quantile.bin.5$sig.hit == 1,])))

head.df.fraction = c( (nrow(head.quantile.bin.1[head.quantile.bin.1$sig.hit == 1,])) / ( nrow(head.quantile.bin.1[head.quantile.bin.1$sig.hit == 0,]) + nrow(head.quantile.bin.1[head.quantile.bin.1$sig.hit == 1,])),
                      (nrow(head.quantile.bin.2[head.quantile.bin.2$sig.hit == 1,])) / ( nrow(head.quantile.bin.2[head.quantile.bin.2$sig.hit == 0,]) + nrow(head.quantile.bin.2[head.quantile.bin.2$sig.hit == 1,])),
                      (nrow(head.quantile.bin.3[head.quantile.bin.3$sig.hit == 1,])) / ( nrow(head.quantile.bin.3[head.quantile.bin.3$sig.hit == 0,]) + nrow(head.quantile.bin.3[head.quantile.bin.3$sig.hit == 1,])),
                      (nrow(head.quantile.bin.4[head.quantile.bin.4$sig.hit == 1,])) / ( nrow(head.quantile.bin.4[head.quantile.bin.4$sig.hit == 0,]) + nrow(head.quantile.bin.4[head.quantile.bin.4$sig.hit == 1,])),
                      (nrow(head.quantile.bin.5[head.quantile.bin.5$sig.hit == 1,])) / ( nrow(head.quantile.bin.5[head.quantile.bin.5$sig.hit == 0,]) + nrow(head.quantile.bin.5[head.quantile.bin.5$sig.hit == 1,])))


body.quantile.1.fraction = vector(mode = "numeric", length = 10000)
body.quantile.2.fraction = vector(mode = "numeric", length = 10000)
body.quantile.3.fraction = vector(mode = "numeric", length = 10000)
body.quantile.4.fraction = vector(mode = "numeric", length = 10000)
body.quantile.5.fraction = vector(mode = "numeric", length = 10000)

# Head Data
head.quantile.1.fraction = vector(mode = "numeric", length = 10000)
head.quantile.2.fraction = vector(mode = "numeric", length = 10000)
head.quantile.3.fraction = vector(mode = "numeric", length = 10000)
head.quantile.4.fraction = vector(mode = "numeric", length = 10000)
head.quantile.5.fraction = vector(mode = "numeric", length = 10000)

# Resampling
for (i in 1:10000){

  sample.body.quantile1 = sample(body.quantile.bin.1$sig.hit, nrow(body.quantile.bin.1), replace = TRUE)
  sample.body.quantile2 = sample(body.quantile.bin.2$sig.hit, nrow(body.quantile.bin.2), replace = TRUE)
  sample.body.quantile3 = sample(body.quantile.bin.3$sig.hit, nrow(body.quantile.bin.3), replace = TRUE)
  sample.body.quantile4 = sample(body.quantile.bin.4$sig.hit, nrow(body.quantile.bin.4), replace = TRUE)
  sample.body.quantile5 = sample(body.quantile.bin.5$sig.hit, nrow(body.quantile.bin.5), replace = TRUE)

  sample.head.quantile1 = sample(head.quantile.bin.1$sig.hit, nrow(head.quantile.bin.1), replace = TRUE)
  sample.head.quantile2 = sample(head.quantile.bin.2$sig.hit, nrow(head.quantile.bin.2), replace = TRUE)
  sample.head.quantile3 = sample(head.quantile.bin.3$sig.hit, nrow(head.quantile.bin.3), replace = TRUE)
  sample.head.quantile4 = sample(head.quantile.bin.4$sig.hit, nrow(head.quantile.bin.4), replace = TRUE)
  sample.head.quantile5 = sample(head.quantile.bin.5$sig.hit, nrow(head.quantile.bin.5), replace = TRUE)

  body.quantile.1.fraction[i] = length(sample.body.quantile1[sample.body.quantile1 == 1]) / (length(sample.body.quantile1[sample.body.quantile1 == 0]) + length(sample.body.quantile1[sample.body.quantile1 == 1]))
  body.quantile.2.fraction[i] = length(sample.body.quantile2[sample.body.quantile2 == 1]) / (length(sample.body.quantile2[sample.body.quantile2 == 0]) + length(sample.body.quantile2[sample.body.quantile2 == 1]))
  body.quantile.3.fraction[i] = length(sample.body.quantile3[sample.body.quantile3 == 1]) / (length(sample.body.quantile3[sample.body.quantile3 == 0]) + length(sample.body.quantile3[sample.body.quantile3 == 1]))
  body.quantile.4.fraction[i] = length(sample.body.quantile4[sample.body.quantile4 == 1]) / (length(sample.body.quantile4[sample.body.quantile4 == 0]) + length(sample.body.quantile4[sample.body.quantile4 == 1]))
  body.quantile.5.fraction[i] = length(sample.body.quantile5[sample.body.quantile5 == 1]) / (length(sample.body.quantile5[sample.body.quantile5 == 0]) + length(sample.body.quantile5[sample.body.quantile5 == 1]))

  head.quantile.1.fraction[i] = length(sample.head.quantile1[sample.head.quantile1 == 1]) / (length(sample.head.quantile1[sample.head.quantile1 == 0]) + length(sample.head.quantile1[sample.head.quantile1 == 1]))
  head.quantile.2.fraction[i] = length(sample.head.quantile2[sample.head.quantile2 == 1]) / (length(sample.head.quantile2[sample.head.quantile2 == 0]) + length(sample.head.quantile2[sample.head.quantile2 == 1]))
  head.quantile.3.fraction[i] = length(sample.head.quantile3[sample.head.quantile3 == 1]) / (length(sample.head.quantile3[sample.head.quantile3 == 0]) + length(sample.head.quantile3[sample.head.quantile3 == 1]))
  head.quantile.4.fraction[i] = length(sample.head.quantile4[sample.head.quantile4 == 1]) / (length(sample.head.quantile4[sample.head.quantile4 == 0]) + length(sample.head.quantile4[sample.head.quantile4 == 1]))
  head.quantile.5.fraction[i] = length(sample.head.quantile5[sample.head.quantile5 == 1]) / (length(sample.head.quantile5[sample.head.quantile5 == 0]) + length(sample.head.quantile5[sample.head.quantile5 == 1]))

  print (i)
}

body.lower.CI = as.vector( c( quantile(body.quantile.1.fraction, 0.05)[1],
                              quantile(body.quantile.2.fraction, 0.05)[1],
                              quantile(body.quantile.3.fraction, 0.05)[1],
                              quantile(body.quantile.4.fraction, 0.05)[1],
                              quantile(body.quantile.5.fraction, 0.05)[1]))


body.high.CI = as.vector( c( quantile(body.quantile.1.fraction, 0.95)[1],
                              quantile(body.quantile.2.fraction, 0.95)[1],
                              quantile(body.quantile.3.fraction, 0.95)[1],
                              quantile(body.quantile.4.fraction, 0.95)[1],
                              quantile(body.quantile.5.fraction, 0.95)[1]))

#
head.lower.CI = as.vector( c( quantile(head.quantile.1.fraction, 0.05)[1],
                              quantile(head.quantile.2.fraction, 0.05)[1],
                              quantile(head.quantile.3.fraction, 0.05)[1],
                              quantile(head.quantile.4.fraction, 0.05)[1],
                              quantile(head.quantile.5.fraction, 0.05)[1]))

head.high.CI = as.vector( c( quantile(head.quantile.1.fraction, 0.95)[1],
                              quantile(head.quantile.2.fraction, 0.95)[1],
                              quantile(head.quantile.3.fraction, 0.95)[1],
                              quantile(head.quantile.4.fraction, 0.95)[1],
                              quantile(head.quantile.5.fraction, 0.95)[1]))

body.gene.expression.df = as.data.frame(cbind(body.df.fraction, body.lower.CI, body.high.CI))
body.gene.expression.df$quantile = seq(1,5,1)
body.gene.expression.df$expbias = c(rep("FB",2),"UB",rep("MB",2))
body.gene.expression.df$tissue = "body"
colnames(body.gene.expression.df) = c("fraction", "lower.CI", "upper.CI", "quantile", "expbias", "tissue")
head.gene.expression.df = as.data.frame(cbind(head.df.fraction, head.lower.CI, head.high.CI))
head.gene.expression.df$quantile = seq(1,5,1)
head.gene.expression.df$expbias = c(rep("FB",2),"UB",rep("MB",2))
head.gene.expression.df$tissue = "head"
colnames(head.gene.expression.df) = c("fraction", "lower.CI", "upper.CI", "quantile", "expbias", "tissue")

gene.expression.df = rbind(body.gene.expression.df,head.gene.expression.df)
# add a column to shade out the two points in the head data that have very few genes
gene.expression.df$shade = c("full","full","full","full","full","shaded","full","full","full","shaded")
gene.expression.df$plotting.dummyvariable = paste(gene.expression.df$expbias, gene.expression.df$shade, sep = "")
gene.expression.df
# Plotting fractions -- Plot with free y scale
# Colours: darkred: #b30000; light red: #e09999; Dark Blue: #0000b3; light blue: #9999e0
fraction.of.genes = ggplot(gene.expression.df, aes(y=fraction, x = as.factor(quantile), colour = plotting.dummyvariable)) +
                           geom_point(aes(x = as.factor(quantile), y = fraction,  colour = plotting.dummyvariable), size = 10,
                           position = position_dodge(width = 0.5)) + #ylim(-0.1,0.75) +
                           geom_errorbar(aes(ymin = lower.CI, ymax = upper.CI, x = as.factor(quantile)),
                           width = 0, position = position_dodge(width = 0.5)) +
                           theme_bw()  + scale_colour_manual(values = c("#b30000","#FFFFFF", "#0000b3", "#000000")) +
                           theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                 panel.border = element_rect(colour = "black", fill=NA, size=1),
                                 axis.text = element_text(face="bold", color="black",size=15, family = "Helvetica"),
                                 axis.title=element_blank(), legend.position = "none") +
                          facet_grid(tissue~., scales = "free") + theme(panel.spacing = unit(2, "lines"))
pdf("/plas1/amardeep.singh/tmp/gene.expression.fractions.predefined.bins.subset_free_scale.pdf")
fraction.of.genes
dev.off()

## Plotting difference between biased and unbiased bins
# Remove any row with an NA in the quantile column
expression.data.body = expression.data.body[!is.na(expression.data.body$log2FC.quantile.CIs), ]
expression.data.head = expression.data.head[!is.na(expression.data.head$log2FC.quantile.CIs), ]

body.quantile.bin.1 = expression.data.body[expression.data.body$log2FC.quantile.CIs == 1, ]
body.quantile.bin.2 = expression.data.body[expression.data.body$log2FC.quantile.CIs == 2, ]
body.quantile.bin.3 = expression.data.body[expression.data.body$log2FC.quantile.CIs == 3, ]
body.quantile.bin.4 = expression.data.body[expression.data.body$log2FC.quantile.CIs == 4, ]
body.quantile.bin.5 = expression.data.body[expression.data.body$log2FC.quantile.CIs == 5, ]


head.quantile.bin.1 = expression.data.head[expression.data.head$log2FC.quantile.CIs == 1, ]
head.quantile.bin.2 = expression.data.head[expression.data.head$log2FC.quantile.CIs == 2, ]
head.quantile.bin.3 = expression.data.head[expression.data.head$log2FC.quantile.CIs == 3, ]
head.quantile.bin.4 = expression.data.head[expression.data.head$log2FC.quantile.CIs == 4, ]
head.quantile.bin.5 = expression.data.head[expression.data.head$log2FC.quantile.CIs == 5, ]


# Difference between biased and unbiased bins

# Fractions in each quantile
body.bin1fraction = (nrow(body.quantile.bin.1[body.quantile.bin.1$sig.hit == 1,])) / ( nrow(body.quantile.bin.1[body.quantile.bin.1$sig.hit == 0,]) + nrow(body.quantile.bin.1[body.quantile.bin.1$sig.hit == 1,]))
body.bin2fraction = (nrow(body.quantile.bin.2[body.quantile.bin.2$sig.hit == 1,])) / ( nrow(body.quantile.bin.2[body.quantile.bin.2$sig.hit == 0,]) + nrow(body.quantile.bin.2[body.quantile.bin.2$sig.hit == 1,]))
body.bin3fraction = (nrow(body.quantile.bin.3[body.quantile.bin.3$sig.hit == 1,])) / ( nrow(body.quantile.bin.3[body.quantile.bin.3$sig.hit == 0,]) + nrow(body.quantile.bin.3[body.quantile.bin.3$sig.hit == 1,]))
body.bin4fraction = (nrow(body.quantile.bin.4[body.quantile.bin.4$sig.hit == 1,])) / ( nrow(body.quantile.bin.4[body.quantile.bin.4$sig.hit == 0,]) + nrow(body.quantile.bin.4[body.quantile.bin.4$sig.hit == 1,]))
body.bin5fraction = (nrow(body.quantile.bin.5[body.quantile.bin.5$sig.hit == 1,])) / ( nrow(body.quantile.bin.5[body.quantile.bin.5$sig.hit == 0,]) + nrow(body.quantile.bin.5[body.quantile.bin.5$sig.hit == 1,]))

head.bin1fraction = (nrow(head.quantile.bin.1[head.quantile.bin.1$sig.hit == 1,])) / ( nrow(head.quantile.bin.1[head.quantile.bin.1$sig.hit == 0,]) + nrow(head.quantile.bin.1[head.quantile.bin.1$sig.hit == 1,]))
head.bin2fraction = (nrow(head.quantile.bin.2[head.quantile.bin.2$sig.hit == 1,])) / ( nrow(head.quantile.bin.2[head.quantile.bin.2$sig.hit == 0,]) + nrow(head.quantile.bin.2[head.quantile.bin.2$sig.hit == 1,]))
head.bin3fraction = (nrow(head.quantile.bin.3[head.quantile.bin.3$sig.hit == 1,])) / ( nrow(head.quantile.bin.3[head.quantile.bin.3$sig.hit == 0,]) + nrow(head.quantile.bin.3[head.quantile.bin.3$sig.hit == 1,]))
head.bin4fraction = (nrow(head.quantile.bin.4[head.quantile.bin.4$sig.hit == 1,])) / ( nrow(head.quantile.bin.4[head.quantile.bin.4$sig.hit == 0,]) + nrow(head.quantile.bin.4[head.quantile.bin.4$sig.hit == 1,]))
head.bin5fraction = (nrow(head.quantile.bin.5[head.quantile.bin.5$sig.hit == 1,])) / ( nrow(head.quantile.bin.5[head.quantile.bin.5$sig.hit == 0,]) + nrow(head.quantile.bin.5[head.quantile.bin.5$sig.hit == 1,]))


body.df.fraction.difference = c( (body.bin1fraction - body.bin3fraction), (body.bin2fraction - body.bin3fraction), (body.bin4fraction - body.bin3fraction), (body.bin5fraction - body.bin3fraction) )
head.df.fraction.difference = c( (head.bin1fraction - head.bin3fraction), (head.bin2fraction - head.bin3fraction), (head.bin4fraction - head.bin3fraction), (head.bin5fraction - head.bin3fraction) )

# Body
body.fraction.difference.1.3 = vector(mode = "numeric", length = 10000)
body.fraction.difference.2.3 = vector(mode = "numeric", length = 10000)
body.fraction.difference.4.3 = vector(mode = "numeric", length = 10000)
body.fraction.difference.5.3 = vector(mode = "numeric", length = 10000)

# Body
head.fraction.difference.1.3 = vector(mode = "numeric", length = 10000)
head.fraction.difference.2.3 = vector(mode = "numeric", length = 10000)
head.fraction.difference.4.3 = vector(mode = "numeric", length = 10000)
head.fraction.difference.5.3 = vector(mode = "numeric", length = 10000)


# Resampling
for (i in 1:10000){

  sample.body.quantile1 = sample(body.quantile.bin.1$sig.hit, nrow(body.quantile.bin.1), replace = TRUE)
  sample.body.quantile2 = sample(body.quantile.bin.2$sig.hit, nrow(body.quantile.bin.2), replace = TRUE)
  sample.body.quantile3 = sample(body.quantile.bin.3$sig.hit, nrow(body.quantile.bin.3), replace = TRUE)
  sample.body.quantile4 = sample(body.quantile.bin.4$sig.hit, nrow(body.quantile.bin.4), replace = TRUE)
  sample.body.quantile5 = sample(body.quantile.bin.5$sig.hit, nrow(body.quantile.bin.5), replace = TRUE)

  sample.head.quantile1 = sample(head.quantile.bin.1$sig.hit, nrow(head.quantile.bin.1), replace = TRUE)
  sample.head.quantile2 = sample(head.quantile.bin.2$sig.hit, nrow(head.quantile.bin.2), replace = TRUE)
  sample.head.quantile3 = sample(head.quantile.bin.3$sig.hit, nrow(head.quantile.bin.3), replace = TRUE)
  sample.head.quantile4 = sample(head.quantile.bin.4$sig.hit, nrow(head.quantile.bin.4), replace = TRUE)
  sample.head.quantile5 = sample(head.quantile.bin.5$sig.hit, nrow(head.quantile.bin.5), replace = TRUE)

  body.quantile.1.fraction = length(sample.body.quantile1[sample.body.quantile1 == 1]) / (length(sample.body.quantile1[sample.body.quantile1 == 0]) + length(sample.body.quantile1[sample.body.quantile1 == 1]))
  body.quantile.2.fraction = length(sample.body.quantile2[sample.body.quantile2 == 1]) / (length(sample.body.quantile2[sample.body.quantile2 == 0]) + length(sample.body.quantile2[sample.body.quantile2 == 1]))
  body.quantile.3.fraction = length(sample.body.quantile3[sample.body.quantile3 == 1]) / (length(sample.body.quantile3[sample.body.quantile3 == 0]) + length(sample.body.quantile3[sample.body.quantile3 == 1]))
  body.quantile.4.fraction = length(sample.body.quantile4[sample.body.quantile4 == 1]) / (length(sample.body.quantile4[sample.body.quantile4 == 0]) + length(sample.body.quantile4[sample.body.quantile4 == 1]))
  body.quantile.5.fraction = length(sample.body.quantile5[sample.body.quantile5 == 1]) / (length(sample.body.quantile5[sample.body.quantile5 == 0]) + length(sample.body.quantile5[sample.body.quantile5 == 1]))

  head.quantile.1.fraction = length(sample.head.quantile1[sample.head.quantile1 == 1]) / (length(sample.head.quantile1[sample.head.quantile1 == 0]) + length(sample.head.quantile1[sample.head.quantile1 == 1]))
  head.quantile.2.fraction = length(sample.head.quantile2[sample.head.quantile2 == 1]) / (length(sample.head.quantile2[sample.head.quantile2 == 0]) + length(sample.head.quantile2[sample.head.quantile2 == 1]))
  head.quantile.3.fraction = length(sample.head.quantile3[sample.head.quantile3 == 1]) / (length(sample.head.quantile3[sample.head.quantile3 == 0]) + length(sample.head.quantile3[sample.head.quantile3 == 1]))
  head.quantile.4.fraction = length(sample.head.quantile4[sample.head.quantile4 == 1]) / (length(sample.head.quantile4[sample.head.quantile4 == 0]) + length(sample.head.quantile4[sample.head.quantile4 == 1]))
  head.quantile.5.fraction = length(sample.head.quantile5[sample.head.quantile5 == 1]) / (length(sample.head.quantile5[sample.head.quantile5 == 0]) + length(sample.head.quantile5[sample.head.quantile5 == 1]))

  body.fraction.difference.1.3[i] = body.quantile.1.fraction - body.quantile.3.fraction
  body.fraction.difference.2.3[i] = body.quantile.2.fraction - body.quantile.3.fraction
  body.fraction.difference.4.3[i] = body.quantile.4.fraction - body.quantile.3.fraction
  body.fraction.difference.5.3[i] = body.quantile.5.fraction - body.quantile.3.fraction

  head.fraction.difference.1.3[i] = head.quantile.1.fraction - head.quantile.3.fraction
  head.fraction.difference.2.3[i] = head.quantile.2.fraction - head.quantile.3.fraction
  head.fraction.difference.4.3[i] = head.quantile.4.fraction - head.quantile.3.fraction
  head.fraction.difference.5.3[i] = head.quantile.5.fraction - head.quantile.3.fraction

  print (i)
}



###
# Second plot will be the fraction of genes in gene expression quantiles that are significantly DEU or split by  average gene expression

# Subset quantiles of gene expression
body.quantile.bin.1.lowexp = expression.data.body[expression.data.body$log2FC.quantile == 1 & expression.data.body$gene.expression.quantile == 1, ]
body.quantile.bin.2.lowexp = expression.data.body[expression.data.body$log2FC.quantile == 2 & expression.data.body$gene.expression.quantile == 1, ]
body.quantile.bin.3.lowexp = expression.data.body[expression.data.body$log2FC.quantile == 3 & expression.data.body$gene.expression.quantile == 1, ]
body.quantile.bin.4.lowexp = expression.data.body[expression.data.body$log2FC.quantile == 4 & expression.data.body$gene.expression.quantile == 1, ]
body.quantile.bin.5.lowexp = expression.data.body[expression.data.body$log2FC.quantile == 5 & expression.data.body$gene.expression.quantile == 1, ]
body.quantile.bin.6.lowexp = expression.data.body[expression.data.body$log2FC.quantile == 6 & expression.data.body$gene.expression.quantile == 1, ]

body.quantile.bin.1.interexp = expression.data.body[expression.data.body$log2FC.quantile == 1 & expression.data.body$gene.expression.quantile == 2, ]
body.quantile.bin.2.interexp = expression.data.body[expression.data.body$log2FC.quantile == 2 & expression.data.body$gene.expression.quantile == 2, ]
body.quantile.bin.3.interexp = expression.data.body[expression.data.body$log2FC.quantile == 3 & expression.data.body$gene.expression.quantile == 2, ]
body.quantile.bin.4.interexp = expression.data.body[expression.data.body$log2FC.quantile == 4 & expression.data.body$gene.expression.quantile == 2, ]
body.quantile.bin.5.interexp = expression.data.body[expression.data.body$log2FC.quantile == 5 & expression.data.body$gene.expression.quantile == 2, ]
body.quantile.bin.6.interexp = expression.data.body[expression.data.body$log2FC.quantile == 6 & expression.data.body$gene.expression.quantile == 2, ]

body.quantile.bin.1.highexp = expression.data.body[expression.data.body$log2FC.quantile == 1 & expression.data.body$gene.expression.quantile == 3, ]
body.quantile.bin.2.highexp = expression.data.body[expression.data.body$log2FC.quantile == 2 & expression.data.body$gene.expression.quantile == 3, ]
body.quantile.bin.3.highexp = expression.data.body[expression.data.body$log2FC.quantile == 3 & expression.data.body$gene.expression.quantile == 3, ]
body.quantile.bin.4.highexp = expression.data.body[expression.data.body$log2FC.quantile == 4 & expression.data.body$gene.expression.quantile == 3, ]
body.quantile.bin.5.highexp = expression.data.body[expression.data.body$log2FC.quantile == 5 & expression.data.body$gene.expression.quantile == 3, ]
body.quantile.bin.6.highexp = expression.data.body[expression.data.body$log2FC.quantile == 6 & expression.data.body$gene.expression.quantile == 3, ]

head.quantile.bin.1.lowexp = expression.data.head[expression.data.head$log2FC.quantile == 1 & expression.data.head$gene.expression.quantile == 1, ]
head.quantile.bin.2.lowexp = expression.data.head[expression.data.head$log2FC.quantile == 2 & expression.data.head$gene.expression.quantile == 1, ]
head.quantile.bin.3.lowexp = expression.data.head[expression.data.head$log2FC.quantile == 3 & expression.data.head$gene.expression.quantile == 1, ]
head.quantile.bin.4.lowexp = expression.data.head[expression.data.head$log2FC.quantile == 4 & expression.data.head$gene.expression.quantile == 1, ]
head.quantile.bin.5.lowexp = expression.data.head[expression.data.head$log2FC.quantile == 5 & expression.data.head$gene.expression.quantile == 1, ]
head.quantile.bin.6.lowexp = expression.data.head[expression.data.head$log2FC.quantile == 6 & expression.data.head$gene.expression.quantile == 1, ]

head.quantile.bin.1.interexp = expression.data.head[expression.data.head$log2FC.quantile == 1 & expression.data.head$gene.expression.quantile == 2, ]
head.quantile.bin.2.interexp = expression.data.head[expression.data.head$log2FC.quantile == 2 & expression.data.head$gene.expression.quantile == 2, ]
head.quantile.bin.3.interexp = expression.data.head[expression.data.head$log2FC.quantile == 3 & expression.data.head$gene.expression.quantile == 2, ]
head.quantile.bin.4.interexp = expression.data.head[expression.data.head$log2FC.quantile == 4 & expression.data.head$gene.expression.quantile == 2, ]
head.quantile.bin.5.interexp = expression.data.head[expression.data.head$log2FC.quantile == 5 & expression.data.head$gene.expression.quantile == 2, ]
head.quantile.bin.6.interexp = expression.data.head[expression.data.head$log2FC.quantile == 6 & expression.data.head$gene.expression.quantile == 2, ]

head.quantile.bin.1.highexp = expression.data.head[expression.data.head$log2FC.quantile == 1 & expression.data.head$gene.expression.quantile == 3, ]
head.quantile.bin.2.highexp = expression.data.head[expression.data.head$log2FC.quantile == 2 & expression.data.head$gene.expression.quantile == 3, ]
head.quantile.bin.3.highexp = expression.data.head[expression.data.head$log2FC.quantile == 3 & expression.data.head$gene.expression.quantile == 3, ]
head.quantile.bin.4.highexp = expression.data.head[expression.data.head$log2FC.quantile == 4 & expression.data.head$gene.expression.quantile == 3, ]
head.quantile.bin.5.highexp = expression.data.head[expression.data.head$log2FC.quantile == 5 & expression.data.head$gene.expression.quantile == 3, ]
head.quantile.bin.6.highexp = expression.data.head[expression.data.head$log2FC.quantile == 6 & expression.data.head$gene.expression.quantile == 3, ]


# Fractions in each quantile
body.df.fraction = c( (nrow(body.quantile.bin.1.lowexp[body.quantile.bin.1.lowexp$sig.hit == 1,])) / (nrow(body.quantile.bin.1.lowexp[body.quantile.bin.1.lowexp$sig.hit == 0,]) + nrow(body.quantile.bin.1.lowexp[body.quantile.bin.1.lowexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.2.lowexp[body.quantile.bin.2.lowexp$sig.hit == 1,])) / (nrow(body.quantile.bin.2.lowexp[body.quantile.bin.2.lowexp$sig.hit == 0,]) + nrow(body.quantile.bin.2.lowexp[body.quantile.bin.2.lowexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.3.lowexp[body.quantile.bin.3.lowexp$sig.hit == 1,])) / (nrow(body.quantile.bin.3.lowexp[body.quantile.bin.3.lowexp$sig.hit == 0,]) + nrow(body.quantile.bin.3.lowexp[body.quantile.bin.3.lowexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.4.lowexp[body.quantile.bin.4.lowexp$sig.hit == 1,])) / (nrow(body.quantile.bin.4.lowexp[body.quantile.bin.4.lowexp$sig.hit == 0,]) + nrow(body.quantile.bin.4.lowexp[body.quantile.bin.4.lowexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.5.lowexp[body.quantile.bin.5.lowexp$sig.hit == 1,])) / (nrow(body.quantile.bin.5.lowexp[body.quantile.bin.5.lowexp$sig.hit == 0,]) + nrow(body.quantile.bin.5.lowexp[body.quantile.bin.5.lowexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.6.lowexp[body.quantile.bin.6.lowexp$sig.hit == 1,])) / (nrow(body.quantile.bin.6.lowexp[body.quantile.bin.6.lowexp$sig.hit == 0,]) + nrow(body.quantile.bin.6.lowexp[body.quantile.bin.6.lowexp$sig.hit == 1,])),

                      (nrow(body.quantile.bin.1.interexp[body.quantile.bin.1.interexp$sig.hit == 1,])) / (nrow(body.quantile.bin.1.interexp[body.quantile.bin.1.interexp$sig.hit == 0,]) + nrow(body.quantile.bin.1.interexp[body.quantile.bin.1.interexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.2.interexp[body.quantile.bin.2.interexp$sig.hit == 1,])) / (nrow(body.quantile.bin.2.interexp[body.quantile.bin.2.interexp$sig.hit == 0,]) + nrow(body.quantile.bin.2.interexp[body.quantile.bin.2.interexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.3.interexp[body.quantile.bin.3.interexp$sig.hit == 1,])) / (nrow(body.quantile.bin.3.interexp[body.quantile.bin.3.interexp$sig.hit == 0,]) + nrow(body.quantile.bin.3.interexp[body.quantile.bin.3.interexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.4.interexp[body.quantile.bin.4.interexp$sig.hit == 1,])) / (nrow(body.quantile.bin.4.interexp[body.quantile.bin.4.interexp$sig.hit == 0,]) + nrow(body.quantile.bin.4.interexp[body.quantile.bin.4.interexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.5.interexp[body.quantile.bin.5.interexp$sig.hit == 1,])) / (nrow(body.quantile.bin.5.interexp[body.quantile.bin.5.interexp$sig.hit == 0,]) + nrow(body.quantile.bin.5.interexp[body.quantile.bin.5.interexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.6.interexp[body.quantile.bin.6.interexp$sig.hit == 1,])) / (nrow(body.quantile.bin.6.interexp[body.quantile.bin.6.interexp$sig.hit == 0,]) + nrow(body.quantile.bin.6.interexp[body.quantile.bin.6.interexp$sig.hit == 1,])),

                      (nrow(body.quantile.bin.1.highexp[body.quantile.bin.1.highexp$sig.hit == 1,])) / (nrow(body.quantile.bin.1.highexp[body.quantile.bin.1.highexp$sig.hit == 0,]) + nrow(body.quantile.bin.1.highexp[body.quantile.bin.1.highexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.2.highexp[body.quantile.bin.2.highexp$sig.hit == 1,])) / (nrow(body.quantile.bin.2.highexp[body.quantile.bin.2.highexp$sig.hit == 0,]) + nrow(body.quantile.bin.2.highexp[body.quantile.bin.2.highexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.3.highexp[body.quantile.bin.3.highexp$sig.hit == 1,])) / (nrow(body.quantile.bin.3.highexp[body.quantile.bin.3.highexp$sig.hit == 0,]) + nrow(body.quantile.bin.3.highexp[body.quantile.bin.3.highexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.4.highexp[body.quantile.bin.4.highexp$sig.hit == 1,])) / (nrow(body.quantile.bin.4.highexp[body.quantile.bin.4.highexp$sig.hit == 0,]) + nrow(body.quantile.bin.4.highexp[body.quantile.bin.4.highexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.5.highexp[body.quantile.bin.5.highexp$sig.hit == 1,])) / (nrow(body.quantile.bin.5.highexp[body.quantile.bin.5.highexp$sig.hit == 0,]) + nrow(body.quantile.bin.5.highexp[body.quantile.bin.5.highexp$sig.hit == 1,])),
                      (nrow(body.quantile.bin.6.highexp[body.quantile.bin.6.highexp$sig.hit == 1,])) / (nrow(body.quantile.bin.6.highexp[body.quantile.bin.6.highexp$sig.hit == 0,]) + nrow(body.quantile.bin.6.highexp[body.quantile.bin.6.highexp$sig.hit == 1,])))

head.df.fraction = c( (nrow(head.quantile.bin.1.lowexp[head.quantile.bin.1.lowexp$sig.hit == 1,])) / (nrow(head.quantile.bin.1.lowexp[head.quantile.bin.1.lowexp$sig.hit == 0,]) + nrow(head.quantile.bin.1.lowexp[head.quantile.bin.1.lowexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.2.lowexp[head.quantile.bin.2.lowexp$sig.hit == 1,])) / (nrow(head.quantile.bin.2.lowexp[head.quantile.bin.2.lowexp$sig.hit == 0,]) + nrow(head.quantile.bin.2.lowexp[head.quantile.bin.2.lowexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.3.lowexp[head.quantile.bin.3.lowexp$sig.hit == 1,])) / (nrow(head.quantile.bin.3.lowexp[head.quantile.bin.3.lowexp$sig.hit == 0,]) + nrow(head.quantile.bin.3.lowexp[head.quantile.bin.3.lowexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.4.lowexp[head.quantile.bin.4.lowexp$sig.hit == 1,])) / (nrow(head.quantile.bin.4.lowexp[head.quantile.bin.4.lowexp$sig.hit == 0,]) + nrow(head.quantile.bin.4.lowexp[head.quantile.bin.4.lowexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.5.lowexp[head.quantile.bin.5.lowexp$sig.hit == 1,])) / (nrow(head.quantile.bin.5.lowexp[head.quantile.bin.5.lowexp$sig.hit == 0,]) + nrow(head.quantile.bin.5.lowexp[head.quantile.bin.5.lowexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.6.lowexp[head.quantile.bin.6.lowexp$sig.hit == 1,])) / (nrow(head.quantile.bin.6.lowexp[head.quantile.bin.6.lowexp$sig.hit == 0,]) + nrow(head.quantile.bin.6.lowexp[head.quantile.bin.6.lowexp$sig.hit == 1,])),

                      (nrow(head.quantile.bin.1.interexp[head.quantile.bin.1.interexp$sig.hit == 1,])) / (nrow(head.quantile.bin.1.interexp[head.quantile.bin.1.interexp$sig.hit == 0,]) + nrow(head.quantile.bin.1.interexp[head.quantile.bin.1.interexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.2.interexp[head.quantile.bin.2.interexp$sig.hit == 1,])) / (nrow(head.quantile.bin.2.interexp[head.quantile.bin.2.interexp$sig.hit == 0,]) + nrow(head.quantile.bin.2.interexp[head.quantile.bin.2.interexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.3.interexp[head.quantile.bin.3.interexp$sig.hit == 1,])) / (nrow(head.quantile.bin.3.interexp[head.quantile.bin.3.interexp$sig.hit == 0,]) + nrow(head.quantile.bin.3.interexp[head.quantile.bin.3.interexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.4.interexp[head.quantile.bin.4.interexp$sig.hit == 1,])) / (nrow(head.quantile.bin.4.interexp[head.quantile.bin.4.interexp$sig.hit == 0,]) + nrow(head.quantile.bin.4.interexp[head.quantile.bin.4.interexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.5.interexp[head.quantile.bin.5.interexp$sig.hit == 1,])) / (nrow(head.quantile.bin.5.interexp[head.quantile.bin.5.interexp$sig.hit == 0,]) + nrow(head.quantile.bin.5.interexp[head.quantile.bin.5.interexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.6.interexp[head.quantile.bin.6.interexp$sig.hit == 1,])) / (nrow(head.quantile.bin.6.interexp[head.quantile.bin.6.interexp$sig.hit == 0,]) + nrow(head.quantile.bin.6.interexp[head.quantile.bin.6.interexp$sig.hit == 1,])),

                      (nrow(head.quantile.bin.1.highexp[head.quantile.bin.1.highexp$sig.hit == 1,])) / (nrow(head.quantile.bin.1.highexp[head.quantile.bin.1.highexp$sig.hit == 0,]) + nrow(head.quantile.bin.1.highexp[head.quantile.bin.1.highexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.2.highexp[head.quantile.bin.2.highexp$sig.hit == 1,])) / (nrow(head.quantile.bin.2.highexp[head.quantile.bin.2.highexp$sig.hit == 0,]) + nrow(head.quantile.bin.2.highexp[head.quantile.bin.2.highexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.3.highexp[head.quantile.bin.3.highexp$sig.hit == 1,])) / (nrow(head.quantile.bin.3.highexp[head.quantile.bin.3.highexp$sig.hit == 0,]) + nrow(head.quantile.bin.3.highexp[head.quantile.bin.3.highexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.4.highexp[head.quantile.bin.4.highexp$sig.hit == 1,])) / (nrow(head.quantile.bin.4.highexp[head.quantile.bin.4.highexp$sig.hit == 0,]) + nrow(head.quantile.bin.4.highexp[head.quantile.bin.4.highexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.5.highexp[head.quantile.bin.5.highexp$sig.hit == 1,])) / (nrow(head.quantile.bin.5.highexp[head.quantile.bin.5.highexp$sig.hit == 0,]) + nrow(head.quantile.bin.5.highexp[head.quantile.bin.5.highexp$sig.hit == 1,])),
                      (nrow(head.quantile.bin.6.highexp[head.quantile.bin.6.highexp$sig.hit == 1,])) / (nrow(head.quantile.bin.6.highexp[head.quantile.bin.6.highexp$sig.hit == 0,]) + nrow(head.quantile.bin.6.highexp[head.quantile.bin.6.highexp$sig.hit == 1,])))

# Body Data
body.quantile.1.fraction.lowexp = vector(mode = "numeric", length = 10000)
body.quantile.2.fraction.lowexp = vector(mode = "numeric", length = 10000)
body.quantile.3.fraction.lowexp = vector(mode = "numeric", length = 10000)
body.quantile.4.fraction.lowexp = vector(mode = "numeric", length = 10000)
body.quantile.5.fraction.lowexp = vector(mode = "numeric", length = 10000)
body.quantile.6.fraction.lowexp = vector(mode = "numeric", length = 10000)
body.quantile.1.fraction.interexp = vector(mode = "numeric", length = 10000)
body.quantile.2.fraction.interexp = vector(mode = "numeric", length = 10000)
body.quantile.3.fraction.interexp = vector(mode = "numeric", length = 10000)
body.quantile.4.fraction.interexp = vector(mode = "numeric", length = 10000)
body.quantile.5.fraction.interexp = vector(mode = "numeric", length = 10000)
body.quantile.6.fraction.interexp = vector(mode = "numeric", length = 10000)
body.quantile.1.fraction.highexp = vector(mode = "numeric", length = 10000)
body.quantile.2.fraction.highexp = vector(mode = "numeric", length = 10000)
body.quantile.3.fraction.highexp = vector(mode = "numeric", length = 10000)
body.quantile.4.fraction.highexp = vector(mode = "numeric", length = 10000)
body.quantile.5.fraction.highexp = vector(mode = "numeric", length = 10000)
body.quantile.6.fraction.highexp = vector(mode = "numeric", length = 10000)

# Head Data
head.quantile.1.fraction.lowexp = vector(mode = "numeric", length = 10000)
head.quantile.2.fraction.lowexp = vector(mode = "numeric", length = 10000)
head.quantile.3.fraction.lowexp = vector(mode = "numeric", length = 10000)
head.quantile.4.fraction.lowexp = vector(mode = "numeric", length = 10000)
head.quantile.5.fraction.lowexp = vector(mode = "numeric", length = 10000)
head.quantile.6.fraction.lowexp = vector(mode = "numeric", length = 10000)
head.quantile.1.fraction.interexp = vector(mode = "numeric", length = 10000)
head.quantile.2.fraction.interexp = vector(mode = "numeric", length = 10000)
head.quantile.3.fraction.interexp = vector(mode = "numeric", length = 10000)
head.quantile.4.fraction.interexp = vector(mode = "numeric", length = 10000)
head.quantile.5.fraction.interexp = vector(mode = "numeric", length = 10000)
head.quantile.6.fraction.interexp = vector(mode = "numeric", length = 10000)
head.quantile.1.fraction.highexp = vector(mode = "numeric", length = 10000)
head.quantile.2.fraction.highexp = vector(mode = "numeric", length = 10000)
head.quantile.3.fraction.highexp = vector(mode = "numeric", length = 10000)
head.quantile.4.fraction.highexp = vector(mode = "numeric", length = 10000)
head.quantile.5.fraction.highexp = vector(mode = "numeric", length = 10000)
head.quantile.6.fraction.highexp = vector(mode = "numeric", length = 10000)

# Resampling
for (i in 1:10000){

  sample.body.quantile1.lowexp = sample(body.quantile.bin.1.lowexp$sig.hit, nrow(body.quantile.bin.1.lowexp), replace = TRUE)
  sample.body.quantile2.lowexp = sample(body.quantile.bin.2.lowexp$sig.hit, nrow(body.quantile.bin.2.lowexp), replace = TRUE)
  sample.body.quantile3.lowexp = sample(body.quantile.bin.3.lowexp$sig.hit, nrow(body.quantile.bin.3.lowexp), replace = TRUE)
  sample.body.quantile4.lowexp = sample(body.quantile.bin.4.lowexp$sig.hit, nrow(body.quantile.bin.4.lowexp), replace = TRUE)
  sample.body.quantile5.lowexp = sample(body.quantile.bin.5.lowexp$sig.hit, nrow(body.quantile.bin.5.lowexp), replace = TRUE)
  sample.body.quantile6.lowexp = sample(body.quantile.bin.6.lowexp$sig.hit, nrow(body.quantile.bin.6.lowexp), replace = TRUE)
  sample.body.quantile1.interexp = sample(body.quantile.bin.1.interexp$sig.hit, nrow(body.quantile.bin.1.interexp), replace = TRUE)
  sample.body.quantile2.interexp = sample(body.quantile.bin.2.interexp$sig.hit, nrow(body.quantile.bin.2.interexp), replace = TRUE)
  sample.body.quantile3.interexp = sample(body.quantile.bin.3.interexp$sig.hit, nrow(body.quantile.bin.3.interexp), replace = TRUE)
  sample.body.quantile4.interexp = sample(body.quantile.bin.4.interexp$sig.hit, nrow(body.quantile.bin.4.interexp), replace = TRUE)
  sample.body.quantile5.interexp = sample(body.quantile.bin.5.interexp$sig.hit, nrow(body.quantile.bin.5.interexp), replace = TRUE)
  sample.body.quantile6.interexp = sample(body.quantile.bin.6.interexp$sig.hit, nrow(body.quantile.bin.6.interexp), replace = TRUE)
  sample.body.quantile1.highexp = sample(body.quantile.bin.1.highexp$sig.hit, nrow(body.quantile.bin.1.highexp), replace = TRUE)
  sample.body.quantile2.highexp = sample(body.quantile.bin.2.highexp$sig.hit, nrow(body.quantile.bin.2.highexp), replace = TRUE)
  sample.body.quantile3.highexp = sample(body.quantile.bin.3.highexp$sig.hit, nrow(body.quantile.bin.3.highexp), replace = TRUE)
  sample.body.quantile4.highexp = sample(body.quantile.bin.4.highexp$sig.hit, nrow(body.quantile.bin.4.highexp), replace = TRUE)
  sample.body.quantile5.highexp = sample(body.quantile.bin.5.highexp$sig.hit, nrow(body.quantile.bin.5.highexp), replace = TRUE)
  sample.body.quantile6.highexp = sample(body.quantile.bin.6.highexp$sig.hit, nrow(body.quantile.bin.6.highexp), replace = TRUE)

  sample.head.quantile1.lowexp = sample(head.quantile.bin.1.lowexp$sig.hit, nrow(head.quantile.bin.1.lowexp), replace = TRUE)
  sample.head.quantile2.lowexp = sample(head.quantile.bin.2.lowexp$sig.hit, nrow(head.quantile.bin.2.lowexp), replace = TRUE)
  sample.head.quantile3.lowexp = sample(head.quantile.bin.3.lowexp$sig.hit, nrow(head.quantile.bin.3.lowexp), replace = TRUE)
  sample.head.quantile4.lowexp = sample(head.quantile.bin.4.lowexp$sig.hit, nrow(head.quantile.bin.4.lowexp), replace = TRUE)
  sample.head.quantile5.lowexp = sample(head.quantile.bin.5.lowexp$sig.hit, nrow(head.quantile.bin.5.lowexp), replace = TRUE)
  sample.head.quantile6.lowexp = sample(head.quantile.bin.6.lowexp$sig.hit, nrow(head.quantile.bin.6.lowexp), replace = TRUE)
  sample.head.quantile1.interexp = sample(head.quantile.bin.1.interexp$sig.hit, nrow(head.quantile.bin.1.interexp), replace = TRUE)
  sample.head.quantile2.interexp = sample(head.quantile.bin.2.interexp$sig.hit, nrow(head.quantile.bin.2.interexp), replace = TRUE)
  sample.head.quantile3.interexp = sample(head.quantile.bin.3.interexp$sig.hit, nrow(head.quantile.bin.3.interexp), replace = TRUE)
  sample.head.quantile4.interexp = sample(head.quantile.bin.4.interexp$sig.hit, nrow(head.quantile.bin.4.interexp), replace = TRUE)
  sample.head.quantile5.interexp = sample(head.quantile.bin.5.interexp$sig.hit, nrow(head.quantile.bin.5.interexp), replace = TRUE)
  sample.head.quantile6.interexp = sample(head.quantile.bin.6.interexp$sig.hit, nrow(head.quantile.bin.6.interexp), replace = TRUE)
  sample.head.quantile1.highexp = sample(head.quantile.bin.1.highexp$sig.hit, nrow(head.quantile.bin.1.highexp), replace = TRUE)
  sample.head.quantile2.highexp = sample(head.quantile.bin.2.highexp$sig.hit, nrow(head.quantile.bin.2.highexp), replace = TRUE)
  sample.head.quantile3.highexp = sample(head.quantile.bin.3.highexp$sig.hit, nrow(head.quantile.bin.3.highexp), replace = TRUE)
  sample.head.quantile4.highexp = sample(head.quantile.bin.4.highexp$sig.hit, nrow(head.quantile.bin.4.highexp), replace = TRUE)
  sample.head.quantile5.highexp = sample(head.quantile.bin.5.highexp$sig.hit, nrow(head.quantile.bin.5.highexp), replace = TRUE)
  sample.head.quantile6.highexp = sample(head.quantile.bin.6.highexp$sig.hit, nrow(head.quantile.bin.6.highexp), replace = TRUE)

  body.quantile.1.fraction.lowexp[i] = length(sample.body.quantile1.lowexp[sample.body.quantile1.lowexp == 1]) / (length(sample.body.quantile1.lowexp[sample.body.quantile1.lowexp == 0]) + length(sample.body.quantile1.lowexp[sample.body.quantile1.lowexp == 1]))
  body.quantile.2.fraction.lowexp[i] = length(sample.body.quantile2.lowexp[sample.body.quantile2.lowexp == 1]) / (length(sample.body.quantile2.lowexp[sample.body.quantile2.lowexp == 0]) + length(sample.body.quantile2.lowexp[sample.body.quantile2.lowexp == 1]))
  body.quantile.3.fraction.lowexp[i] = length(sample.body.quantile3.lowexp[sample.body.quantile3.lowexp == 1]) / (length(sample.body.quantile3.lowexp[sample.body.quantile3.lowexp == 0]) + length(sample.body.quantile3.lowexp[sample.body.quantile3.lowexp == 1]))
  body.quantile.4.fraction.lowexp[i] = length(sample.body.quantile4.lowexp[sample.body.quantile4.lowexp == 1]) / (length(sample.body.quantile4.lowexp[sample.body.quantile4.lowexp == 0]) + length(sample.body.quantile4.lowexp[sample.body.quantile4.lowexp == 1]))
  body.quantile.5.fraction.lowexp[i] = length(sample.body.quantile5.lowexp[sample.body.quantile5.lowexp == 1]) / (length(sample.body.quantile5.lowexp[sample.body.quantile5.lowexp == 0]) + length(sample.body.quantile5.lowexp[sample.body.quantile5.lowexp == 1]))
  body.quantile.6.fraction.lowexp[i] = length(sample.body.quantile6.lowexp[sample.body.quantile6.lowexp == 1]) / (length(sample.body.quantile6.lowexp[sample.body.quantile6.lowexp == 0]) + length(sample.body.quantile6.lowexp[sample.body.quantile6.lowexp == 1]))

  body.quantile.1.fraction.interexp[i] = length(sample.body.quantile1.interexp[sample.body.quantile1.interexp == 1]) / (length(sample.body.quantile1.interexp[sample.body.quantile1.interexp == 0]) + length(sample.body.quantile1.interexp[sample.body.quantile1.interexp == 1]))
  body.quantile.2.fraction.interexp[i] = length(sample.body.quantile2.interexp[sample.body.quantile2.interexp == 1]) / (length(sample.body.quantile2.interexp[sample.body.quantile2.interexp == 0]) + length(sample.body.quantile2.interexp[sample.body.quantile2.interexp == 1]))
  body.quantile.3.fraction.interexp[i] = length(sample.body.quantile3.interexp[sample.body.quantile3.interexp == 1]) / (length(sample.body.quantile3.interexp[sample.body.quantile3.interexp == 0]) + length(sample.body.quantile3.interexp[sample.body.quantile3.interexp == 1]))
  body.quantile.4.fraction.interexp[i] = length(sample.body.quantile4.interexp[sample.body.quantile4.interexp == 1]) / (length(sample.body.quantile4.interexp[sample.body.quantile4.interexp == 0]) + length(sample.body.quantile4.interexp[sample.body.quantile4.interexp == 1]))
  body.quantile.5.fraction.interexp[i] = length(sample.body.quantile5.interexp[sample.body.quantile5.interexp == 1]) / (length(sample.body.quantile5.interexp[sample.body.quantile5.interexp == 0]) + length(sample.body.quantile5.interexp[sample.body.quantile5.interexp == 1]))
  body.quantile.6.fraction.interexp[i] = length(sample.body.quantile6.interexp[sample.body.quantile6.interexp == 1]) / (length(sample.body.quantile6.interexp[sample.body.quantile6.interexp == 0]) + length(sample.body.quantile6.interexp[sample.body.quantile6.interexp == 1]))

  body.quantile.1.fraction.highexp[i] = length(sample.body.quantile1.highexp[sample.body.quantile1.highexp == 1]) / (length(sample.body.quantile1.highexp[sample.body.quantile1.highexp == 0]) + length(sample.body.quantile1.highexp[sample.body.quantile1.highexp == 1]))
  body.quantile.2.fraction.highexp[i] = length(sample.body.quantile2.highexp[sample.body.quantile2.highexp == 1]) / (length(sample.body.quantile2.highexp[sample.body.quantile2.highexp == 0]) + length(sample.body.quantile2.highexp[sample.body.quantile2.highexp == 1]))
  body.quantile.3.fraction.highexp[i] = length(sample.body.quantile3.highexp[sample.body.quantile3.highexp == 1]) / (length(sample.body.quantile3.highexp[sample.body.quantile3.highexp == 0]) + length(sample.body.quantile3.highexp[sample.body.quantile3.highexp == 1]))
  body.quantile.4.fraction.highexp[i] = length(sample.body.quantile4.highexp[sample.body.quantile4.highexp == 1]) / (length(sample.body.quantile4.highexp[sample.body.quantile4.highexp == 0]) + length(sample.body.quantile4.highexp[sample.body.quantile4.highexp == 1]))
  body.quantile.5.fraction.highexp[i] = length(sample.body.quantile5.highexp[sample.body.quantile5.highexp == 1]) / (length(sample.body.quantile5.highexp[sample.body.quantile5.highexp == 0]) + length(sample.body.quantile5.highexp[sample.body.quantile5.highexp == 1]))
  body.quantile.6.fraction.highexp[i] = length(sample.body.quantile6.highexp[sample.body.quantile6.highexp == 1]) / (length(sample.body.quantile6.highexp[sample.body.quantile6.highexp == 0]) + length(sample.body.quantile6.highexp[sample.body.quantile6.highexp == 1]))

  head.quantile.1.fraction.lowexp[i] = length(sample.head.quantile1.lowexp[sample.head.quantile1.lowexp == 1]) / (length(sample.head.quantile1.lowexp[sample.head.quantile1.lowexp == 0]) + length(sample.head.quantile1.lowexp[sample.head.quantile1.lowexp == 1]))
  head.quantile.2.fraction.lowexp[i] = length(sample.head.quantile2.lowexp[sample.head.quantile2.lowexp == 1]) / (length(sample.head.quantile2.lowexp[sample.head.quantile2.lowexp == 0]) + length(sample.head.quantile2.lowexp[sample.head.quantile2.lowexp == 1]))
  head.quantile.3.fraction.lowexp[i] = length(sample.head.quantile3.lowexp[sample.head.quantile3.lowexp == 1]) / (length(sample.head.quantile3.lowexp[sample.head.quantile3.lowexp == 0]) + length(sample.head.quantile3.lowexp[sample.head.quantile3.lowexp == 1]))
  head.quantile.4.fraction.lowexp[i] = length(sample.head.quantile4.lowexp[sample.head.quantile4.lowexp == 1]) / (length(sample.head.quantile4.lowexp[sample.head.quantile4.lowexp == 0]) + length(sample.head.quantile4.lowexp[sample.head.quantile4.lowexp == 1]))
  head.quantile.5.fraction.lowexp[i] = length(sample.head.quantile5.lowexp[sample.head.quantile5.lowexp == 1]) / (length(sample.head.quantile5.lowexp[sample.head.quantile5.lowexp == 0]) + length(sample.head.quantile5.lowexp[sample.head.quantile5.lowexp == 1]))
  head.quantile.6.fraction.lowexp[i] = length(sample.head.quantile6.lowexp[sample.head.quantile6.lowexp == 1]) / (length(sample.head.quantile6.lowexp[sample.head.quantile6.lowexp == 0]) + length(sample.head.quantile6.lowexp[sample.head.quantile6.lowexp == 1]))

  head.quantile.1.fraction.interexp[i] = length(sample.head.quantile1.interexp[sample.head.quantile1.interexp == 1]) / (length(sample.head.quantile1.interexp[sample.head.quantile1.interexp == 0]) + length(sample.head.quantile1.interexp[sample.head.quantile1.interexp == 1]))
  head.quantile.2.fraction.interexp[i] = length(sample.head.quantile2.interexp[sample.head.quantile2.interexp == 1]) / (length(sample.head.quantile2.interexp[sample.head.quantile2.interexp == 0]) + length(sample.head.quantile2.interexp[sample.head.quantile2.interexp == 1]))
  head.quantile.3.fraction.interexp[i] = length(sample.head.quantile3.interexp[sample.head.quantile3.interexp == 1]) / (length(sample.head.quantile3.interexp[sample.head.quantile3.interexp == 0]) + length(sample.head.quantile3.interexp[sample.head.quantile3.interexp == 1]))
  head.quantile.4.fraction.interexp[i] = length(sample.head.quantile4.interexp[sample.head.quantile4.interexp == 1]) / (length(sample.head.quantile4.interexp[sample.head.quantile4.interexp == 0]) + length(sample.head.quantile4.interexp[sample.head.quantile4.interexp == 1]))
  head.quantile.5.fraction.interexp[i] = length(sample.head.quantile5.interexp[sample.head.quantile5.interexp == 1]) / (length(sample.head.quantile5.interexp[sample.head.quantile5.interexp == 0]) + length(sample.head.quantile5.interexp[sample.head.quantile5.interexp == 1]))
  head.quantile.6.fraction.interexp[i] = length(sample.head.quantile6.interexp[sample.head.quantile6.interexp == 1]) / (length(sample.head.quantile6.interexp[sample.head.quantile6.interexp == 0]) + length(sample.head.quantile6.interexp[sample.head.quantile6.interexp == 1]))

  head.quantile.1.fraction.highexp[i] = length(sample.head.quantile1.highexp[sample.head.quantile1.highexp == 1]) / (length(sample.head.quantile1.highexp[sample.head.quantile1.highexp == 0]) + length(sample.head.quantile1.highexp[sample.head.quantile1.highexp == 1]))
  head.quantile.2.fraction.highexp[i] = length(sample.head.quantile2.highexp[sample.head.quantile2.highexp == 1]) / (length(sample.head.quantile2.highexp[sample.head.quantile2.highexp == 0]) + length(sample.head.quantile2.highexp[sample.head.quantile2.highexp == 1]))
  head.quantile.3.fraction.highexp[i] = length(sample.head.quantile3.highexp[sample.head.quantile3.highexp == 1]) / (length(sample.head.quantile3.highexp[sample.head.quantile3.highexp == 0]) + length(sample.head.quantile3.highexp[sample.head.quantile3.highexp == 1]))
  head.quantile.4.fraction.highexp[i] = length(sample.head.quantile4.highexp[sample.head.quantile4.highexp == 1]) / (length(sample.head.quantile4.highexp[sample.head.quantile4.highexp == 0]) + length(sample.head.quantile4.highexp[sample.head.quantile4.highexp == 1]))
  head.quantile.5.fraction.highexp[i] = length(sample.head.quantile5.highexp[sample.head.quantile5.highexp == 1]) / (length(sample.head.quantile5.highexp[sample.head.quantile5.highexp == 0]) + length(sample.head.quantile5.highexp[sample.head.quantile5.highexp == 1]))
  head.quantile.6.fraction.highexp[i] = length(sample.head.quantile6.highexp[sample.head.quantile6.highexp == 1]) / (length(sample.head.quantile6.highexp[sample.head.quantile6.highexp == 0]) + length(sample.head.quantile6.highexp[sample.head.quantile6.highexp == 1]))

  print (i)

}

body.lower.CI = as.vector( c( quantile(body.quantile.1.fraction.lowexp, 0.05)[1],
                              quantile(body.quantile.2.fraction.lowexp, 0.05)[1],
                              quantile(body.quantile.3.fraction.lowexp, 0.05)[1],
                              quantile(body.quantile.4.fraction.lowexp, 0.05)[1],
                              quantile(body.quantile.5.fraction.lowexp, 0.05)[1],
                              quantile(body.quantile.6.fraction.lowexp, 0.05)[1],
                              quantile(body.quantile.1.fraction.interexp, 0.05)[1],
                              quantile(body.quantile.2.fraction.interexp, 0.05)[1],
                              quantile(body.quantile.3.fraction.interexp, 0.05)[1],
                              quantile(body.quantile.4.fraction.interexp, 0.05)[1],
                              quantile(body.quantile.5.fraction.interexp, 0.05)[1],
                              quantile(body.quantile.6.fraction.interexp, 0.05)[1],
                              quantile(body.quantile.1.fraction.highexp, 0.05)[1],
                              quantile(body.quantile.2.fraction.highexp, 0.05)[1],
                              quantile(body.quantile.3.fraction.highexp, 0.05)[1],
                              quantile(body.quantile.4.fraction.highexp, 0.05)[1],
                              quantile(body.quantile.5.fraction.highexp, 0.05)[1],
                              quantile(body.quantile.6.fraction.highexp, 0.05)[1]))

#
body.upper.CI = as.vector( c( quantile(body.quantile.1.fraction.lowexp, 0.95)[1],
                              quantile(body.quantile.2.fraction.lowexp, 0.95)[1],
                              quantile(body.quantile.3.fraction.lowexp, 0.95)[1],
                              quantile(body.quantile.4.fraction.lowexp, 0.95)[1],
                              quantile(body.quantile.5.fraction.lowexp, 0.95)[1],
                              quantile(body.quantile.6.fraction.lowexp, 0.95)[1],
                              quantile(body.quantile.1.fraction.interexp, 0.95)[1],
                              quantile(body.quantile.2.fraction.interexp, 0.95)[1],
                              quantile(body.quantile.3.fraction.interexp, 0.95)[1],
                              quantile(body.quantile.4.fraction.interexp, 0.95)[1],
                              quantile(body.quantile.5.fraction.interexp, 0.95)[1],
                              quantile(body.quantile.6.fraction.interexp, 0.95)[1],
                              quantile(body.quantile.1.fraction.highexp, 0.95)[1],
                              quantile(body.quantile.2.fraction.highexp, 0.95)[1],
                              quantile(body.quantile.3.fraction.highexp, 0.95)[1],
                              quantile(body.quantile.4.fraction.highexp, 0.95)[1],
                              quantile(body.quantile.5.fraction.highexp, 0.95)[1],
                              quantile(body.quantile.6.fraction.highexp, 0.95)[1]))

#

head.lower.CI = as.vector( c( quantile(head.quantile.1.fraction.lowexp, 0.05)[1],
                              quantile(head.quantile.2.fraction.lowexp, 0.05)[1],
                              quantile(head.quantile.3.fraction.lowexp, 0.05)[1],
                              quantile(head.quantile.4.fraction.lowexp, 0.05)[1],
                              quantile(head.quantile.5.fraction.lowexp, 0.05)[1],
                              quantile(head.quantile.6.fraction.lowexp, 0.05)[1],
                              quantile(head.quantile.1.fraction.interexp, 0.05)[1],
                              quantile(head.quantile.2.fraction.interexp, 0.05)[1],
                              quantile(head.quantile.3.fraction.interexp, 0.05)[1],
                              quantile(head.quantile.4.fraction.interexp, 0.05)[1],
                              quantile(head.quantile.5.fraction.interexp, 0.05)[1],
                              quantile(head.quantile.6.fraction.interexp, 0.05)[1],
                              quantile(head.quantile.1.fraction.highexp, 0.05)[1],
                              quantile(head.quantile.2.fraction.highexp, 0.05)[1],
                              quantile(head.quantile.3.fraction.highexp, 0.05)[1],
                              quantile(head.quantile.4.fraction.highexp, 0.05)[1],
                              quantile(head.quantile.5.fraction.highexp, 0.05)[1],
                              quantile(head.quantile.6.fraction.highexp, 0.05)[1]))


head.upper.CI = as.vector( c( quantile(head.quantile.1.fraction.lowexp, 0.95)[1],
                              quantile(head.quantile.2.fraction.lowexp, 0.95)[1],
                              quantile(head.quantile.3.fraction.lowexp, 0.95)[1],
                              quantile(head.quantile.4.fraction.lowexp, 0.95)[1],
                              quantile(head.quantile.5.fraction.lowexp, 0.95)[1],
                              quantile(head.quantile.6.fraction.lowexp, 0.95)[1],
                              quantile(head.quantile.1.fraction.interexp, 0.95)[1],
                              quantile(head.quantile.2.fraction.interexp, 0.95)[1],
                              quantile(head.quantile.3.fraction.interexp, 0.95)[1],
                              quantile(head.quantile.4.fraction.interexp, 0.95)[1],
                              quantile(head.quantile.5.fraction.interexp, 0.95)[1],
                              quantile(head.quantile.6.fraction.interexp, 0.95)[1],
                              quantile(head.quantile.1.fraction.highexp, 0.95)[1],
                              quantile(head.quantile.2.fraction.highexp, 0.95)[1],
                              quantile(head.quantile.3.fraction.highexp, 0.95)[1],
                              quantile(head.quantile.4.fraction.highexp, 0.95)[1],
                              quantile(head.quantile.5.fraction.highexp, 0.95)[1],
                              quantile(head.quantile.6.fraction.highexp, 0.95)[1]))

body.gene.expression.df = as.data.frame(cbind(body.df.fraction, body.lower.CI, body.upper.CI))
body.gene.expression.df$log2FCquantile = (rep(seq(1,6,1), 3))
body.gene.expression.df$expression.quantile = rep(1:3, each = 6)
body.gene.expression.df$tissue = "body"
body.gene.expression.df$expbias = c(rep("FB",3), rep("MB",3))
colnames(body.gene.expression.df) = c("fraction", "lower.CI", "upper.CI", "log2F.quantile", "average.expression.quantile", "tissue", "expbias")
head.gene.expression.df = as.data.frame(cbind(head.df.fraction, head.lower.CI, head.upper.CI))
head.gene.expression.df$quantile = (rep(seq(1,6,1), 3))
head.gene.expression.df$expression.quantile = rep(1:3, each = 6)
head.gene.expression.df$tissue = "head"
head.gene.expression.df$expbias = c(rep("FB",3), rep("MB",3))
colnames(head.gene.expression.df) = c("fraction", "lower.CI", "upper.CI", "log2F.quantile", "average.expression.quantile", "tissue","expbias")

gene.expression.df = rbind(body.gene.expression.df,head.gene.expression.df)

# Plotting fractions -- Plot with free y scale
fraction.of.genes = ggplot(gene.expression.df, aes(y=fraction, x = as.factor(log2F.quantile), colour = expbias, shape = as.factor(average.expression.quantile))) +
                           geom_point(aes(x = as.factor(log2F.quantile), y=fraction, colour = expbias, shape = as.factor(average.expression.quantile)), size = 5,
                           position = position_dodge(width = 0.5)) +
                           geom_errorbar(aes(ymin = lower.CI, ymax = upper.CI, x = as.factor(log2F.quantile)),
                           width = 0, position = position_dodge(width = 0.5)) +
                           theme_bw()  + scale_colour_manual(values = c("#6361f2","#f29161")) +
                           theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                 panel.border = element_rect(colour = "black", fill=NA, size=1),
                                 axis.text = element_text(face="bold", color="black",size=15, family = "Helvetica"),
                                 axis.title=element_blank(), legend.position = "none") +
                          facet_grid(tissue~., scales = "free")
pdf("/plas1/amardeep.singh/tmp/gene.expression.fractions_free_scale.parsed.by.sexbias.average.expression_twopanel.pdf")
fraction.of.genes
dev.off()



# Plotting gene expression bias in heads versus body in scatter plot
# Reorganize data for easy plotting
body.data = expression.data[expression.data$tissue == "body",]
body.data = body.data[,c(1,3:5)]
colnames(body.data)[2:4] = c("body.sig.hit", "body.average.expression", "body.log2FoldChange")
head.data = expression.data[expression.data$tissue == "head",]
head.data = head.data[,c(1,3:5)]
colnames(head.data)[2:4] = c("head.sig.hit","head.average.expression", "head.log2FoldChange")

# Bin genes as either significantly SD in exon usage in both, nbeither or one tissue
expression.merge = merge(head.data,body.data, by = "geneID")
expression.merge$grouping = NA
expression.merge$grouping[expression.merge$body.sig.hit == 1 & expression.merge$head.sig.hit == 1] = "sig.both"
expression.merge$grouping[expression.merge$body.sig.hit == 0 & expression.merge$head.sig.hit == 0] = "non.sig.both"
expression.merge$grouping[expression.merge$body.sig.hit == 1 & expression.merge$head.sig.hit == 0] = "sig.body.only"
expression.merge$grouping[expression.merge$body.sig.hit == 0 & expression.merge$head.sig.hit == 1] = "sig.head.only"

#Filter data for three genes with very high log2FC expression
expression.merge.filtered = expression.merge[expression.merge$head.log2FoldChange > -4,]

# Plotting log2FC in expression
head.vs.body.expression.plot = ggplot(expression.merge.filtered, aes(y=head.log2FoldChange, x=body.log2FoldChange, colour = as.factor(grouping))) +
                           geom_point(aes(y=head.log2FoldChange, x=body.log2FoldChange, colour = as.factor(grouping)), size = 2) +
                           ylim(-3.5,2) + xlim(-5.5,6) +
                           theme_bw() + scale_colour_manual(values = c("#dfb78e","#2ca1db", "#112047","#f44323")) +
                           geom_vline(xintercept = 0, linetype = 1) + geom_hline(yintercept = 0, linetype = 1)  +
                           theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                 panel.border = element_rect(colour = "black", fill=NA, size=1),
                                 axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                 axis.title=element_blank()) + theme(legend.position = "none")
head.vs.body.expression.plot = ggMarginal(head.vs.body.expression.plot, groupColour = TRUE, groupFill = TRUE)

pdf("/plas1/amardeep.singh/tmp/head.vs.body.expression.sex.bias.gene.expression.freescales.with.density.filtered.pdf", height = 10, width = 10)
head.vs.body.expression.plot
dev.off()

# Plotting sex-averaged gene expression
head.vs.body.expression.plot = ggplot(expression.merge, aes(y=(head.average.expression), x=(body.average.expression), colour = as.factor(grouping))) +
                           geom_point(aes(y=(head.average.expression), x=(body.average.expression), colour = as.factor(grouping)), size = 2) +
                           theme_bw() + scale_colour_manual(values = c("#dfb78e","#2ca1db", "#112047","#f44323")) +
                           geom_abline(slope = 1, intercept = 0) +
                           theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                 panel.border = element_rect(colour = "black", fill=NA, size=1),
                                 axis.text = element_text(face="bold", color="black",size=20, family = "Helvetica"),
                                 axis.title=element_blank()) + theme(legend.position = "none")
                           #facet_wrap(tissue~.) #+ theme(panel.spacing = unit(1, "lines"))
head.vs.body.expression.plot = ggMarginal(head.vs.body.expression.plot, groupColour = TRUE, groupFill = TRUE)

pdf("/plas1/amardeep.singh/tmp/head.vs.body.average.gene.expression.freescales.with.density.pdf", height = 10, width = 10)
head.vs.body.expression.plot
dev.off()


# Violin plot for log2FC gene expression
body.data = expression.data[expression.data$tissue == "body",]
body.data = body.data[,c(1,3:5)]
colnames(body.data)[2:4] = c("body.sig.hit", "average.expression", "body.log2FoldChange")
head.data = expression.data[expression.data$tissue == "head",]
head.data = head.data[,c(1,3:5)]
colnames(head.data)[2:4] = c("head.sig.hit","head.average.expression", "head.log2FoldChange")

log2FC.violin = ggplot(expression.data, aes(x = as.factor(tissue), y = log2FoldChange, fill = as.factor(sig.hit))) +
                geom_violin(aes(x = as.factor(tissue), y = log2FoldChange, fill = as.factor(sig.hit)), position=position_dodge(0.8)) +
                stat_summary(fun.data=mean_sdl, geom = "pointrange", color="black",position=position_dodge(0.8)) +
                theme_bw() + scale_fill_manual(values = c("#7294D4", "#5B1A18")) +
                theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                      panel.border = element_rect(colour = "black", fill=NA, size=1),
                      axis.text = element_text(face="bold", color="black",size=30, family = "Helvetica"),
                      axis.title=element_blank())

pdf("/plas1/amardeep.singh/tmp/test.violin.pdf", height = 15, width = 10)
log2FC.violin
dev.off()

#################
#################

## Comparing sex-bias in gene expression on the X versus the autosome ##
# First, I generated a list of genes and which chromosome they are in using the Flybase D. mel gtf file
#---- Bash ----
# First pull out a list of every gene in the gtf
cat dmel-all-r6.32.filtered.gtf | cut -f9 | cut -f2 | cut -c10-20 > list.of.genes.txt
# Next, pull out a list of each chromosome location
cat dmel-all-r6.32.filtered.gtf | cut -f1 > list.of.chromosomes.txt
# Merge the two files together
paste list.of.chromosomes.txt list.of.genes.txt > gene.locations.txt

# ----/----

# ---- R ----
# Read in file of gene chromosome locations
gene.locations = read.delim("/plas1/amardeep.singh/Flybase.Dmel.Genome.Release/gtf/gene.locations.txt", header = FALSE)
# Merge expression data file with gene location data
expression.data.with.chromosome = merge(expression.data, gene.locations, by.x="geneID", by.y="V2", sort = FALSE)
# Remove duplicated rows
expression.data.with.chromosome = unique(expression.data.with.chromosome)
colnames(expression.data.with.chromosome)[14]= "chromosome"

# Remove rows that haven't been binned into the predefined expression bins
expression.data.with.chromosome = expression.data.with.chromosome[!is.na(expression.data.with.chromosome$log2FC.quantile.CIs),]
# Subset data by tissue type
expression.data.with.chromosome.body = expression.data.with.chromosome[expression.data.with.chromosome$tissue == "body",]
expression.data.with.chromosome.head = expression.data.with.chromosome[expression.data.with.chromosome$tissue == "head",]

# Subset quantiles of gene expression
body.quantile.bin.1 = expression.data.with.chromosome.body[expression.data.with.chromosome.body$log2FC.quantile.CIs == 1, ]
body.quantile.bin.2 = expression.data.with.chromosome.body[expression.data.with.chromosome.body$log2FC.quantile.CIs == 2, ]
body.quantile.bin.3 = expression.data.with.chromosome.body[expression.data.with.chromosome.body$log2FC.quantile.CIs == 3, ]
body.quantile.bin.4 = expression.data.with.chromosome.body[expression.data.with.chromosome.body$log2FC.quantile.CIs == 4, ]
body.quantile.bin.5 = expression.data.with.chromosome.body[expression.data.with.chromosome.body$log2FC.quantile.CIs == 5, ]

head.quantile.bin.1 = expression.data.with.chromosome.head[expression.data.with.chromosome.head$log2FC.quantile.CIs == 1, ]
head.quantile.bin.2 = expression.data.with.chromosome.head[expression.data.with.chromosome.head$log2FC.quantile.CIs == 2, ]
head.quantile.bin.3 = expression.data.with.chromosome.head[expression.data.with.chromosome.head$log2FC.quantile.CIs == 3, ]
head.quantile.bin.4 = expression.data.with.chromosome.head[expression.data.with.chromosome.head$log2FC.quantile.CIs == 4, ]
head.quantile.bin.5 = expression.data.with.chromosome.head[expression.data.with.chromosome.head$log2FC.quantile.CIs == 5, ]

body.bin.1.fraction = nrow(body.quantile.bin.1[body.quantile.bin.1$chromosome == "X",]) / nrow(body.quantile.bin.1)
body.bin.2.fraction = nrow(body.quantile.bin.2[body.quantile.bin.2$chromosome == "X",]) / nrow(body.quantile.bin.2)
body.bin.3.fraction = nrow(body.quantile.bin.3[body.quantile.bin.3$chromosome == "X",]) / nrow(body.quantile.bin.3)
body.bin.4.fraction = nrow(body.quantile.bin.4[body.quantile.bin.4$chromosome == "X",]) / nrow(body.quantile.bin.4)
body.bin.5.fraction = nrow(body.quantile.bin.5[body.quantile.bin.5$chromosome == "X",]) / nrow(body.quantile.bin.5)
body.fraction = c(body.bin.1.fraction,body.bin.2.fraction,body.bin.3.fraction,body.bin.4.fraction,body.bin.5.fraction)
head.bin.1.fraction = nrow(head.quantile.bin.1[head.quantile.bin.1$chromosome == "X",]) / nrow(head.quantile.bin.1)
head.bin.2.fraction = nrow(head.quantile.bin.2[head.quantile.bin.2$chromosome == "X",]) / nrow(head.quantile.bin.2)
head.bin.3.fraction = nrow(head.quantile.bin.3[head.quantile.bin.3$chromosome == "X",]) / nrow(head.quantile.bin.3)
head.bin.4.fraction = nrow(head.quantile.bin.4[head.quantile.bin.4$chromosome == "X",]) / nrow(head.quantile.bin.4)
head.bin.5.fraction = nrow(head.quantile.bin.5[head.quantile.bin.5$chromosome == "X",]) / nrow(head.quantile.bin.5)
head.fraction = c(head.bin.1.fraction,head.bin.2.fraction,head.bin.3.fraction,head.bin.4.fraction,head.bin.5.fraction)

body.bin.1.resample = vector(mode = "numeric", length = 10000)
body.bin.2.resample = vector(mode = "numeric", length = 10000)
body.bin.3.resample = vector(mode = "numeric", length = 10000)
body.bin.4.resample = vector(mode = "numeric", length = 10000)
body.bin.5.resample = vector(mode = "numeric", length = 10000)

head.bin.1.resample = vector(mode = "numeric", length = 10000)
head.bin.2.resample = vector(mode = "numeric", length = 10000)
head.bin.3.resample = vector(mode = "numeric", length = 10000)
head.bin.4.resample = vector(mode = "numeric", length = 10000)
head.bin.5.resample = vector(mode = "numeric", length = 10000)

# Resampling
for (i in 1:10000){

  sample.body.quantile1 = sample(body.quantile.bin.1$chromosome, nrow(body.quantile.bin.1), replace = TRUE)
  sample.body.quantile2 = sample(body.quantile.bin.2$chromosome, nrow(body.quantile.bin.2), replace = TRUE)
  sample.body.quantile3 = sample(body.quantile.bin.3$chromosome, nrow(body.quantile.bin.3), replace = TRUE)
  sample.body.quantile4 = sample(body.quantile.bin.4$chromosome, nrow(body.quantile.bin.4), replace = TRUE)
  sample.body.quantile5 = sample(body.quantile.bin.5$chromosome, nrow(body.quantile.bin.5), replace = TRUE)

  sample.head.quantile1 = sample(head.quantile.bin.1$chromosome, nrow(head.quantile.bin.1), replace = TRUE)
  sample.head.quantile2 = sample(head.quantile.bin.2$chromosome, nrow(head.quantile.bin.2), replace = TRUE)
  sample.head.quantile3 = sample(head.quantile.bin.3$chromosome, nrow(head.quantile.bin.3), replace = TRUE)
  sample.head.quantile4 = sample(head.quantile.bin.4$chromosome, nrow(head.quantile.bin.4), replace = TRUE)
  sample.head.quantile5 = sample(head.quantile.bin.5$chromosome, nrow(head.quantile.bin.5), replace = TRUE)

  body.bin.1.resample[i] = length(sample.body.quantile1[sample.body.quantile1 == "X"]) / length(sample.body.quantile1)
  body.bin.2.resample[i] = length(sample.body.quantile2[sample.body.quantile2 == "X"]) / length(sample.body.quantile2)
  body.bin.3.resample[i] = length(sample.body.quantile3[sample.body.quantile3 == "X"]) / length(sample.body.quantile3)
  body.bin.4.resample[i] = length(sample.body.quantile4[sample.body.quantile4 == "X"]) / length(sample.body.quantile4)
  body.bin.5.resample[i] = length(sample.body.quantile5[sample.body.quantile5 == "X"]) / length(sample.body.quantile5)

  head.bin.1.resample[i] = length(sample.head.quantile1[sample.head.quantile1 == "X"]) / length(sample.head.quantile1)
  head.bin.2.resample[i] = length(sample.head.quantile2[sample.head.quantile2 == "X"]) / length(sample.head.quantile2)
  head.bin.3.resample[i] = length(sample.head.quantile3[sample.head.quantile3 == "X"]) / length(sample.head.quantile3)
  head.bin.4.resample[i] = length(sample.head.quantile4[sample.head.quantile4 == "X"]) / length(sample.head.quantile4)
  head.bin.5.resample[i] = length(sample.head.quantile5[sample.head.quantile5 == "X"]) / length(sample.head.quantile5)

print(i)
}

body.lower.CI = as.vector( c( quantile(body.bin.1.resample, 0.05)[1],
                              quantile(body.bin.2.resample, 0.05)[1],
                              quantile(body.bin.3.resample, 0.05)[1],
                              quantile(body.bin.4.resample, 0.05)[1],
                              quantile(body.bin.5.resample, 0.05)[1]))
#
body.upper.CI = as.vector( c( quantile(body.bin.1.resample, 0.95)[1],
                              quantile(body.bin.2.resample, 0.95)[1],
                              quantile(body.bin.3.resample, 0.95)[1],
                              quantile(body.bin.4.resample, 0.95)[1],
                              quantile(body.bin.5.resample, 0.95)[1]))
#
head.lower.CI = as.vector( c( quantile(head.bin.1.resample, 0.05)[1],
                              quantile(head.bin.2.resample, 0.05)[1],
                              quantile(head.bin.3.resample, 0.05)[1],
                              quantile(head.bin.4.resample, 0.05)[1],
                              quantile(head.bin.5.resample, 0.05)[1]))

#
head.upper.CI = as.vector( c( quantile(head.bin.1.resample, 0.95)[1],
                              quantile(head.bin.2.resample, 0.95)[1],
                              quantile(head.bin.3.resample, 0.95)[1],
                              quantile(head.bin.4.resample, 0.95)[1],
                              quantile(head.bin.5.resample, 0.95)[1]))


body.gene.expression.df = as.data.frame(cbind(body.fraction, body.lower.CI, body.upper.CI))
body.gene.expression.df$log2FCbin = seq(1,5,1)
body.gene.expression.df$tissue = "body"
body.gene.expression.df$expbias = c(rep("FB",2), rep("UB",1), rep("MB",2))
colnames(body.gene.expression.df) = c("fraction", "lower.CI", "upper.CI", "log2FC.bin", "tissue", "expbias")

head.gene.expression.df = as.data.frame(cbind(head.fraction, head.lower.CI, head.upper.CI))
head.gene.expression.df$log2FCbin = seq(1,5,1)
head.gene.expression.df$tissue = "head"
head.gene.expression.df$expbias = c(rep("FB.1",1),rep("FB",1), rep("UB",1), rep("MB",1), rep("MB.1",1))
colnames(head.gene.expression.df) = c("fraction", "lower.CI", "upper.CI", "log2FC.bin", "tissue", "expbias")

gene.expression.df = rbind(body.gene.expression.df,head.gene.expression.df)

fraction.of.genes.on.chromosome = ggplot(gene.expression.df, aes(y=fraction, x = as.factor(log2FC.bin), colour = expbias)) +
                                  geom_point(aes(x = as.factor(log2FC.bin), y=fraction, colour = expbias), size = 7,
                                  position = position_dodge(width = 0.5)) +
                                  geom_errorbar(aes(ymin = lower.CI, ymax = upper.CI, x = as.factor(log2FC.bin)),
                                  width = 0, position = position_dodge(width = 0.5)) +
                                  theme_bw()  + scale_colour_manual(values = c("#e09999","#0000b3", "#000000")) +
                                  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                      panel.border = element_rect(colour = "black", fill=NA, size=1),
                                      axis.text = element_text(face="bold", color="black",size=15, family = "Helvetica"),
                                      axis.title=element_blank(), legend.position = "none") +
                                  facet_grid(tissue~., scales = "free")
pdf("/plas1/amardeep.singh/tmp/gene.expression.fractions.by.on.chromosome.filtered.sept15.pdf")
fraction.of.genes.on.chromosome
dev.off()


#####
## Plotting SDIU and gene expression bias fractions on X chromosome
# Load in datasets
gene.locations = read.delim("/plas1/amardeep.singh/Flybase.Dmel.Genome.Release/gtf/gene.locations.txt", header = FALSE)
gene.locations=unique(gene.locations)
# Gene expression data from above
# original data file names: expression.data.body; expression.data.head

# Merge expression data with chromosomal location data
expression.data.body = merge(expression.data.body,gene.locations,by.x = "geneID", by.y = "V2", sort = FALSE)
expression.data.head = merge(expression.data.head,gene.locations,by.x = "geneID", by.y = "V2", sort = FALSE)
colnames(expression.data.body)[14]="chr"
colnames(expression.data.head)[14]="chr"

expression.data.body = expression.data.body[!is.na(expression.data.body$log2FC.quantile.CIs),]
expression.data.head = expression.data.head[!is.na(expression.data.head$log2FC.quantile.CIs),]

sdiu.body = expression.data.body[expression.data.body$sig.hit == 1,]
non.sdiu.body = expression.data.body[expression.data.body$sig.hit == 0,]
sdiu.head = expression.data.head[expression.data.head$sig.hit == 1,]
non.sdiu.head = expression.data.head[expression.data.head$sig.hit == 0,]

# Subset quantiles of gene expression
body.quantile.bin.1.sdiu = sdiu.body[sdiu.body$log2FC.quantile.CIs == 1, ]
body.quantile.bin.2.sdiu = sdiu.body[sdiu.body$log2FC.quantile.CIs == 2, ]
body.quantile.bin.3.sdiu = sdiu.body[sdiu.body$log2FC.quantile.CIs == 3, ]
body.quantile.bin.4.sdiu = sdiu.body[sdiu.body$log2FC.quantile.CIs == 4, ]
body.quantile.bin.5.sdiu = sdiu.body[sdiu.body$log2FC.quantile.CIs == 5, ]
body.quantile.bin.1.non.sdiu = non.sdiu.body[non.sdiu.body$log2FC.quantile.CIs == 1, ]
body.quantile.bin.2.non.sdiu = non.sdiu.body[non.sdiu.body$log2FC.quantile.CIs == 2, ]
body.quantile.bin.3.non.sdiu = non.sdiu.body[non.sdiu.body$log2FC.quantile.CIs == 3, ]
body.quantile.bin.4.non.sdiu = non.sdiu.body[non.sdiu.body$log2FC.quantile.CIs == 4, ]
body.quantile.bin.5.non.sdiu = non.sdiu.body[non.sdiu.body$log2FC.quantile.CIs == 5, ]

head.quantile.bin.1.sdiu = sdiu.head[sdiu.head$log2FC.quantile.CIs == 1, ]
head.quantile.bin.2.sdiu = sdiu.head[sdiu.head$log2FC.quantile.CIs == 2, ]
head.quantile.bin.3.sdiu = sdiu.head[sdiu.head$log2FC.quantile.CIs == 3, ]
head.quantile.bin.4.sdiu = sdiu.head[sdiu.head$log2FC.quantile.CIs == 4, ]
head.quantile.bin.5.sdiu = sdiu.head[sdiu.head$log2FC.quantile.CIs == 5, ]
head.quantile.bin.1.non.sdiu = non.sdiu.head[non.sdiu.head$log2FC.quantile.CIs == 1, ]
head.quantile.bin.2.non.sdiu = non.sdiu.head[non.sdiu.head$log2FC.quantile.CIs == 2, ]
head.quantile.bin.3.non.sdiu = non.sdiu.head[non.sdiu.head$log2FC.quantile.CIs == 3, ]
head.quantile.bin.4.non.sdiu = non.sdiu.head[non.sdiu.head$log2FC.quantile.CIs == 4, ]
#head.quantile.bin.5.non.sdiu = non.sdiu.head[non.sdiu.head$log2FC.quantile.CIs == 5, ]

body.bin.1.fraction.sdiu = nrow(body.quantile.bin.1.sdiu[body.quantile.bin.1.sdiu$chr == "X",]) / nrow(body.quantile.bin.1.sdiu)
body.bin.2.fraction.sdiu = nrow(body.quantile.bin.2.sdiu[body.quantile.bin.2.sdiu$chr == "X",]) / nrow(body.quantile.bin.2.sdiu)
body.bin.3.fraction.sdiu = nrow(body.quantile.bin.3.sdiu[body.quantile.bin.3.sdiu$chr == "X",]) / nrow(body.quantile.bin.3.sdiu)
body.bin.4.fraction.sdiu = nrow(body.quantile.bin.4.sdiu[body.quantile.bin.4.sdiu$chr == "X",]) / nrow(body.quantile.bin.4.sdiu)
body.bin.5.fraction.sdiu = nrow(body.quantile.bin.5.sdiu[body.quantile.bin.5.sdiu$chr == "X",]) / nrow(body.quantile.bin.5.sdiu)
body.fraction.sdiu = as.data.frame(c(body.bin.1.fraction.sdiu,body.bin.2.fraction.sdiu,body.bin.3.fraction.sdiu,body.bin.4.fraction.sdiu,body.bin.5.fraction.sdiu))
colnames(body.fraction.sdiu)="fraction"
body.fraction.sdiu$log2FC.bins = seq(1,5,1)
body.fraction.sdiu$tissue = "body"
body.fraction.sdiu$sdiu = as.factor(1)

body.bin.1.fraction.non.sdiu = nrow(body.quantile.bin.1.non.sdiu[body.quantile.bin.1.non.sdiu$chr == "X",]) / nrow(body.quantile.bin.1.non.sdiu)
body.bin.2.fraction.non.sdiu = nrow(body.quantile.bin.2.non.sdiu[body.quantile.bin.2.non.sdiu$chr == "X",]) / nrow(body.quantile.bin.2.non.sdiu)
body.bin.3.fraction.non.sdiu = nrow(body.quantile.bin.3.non.sdiu[body.quantile.bin.3.non.sdiu$chr == "X",]) / nrow(body.quantile.bin.3.non.sdiu)
body.bin.4.fraction.non.sdiu = nrow(body.quantile.bin.4.non.sdiu[body.quantile.bin.4.non.sdiu$chr == "X",]) / nrow(body.quantile.bin.4.non.sdiu)
body.bin.5.fraction.non.sdiu = nrow(body.quantile.bin.5.non.sdiu[body.quantile.bin.5.non.sdiu$chr == "X",]) / nrow(body.quantile.bin.5.non.sdiu)
body.fraction.non.sdiu = as.data.frame(c(body.bin.1.fraction.non.sdiu,body.bin.2.fraction.non.sdiu,body.bin.3.fraction.non.sdiu,body.bin.4.fraction.non.sdiu,body.bin.5.fraction.non.sdiu))
colnames(body.fraction.non.sdiu)="fraction"
body.fraction.non.sdiu$log2FC.bins = seq(1,5,1)
body.fraction.non.sdiu$tissue = "body"
body.fraction.non.sdiu$sdiu = as.factor(0)

body.fraction = rbind(body.fraction.sdiu, body.fraction.non.sdiu)

head.bin.1.fraction.sdiu = nrow(head.quantile.bin.1.sdiu[head.quantile.bin.1.sdiu$chr == "X",]) / nrow(head.quantile.bin.1.sdiu)
head.bin.2.fraction.sdiu = nrow(head.quantile.bin.2.sdiu[head.quantile.bin.2.sdiu$chr == "X",]) / nrow(head.quantile.bin.2.sdiu)
head.bin.3.fraction.sdiu = nrow(head.quantile.bin.3.sdiu[head.quantile.bin.3.sdiu$chr == "X",]) / nrow(head.quantile.bin.3.sdiu)
head.bin.4.fraction.sdiu = nrow(head.quantile.bin.4.sdiu[head.quantile.bin.4.sdiu$chr == "X",]) / nrow(head.quantile.bin.4.sdiu)
head.bin.5.fraction.sdiu = nrow(head.quantile.bin.5.sdiu[head.quantile.bin.5.sdiu$chr == "X",]) / nrow(head.quantile.bin.5.sdiu)
head.fraction.sdiu = as.data.frame(c(head.bin.1.fraction.sdiu,head.bin.2.fraction.sdiu,head.bin.3.fraction.sdiu,head.bin.4.fraction.sdiu,head.bin.5.fraction.sdiu))
colnames(head.fraction.sdiu)="fraction"
head.fraction.sdiu$log2FC.bins = seq(1,5,1)
head.fraction.sdiu$tissue = "head"
head.fraction.sdiu$sdiu = as.factor(1)

head.bin.1.fraction.non.sdiu = nrow(head.quantile.bin.1.non.sdiu[head.quantile.bin.1.non.sdiu$chr == "X",]) / nrow(head.quantile.bin.1.non.sdiu)
head.bin.2.fraction.non.sdiu = nrow(head.quantile.bin.2.non.sdiu[head.quantile.bin.2.non.sdiu$chr == "X",]) / nrow(head.quantile.bin.2.non.sdiu)
head.bin.3.fraction.non.sdiu = nrow(head.quantile.bin.3.non.sdiu[head.quantile.bin.3.non.sdiu$chr == "X",]) / nrow(head.quantile.bin.3.non.sdiu)
head.bin.4.fraction.non.sdiu = nrow(head.quantile.bin.4.non.sdiu[head.quantile.bin.4.non.sdiu$chr == "X",]) / nrow(head.quantile.bin.4.non.sdiu)
head.bin.5.fraction.non.sdiu = 0 # There are no genes in this bin so I just set it to 0
head.fraction.non.sdiu = as.data.frame(c(head.bin.1.fraction.non.sdiu,head.bin.2.fraction.non.sdiu,head.bin.3.fraction.non.sdiu,head.bin.4.fraction.non.sdiu,head.bin.5.fraction.non.sdiu))
colnames(head.fraction.non.sdiu)="fraction"
head.fraction.non.sdiu$log2FC.bins = seq(1,5,1)
head.fraction.non.sdiu$tissue = "head"
head.fraction.non.sdiu$sdiu = as.factor(0)

head.fraction = rbind(head.fraction.sdiu, head.fraction.non.sdiu)

gene.expression.fraction.chromosome = rbind(body.fraction,head.fraction)

body.bin.1.sdiu.resample = vector(mode = "numeric", length = 10000)
body.bin.2.sdiu.resample = vector(mode = "numeric", length = 10000)
body.bin.3.sdiu.resample = vector(mode = "numeric", length = 10000)
body.bin.4.sdiu.resample = vector(mode = "numeric", length = 10000)
body.bin.5.sdiu.resample = vector(mode = "numeric", length = 10000)
body.bin.1.non.sdiu.resample = vector(mode = "numeric", length = 10000)
body.bin.2.non.sdiu.resample = vector(mode = "numeric", length = 10000)
body.bin.3.non.sdiu.resample = vector(mode = "numeric", length = 10000)
body.bin.4.non.sdiu.resample = vector(mode = "numeric", length = 10000)
body.bin.5.non.sdiu.resample = vector(mode = "numeric", length = 10000)

head.bin.1.sdiu.resample = vector(mode = "numeric", length = 10000)
head.bin.2.sdiu.resample = vector(mode = "numeric", length = 10000)
head.bin.3.sdiu.resample = vector(mode = "numeric", length = 10000)
head.bin.4.sdiu.resample = vector(mode = "numeric", length = 10000)
head.bin.5.sdiu.resample = vector(mode = "numeric", length = 10000)
head.bin.1.non.sdiu.resample = vector(mode = "numeric", length = 10000)
head.bin.2.non.sdiu.resample = vector(mode = "numeric", length = 10000)
head.bin.3.non.sdiu.resample = vector(mode = "numeric", length = 10000)
head.bin.4.non.sdiu.resample = vector(mode = "numeric", length = 10000)
head.bin.5.non.sdiu.resample = vector(mode = "numeric", length = 10000)


# Resampling
for (i in 1:10000){

  sample.body.quantile1.sdiu = sample(body.quantile.bin.1.sdiu$chr, nrow(body.quantile.bin.1.sdiu), replace = TRUE)
  sample.body.quantile2.sdiu = sample(body.quantile.bin.2.sdiu$chr, nrow(body.quantile.bin.2.sdiu), replace = TRUE)
  sample.body.quantile3.sdiu = sample(body.quantile.bin.3.sdiu$chr, nrow(body.quantile.bin.3.sdiu), replace = TRUE)
  sample.body.quantile4.sdiu = sample(body.quantile.bin.4.sdiu$chr, nrow(body.quantile.bin.4.sdiu), replace = TRUE)
  sample.body.quantile5.sdiu = sample(body.quantile.bin.5.sdiu$chr, nrow(body.quantile.bin.5.sdiu), replace = TRUE)

  sample.body.quantile1.non.sdiu = sample(body.quantile.bin.1.non.sdiu$chr, nrow(body.quantile.bin.1.non.sdiu), replace = TRUE)
  sample.body.quantile2.non.sdiu = sample(body.quantile.bin.2.non.sdiu$chr, nrow(body.quantile.bin.2.non.sdiu), replace = TRUE)
  sample.body.quantile3.non.sdiu = sample(body.quantile.bin.3.non.sdiu$chr, nrow(body.quantile.bin.3.non.sdiu), replace = TRUE)
  sample.body.quantile4.non.sdiu = sample(body.quantile.bin.4.non.sdiu$chr, nrow(body.quantile.bin.4.non.sdiu), replace = TRUE)
  sample.body.quantile5.non.sdiu = sample(body.quantile.bin.5.non.sdiu$chr, nrow(body.quantile.bin.5.non.sdiu), replace = TRUE)

  sample.head.quantile1.sdiu = sample(head.quantile.bin.1.sdiu$chr, nrow(head.quantile.bin.1.sdiu), replace = TRUE)
  sample.head.quantile2.sdiu = sample(head.quantile.bin.2.sdiu$chr, nrow(head.quantile.bin.2.sdiu), replace = TRUE)
  sample.head.quantile3.sdiu = sample(head.quantile.bin.3.sdiu$chr, nrow(head.quantile.bin.3.sdiu), replace = TRUE)
  sample.head.quantile4.sdiu = sample(head.quantile.bin.4.sdiu$chr, nrow(head.quantile.bin.4.sdiu), replace = TRUE)
  sample.head.quantile5.sdiu = sample(head.quantile.bin.5.sdiu$chr, nrow(head.quantile.bin.5.sdiu), replace = TRUE)

  sample.head.quantile1.non.sdiu = sample(head.quantile.bin.1.non.sdiu$chr, nrow(head.quantile.bin.1.non.sdiu), replace = TRUE)
  sample.head.quantile2.non.sdiu = sample(head.quantile.bin.2.non.sdiu$chr, nrow(head.quantile.bin.2.non.sdiu), replace = TRUE)
  sample.head.quantile3.non.sdiu = sample(head.quantile.bin.3.non.sdiu$chr, nrow(head.quantile.bin.3.non.sdiu), replace = TRUE)
  sample.head.quantile4.non.sdiu = sample(head.quantile.bin.4.non.sdiu$chr, nrow(head.quantile.bin.4.non.sdiu), replace = TRUE)
  sample.head.quantile5.non.sdiu = sample(head.quantile.bin.5.non.sdiu$chr, nrow(head.quantile.bin.5.non.sdiu), replace = TRUE)

  # Resampling

  body.bin.1.sdiu.resample[i] = length(sample.body.quantile1.sdiu[sample.body.quantile1.sdiu == "X"]) / length(sample.body.quantile1.sdiu)
  body.bin.2.sdiu.resample[i] = length(sample.body.quantile2.sdiu[sample.body.quantile2.sdiu == "X"]) / length(sample.body.quantile2.sdiu)
  body.bin.3.sdiu.resample[i] = length(sample.body.quantile3.sdiu[sample.body.quantile3.sdiu == "X"]) / length(sample.body.quantile3.sdiu)
  body.bin.4.sdiu.resample[i] = length(sample.body.quantile4.sdiu[sample.body.quantile4.sdiu == "X"]) / length(sample.body.quantile4.sdiu)
  body.bin.5.sdiu.resample[i] = length(sample.body.quantile5.sdiu[sample.body.quantile5.sdiu == "X"]) / length(sample.body.quantile5.sdiu)

  body.bin.1.non.sdiu.resample[i] = length(sample.body.quantile1.non.sdiu[sample.body.quantile1.non.sdiu == "X"]) / length(sample.body.quantile1.non.sdiu)
  body.bin.2.non.sdiu.resample[i] = length(sample.body.quantile2.non.sdiu[sample.body.quantile2.non.sdiu == "X"]) / length(sample.body.quantile2.non.sdiu)
  body.bin.3.non.sdiu.resample[i] = length(sample.body.quantile3.non.sdiu[sample.body.quantile3.non.sdiu == "X"]) / length(sample.body.quantile3.non.sdiu)
  body.bin.4.non.sdiu.resample[i] = length(sample.body.quantile4.non.sdiu[sample.body.quantile4.non.sdiu == "X"]) / length(sample.body.quantile4.non.sdiu)
  body.bin.5.non.sdiu.resample[i] = length(sample.body.quantile5.non.sdiu[sample.body.quantile5.non.sdiu == "X"]) / length(sample.body.quantile5.non.sdiu)

  head.bin.1.sdiu.resample[i] = length(sample.head.quantile1.sdiu[sample.head.quantile1.sdiu == "X"]) / length(sample.head.quantile1.sdiu)
  head.bin.2.sdiu.resample[i] = length(sample.head.quantile2.sdiu[sample.head.quantile2.sdiu == "X"]) / length(sample.head.quantile2.sdiu)
  head.bin.3.sdiu.resample[i] = length(sample.head.quantile3.sdiu[sample.head.quantile3.sdiu == "X"]) / length(sample.head.quantile3.sdiu)
  head.bin.4.sdiu.resample[i] = length(sample.head.quantile4.sdiu[sample.head.quantile4.sdiu == "X"]) / length(sample.head.quantile4.sdiu)
  head.bin.5.sdiu.resample[i] = length(sample.head.quantile5.sdiu[sample.head.quantile5.sdiu == "X"]) / length(sample.head.quantile5.sdiu)

  head.bin.1.non.sdiu.resample[i] = length(sample.head.quantile1.non.sdiu[sample.head.quantile1.non.sdiu == "X"]) / length(sample.head.quantile1.non.sdiu)
  head.bin.2.non.sdiu.resample[i] = length(sample.head.quantile2.non.sdiu[sample.head.quantile2.non.sdiu == "X"]) / length(sample.head.quantile2.non.sdiu)
  head.bin.3.non.sdiu.resample[i] = length(sample.head.quantile3.non.sdiu[sample.head.quantile3.non.sdiu == "X"]) / length(sample.head.quantile3.non.sdiu)
  head.bin.4.non.sdiu.resample[i] = length(sample.head.quantile4.non.sdiu[sample.head.quantile4.non.sdiu == "X"]) / length(sample.head.quantile4.non.sdiu)
  head.bin.5.non.sdiu.resample[i] = length(sample.head.quantile5.non.sdiu[sample.head.quantile5.non.sdiu == "X"]) / length(sample.head.quantile5.non.sdiu)

print(i)
}

body.lower.CI = as.vector( c( quantile(body.bin.1.sdiu.resample, 0.05)[1],
                              quantile(body.bin.2.sdiu.resample, 0.05)[1],
                              quantile(body.bin.3.sdiu.resample, 0.05)[1],
                              quantile(body.bin.4.sdiu.resample, 0.05)[1],
                              quantile(body.bin.5.sdiu.resample, 0.05)[1],
                              quantile(body.bin.1.non.sdiu.resample, 0.05)[1],
                              quantile(body.bin.2.non.sdiu.resample, 0.05)[1],
                              quantile(body.bin.3.non.sdiu.resample, 0.05)[1],
                              quantile(body.bin.4.non.sdiu.resample, 0.05)[1],
                              quantile(body.bin.5.non.sdiu.resample, 0.05)[1]))
#
body.upper.CI = as.vector( c( quantile(body.bin.1.sdiu.resample, 0.95)[1],
                              quantile(body.bin.2.sdiu.resample, 0.95)[1],
                              quantile(body.bin.3.sdiu.resample, 0.95)[1],
                              quantile(body.bin.4.sdiu.resample, 0.95)[1],
                              quantile(body.bin.5.sdiu.resample, 0.95)[1],
                              quantile(body.bin.1.non.sdiu.resample, 0.95)[1],
                              quantile(body.bin.2.non.sdiu.resample, 0.95)[1],
                              quantile(body.bin.3.non.sdiu.resample, 0.95)[1],
                              quantile(body.bin.4.non.sdiu.resample, 0.95)[1],
                              quantile(body.bin.5.non.sdiu.resample, 0.95)[1]))
#
head.lower.CI = as.vector( c( quantile(head.bin.1.sdiu.resample, 0.05)[1],
                              quantile(head.bin.2.sdiu.resample, 0.05)[1],
                              quantile(head.bin.3.sdiu.resample, 0.05)[1],
                              quantile(head.bin.4.sdiu.resample, 0.05)[1],
                              quantile(head.bin.5.sdiu.resample, 0.05)[1],
                              quantile(head.bin.1.non.sdiu.resample, 0.05)[1],
                              quantile(head.bin.2.non.sdiu.resample, 0.05)[1],
                              quantile(head.bin.3.non.sdiu.resample, 0.05)[1],
                              quantile(head.bin.4.non.sdiu.resample, 0.05)[1],
                              0))

#
head.upper.CI = as.vector( c( quantile(head.bin.1.sdiu.resample, 0.95)[1],
                              quantile(head.bin.2.sdiu.resample, 0.95)[1],
                              quantile(head.bin.3.sdiu.resample, 0.95)[1],
                              quantile(head.bin.4.sdiu.resample, 0.95)[1],
                              quantile(head.bin.5.sdiu.resample, 0.95)[1],
                              quantile(head.bin.1.non.sdiu.resample, 0.95)[1],
                              quantile(head.bin.2.non.sdiu.resample, 0.95)[1],
                              quantile(head.bin.3.non.sdiu.resample, 0.95)[1],
                              quantile(head.bin.4.non.sdiu.resample, 0.95)[1],
                              0))

gene.expression.fraction.chromosome$lower.CI = c(body.lower.CI,head.lower.CI)
gene.expression.fraction.chromosome$upper.CI = c(body.upper.CI,head.upper.CI)
gene.expression.fraction.chromosome$expbias = c("FB","FB","UB","MB","MB","FB","FB","UB","MB","MB","FB.1","FB","UB","MB","MB.1","FB.1","FB","UB","MB","MB.1")
# Colours: darkred: #b30000; light red: #e09999; Dark Blue: #0000b3; light blue: #9999e0

fraction.of.genes.on.chromosome = ggplot(gene.expression.fraction.chromosome, aes(y=fraction, x = as.factor(log2FC.bins), colour = sdiu)) +
                                  geom_point(aes(x = as.factor(log2FC.bins), y=fraction, colour = sdiu), size = 7,
                                  position = position_dodge(width = 0.5)) +
                                  geom_errorbar(aes(ymin = lower.CI, ymax = upper.CI, x = as.factor(log2FC.bins)),
                                  width = 0, position = position_dodge(width = 0.5)) +
                                  theme_bw()  + scale_colour_manual(values = c("#800080", "#65c86e")) +
                                  theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                      panel.border = element_rect(colour = "black", fill=NA, size=1),
                                      axis.text = element_text(face="bold", color="black",size=15, family = "Helvetica"),
                                      axis.title=element_blank(), legend.position = "none") +
                                  facet_grid(tissue~., scales = "free")
pdf("/plas1/amardeep.singh/tmp/gene.expression.by.sdiu.fractions.by.on.chromosome.filtered.sept15.pdf")
fraction.of.genes.on.chromosome
dev.off()


#
