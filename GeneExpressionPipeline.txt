################################################################
######              Gene Expression Pipeline               #####
################################################################

## Author: Amardeep Singh -- amardeep.singh[at]utoronto.ca
## This program makes use of SAM files that I created separately see: STAR.Alignment.Pipeline.sh
## Originally obtained from Julia Kriener and modified

### Script Details ###
# This script is written primarily in R, Bash commands are denoted by #---- BASH ---- and end with # ---- ----
# This script is meant to determine differential gene expression between the sexes

##
# Path to sam files: /plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/RAL.mapped.files.to.ensembl/bam.files/samtools.sort.out
# PAth to gtf /plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/gtf/Drosophila_melanogaster.BDGP6.28.99.gtf.gz

# ---- R Script ----

###### Whole Body Tissue   ######

#####################################################################
###     Creating count matrices of each aligned transcriptome     ###
#####################################################################
require("GenomicFeatures")
require("Rsamtools")
require("GenomicAlignments")
require("DESeq2")


#############################
###   GENOMIC FEATURES    ###
#############################
# Read in gene model from GFF file
gtf.TxDb = makeTxDbFromGFF("/plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/gtf/Drosophila_melanogaster.BDGP6.28.99.gtf.gz", format="gtf")

# Creates a list of exons grouped by gene
exonsByGene = exonsBy(gtf.TxDb, by="gene")

# Specify BAM files to be used for generating read count matrix
bam_files.body = list.files("/plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/RAL.mapped.files.to.ensembl/bam.files/samtools.sort.out/OnlyBodySamples", pattern="SAM.sorted.trimmed.RAL", full=TRUE)
bam_files.head = list.files("/plas1/amardeep.singh/Ensembl.Dmel.Genome.Release/RAL.mapped.files.to.ensembl/bam.files/samtools.sort.out/OnlyHeadSamples", pattern="SAM.sorted.trimmed.RAL", full=TRUE)

# Indicate that bamLst are BAM files
bamLst.body = BamFileList(bam_files.body, yieldSize=100000)
bamLst.head = BamFileList(bam_files.head, yieldSize=100000)

###############################
###   GENOMIC ALIGNMENTS    ###
###############################
# Call sumarizeOvarlaps to count reads and produce sum_exp which gets inputted into DESeq2
sum_exp.body <- summarizeOverlaps(exonsByGene, bamLst.body, mode="Union", singleEnd=TRUE, ignore.strand=TRUE)
sum_exp.head <- summarizeOverlaps(exonsByGene, bamLst.head, mode="Union", singleEnd=TRUE, ignore.strand=TRUE)

############################################
###      Prepping files for DESEQ2       ###
############################################
# Differential gene expression analysis pipeline
# Provide metadata about the individuals found the count matrix
# (each column of matrix = individual, each row of RNA_Data = info about individual)
# Making sure order of individuals in RNA Data and in summarized experiment match

# Make a condition table
# Body
condition.table.body = as.data.frame(factor(colnames(sum_exp.body)))
colnames(condition.table.body) = "SampleName"
condition.table.body$condition = factor(rep(c("female", "male"), 18))
condition.table.body$condition = as.factor(condition.table.body$condition)
#condition.table = as.data.frame(condition.table)
colData(sum_exp.body) = DataFrame(condition.table.body)

# Body
condition.table.head = as.data.frame(factor(colnames(sum_exp.head)))
colnames(condition.table.head) = "SampleName"
condition.table.head$condition = factor(rep(c("female", "male"), 18))
condition.table.head$condition = as.factor(condition.table.head$condition)
#condition.table = as.data.frame(condition.table)
colData(sum_exp.head) = DataFrame(condition.table.head)

###########################################
###     Running the DESeq2 pipeline     ###
###########################################

# build the DESeqDataSet from a SummarizedExperiment

# Whole Body
dds_interaction.body = DESeqDataSet(sum_exp.body, design = ~ condition)
#run DESeq2
dds_interaction.body = DESeq(dds_interaction.body)
#name results
all_genes_interaction.body = results(dds_interaction.body, contrast=c("condition", "male", "female")) # This specifies the output such that the log2FC is male/female
all_genes_interaction.alt.body = results(dds_interaction.body)

# Head
dds_interaction.head = DESeqDataSet(sum_exp.head, design = ~ condition)
#run DESeq2
dds_interaction.head = DESeq(dds_interaction.head)
#name results
all_genes_interaction.head = results(dds_interaction.head, contrast=c("condition", "male", "female")) # This specifies the output such that the log2FC is male/female
all_genes_interaction.alt.head = results(dds_interaction.head)

# Add FlyBase ID as first column
all_genes_interaction.head$FlyBaseID= rownames(all_genes_interaction.head)
all_genes_interaction.head = all_genes_interaction.head[,c(7,1:6)]
all_genes_interaction.body$FlyBaseID= rownames(all_genes_interaction.body)
all_genes_interaction.body = all_genes_interaction.body[,c(7,1:6)]

# Save output files for both whole body and head
write.table(all_genes_interaction.body, file = "/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.body.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
write.table(all_genes_interaction.head, file = "/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.head.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)

counts(dds_interaction.body)

# Save DESeq2 RDS files
saveRDS(dds_interaction.head, file = "/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/DESeq2.output.head.rds")
saveRDS(dds_interaction.body, file = "/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/DESeq2.output.body.rds")


###########################################################################################
###     Comparing Gene Expression at genes with SD in Exon uasage to those without      ###
###########################################################################################
# --- R Code ---
rm(list=ls())
require(dplyr)
require(doBy)
require(ggplot2)
require(grid)

## Loading in data files
# Read in JunctionSeq results
junctionseq.results.body = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/BodyOutput/Aug1.Body.OnlyallGenes.results.txt", header = TRUE, sep = "\t")
junctionseq.results.head = read.table("/plas1/amardeep.singh/RNA.Seq.Data/JunctionSeq.Files/HeadOutput/Aug1.Head.OnlyallGenes.results.txt", header = TRUE, sep = "\t")
## Load in the differential gene expression data
DGE.data.body = read.table("/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.body.txt", header = TRUE, sep = "\t")
DGE.data.head = read.table("/plas1/amardeep.singh/RNA.Seq.Data/GeneExpression/RAL.DifferentialGeneExpression.head.txt", header = TRUE, sep = "\t")



## Cleaning up data files
# Remove any sites that were not tested in the JunctionSeq output
junctionseq.results.body = junctionseq.results.body[!(is.na(junctionseq.results.body$pvalue)),]
junctionseq.results.head = junctionseq.results.head[!(is.na(junctionseq.results.head$pvalue)),]
# Lets remove any rows where the expr in males or females is less than 10 in the junctionseq data
junctionseq.results.filtered.body = junctionseq.results.body[junctionseq.results.body$expr_male > 10 & junctionseq.results.body$expr_female > 10,]
junctionseq.results.filtered.head = junctionseq.results.head[junctionseq.results.head$expr_male > 10 & junctionseq.results.head$expr_female > 10,]

# Assign significant hits to JunctionSeq output and clean up columns we don't care about
junctionseq.results.filtered.body$sig.hit = NA
junctionseq.results.filtered.body$sig.hit[junctionseq.results.filtered.body$geneWisePadj <= 0.01] = 1
junctionseq.results.filtered.body$sig.hit[!(junctionseq.results.filtered.body$geneWisePadj <= 0.01)] = 0
junctionseq.results.filtered.body = junctionseq.results.filtered.body[,c(2,25:26)]
junctionseq.results.filtered.head$sig.hit = NA
junctionseq.results.filtered.head$sig.hit[junctionseq.results.filtered.head$geneWisePadj <= 0.01] = 1
junctionseq.results.filtered.head$sig.hit[!(junctionseq.results.filtered.head$geneWisePadj <= 0.01)] = 0
junctionseq.results.filtered.head = junctionseq.results.filtered.head[,c(2,25:26)]

# Collapse duplicates
junctionseq.results.body.unique = unique(junctionseq.results.filtered.body)
junctionseq.results.head.unique = unique(junctionseq.results.filtered.head)

# Merge Junctionseq/TajimasD data with DGE data
junctionseq.results.body.merged.unique = merge(junctionseq.results.body.unique, DGE.data.body, by.x = "geneID", by.y = "FlyBaseID")
junctionseq.results.head.merged.unique = merge(junctionseq.results.head.unique, DGE.data.head, by.x = "geneID", by.y = "FlyBaseID")

# Subset out the columns of interest (i.e., gene ID, TajimasD, significant differences in exon usage, and log2FC)
expression.data.body = junctionseq.results.body.merged.unique[, c(1:3,5,6)]
expression.data.head = junctionseq.results.head.merged.unique[, c(1:3,6,7)]

# Assign quartile bins for male and female biased gene expression
male.biased.body = expression.data.body[expression.data.body$log2FoldChange > 0,]
female.biased.body = expression.data.body[expression.data.body$log2FoldChange < 0,]
male.biased.head = expression.data.head[expression.data.head$log2FoldChange > 0,]
female.biased.head = expression.data.head[expression.data.head$log2FoldChange < 0,]

# Remove any rows that have an NA added to them
male.biased.body = male.biased.body[!(is.na(male.biased.body$log2FoldChange)),]
female.biased.body = female.biased.body[!(is.na(female.biased.body$log2FoldChange)),]
male.biased.head = male.biased.head[!(is.na(male.biased.head$log2FoldChange)),]
female.biased.head = female.biased.head[!(is.na(female.biased.head$log2FoldChange)),]

# Assign quartiles for both MBG and FBG
male.biased.body = male.biased.body %>% mutate(quantile = ntile(log2FoldChange, 4))
female.biased.body = female.biased.body %>% mutate(quantile = ntile(log2FoldChange, 4))
male.biased.head = male.biased.head %>% mutate(quantile = ntile(log2FoldChange, 4))
female.biased.head = female.biased.head %>% mutate(quantile = ntile(log2FoldChange, 4))

# For the male genes, lets add 4 to each quartile
male.biased.body$quantile = male.biased.body$quantile + 4
male.biased.head$quantile = male.biased.head$quantile + 4

# Merge data back
expression.data.body = rbind(male.biased.body,female.biased.body)
expression.data.body$tissue = "body"
expression.data.head = rbind(male.biased.head,female.biased.head)
expression.data.head$tissue = "head"
expression.data=rbind(expression.data.body,expression.data.head)

# Subset quantiles of gene expression
body.quantile.bin.1 = expression.data.body[expression.data.body$quantile == 1, ]
body.quantile.bin.2 = expression.data.body[expression.data.body$quantile == 2, ]
body.quantile.bin.3 = expression.data.body[expression.data.body$quantile == 3, ]
body.quantile.bin.4 = expression.data.body[expression.data.body$quantile == 4, ]
body.quantile.bin.5 = expression.data.body[expression.data.body$quantile == 5, ]
body.quantile.bin.6 = expression.data.body[expression.data.body$quantile == 6, ]
body.quantile.bin.7 = expression.data.body[expression.data.body$quantile == 7, ]
body.quantile.bin.8 = expression.data.body[expression.data.body$quantile == 8, ]

head.quantile.bin.1 = expression.data.head[expression.data.head$quantile == 1, ]
head.quantile.bin.2 = expression.data.head[expression.data.head$quantile == 2, ]
head.quantile.bin.3 = expression.data.head[expression.data.head$quantile == 3, ]
head.quantile.bin.4 = expression.data.head[expression.data.head$quantile == 4, ]
head.quantile.bin.5 = expression.data.head[expression.data.head$quantile == 5, ]
head.quantile.bin.6 = expression.data.head[expression.data.head$quantile == 6, ]
head.quantile.bin.7 = expression.data.head[expression.data.head$quantile == 7, ]
head.quantile.bin.8 = expression.data.head[expression.data.head$quantile == 8, ]

# Fractions in each quantile
body.df.fraction = c( (nrow(body.quantile.bin.1[body.quantile.bin.1$sig.hit == 1,])) / (nrow(body.quantile.bin.1[body.quantile.bin.1$sig.hit == 0,])),
                      (nrow(body.quantile.bin.2[body.quantile.bin.2$sig.hit == 1,])) / (nrow(body.quantile.bin.2[body.quantile.bin.2$sig.hit == 0,])),
                      (nrow(body.quantile.bin.3[body.quantile.bin.3$sig.hit == 1,])) / (nrow(body.quantile.bin.3[body.quantile.bin.3$sig.hit == 0,])),
                      (nrow(body.quantile.bin.4[body.quantile.bin.4$sig.hit == 1,])) / (nrow(body.quantile.bin.4[body.quantile.bin.4$sig.hit == 0,])),
                      (nrow(body.quantile.bin.5[body.quantile.bin.5$sig.hit == 1,])) / (nrow(body.quantile.bin.5[body.quantile.bin.5$sig.hit == 0,])),
                      (nrow(body.quantile.bin.6[body.quantile.bin.6$sig.hit == 1,])) / (nrow(body.quantile.bin.6[body.quantile.bin.6$sig.hit == 0,])),
                      (nrow(body.quantile.bin.7[body.quantile.bin.7$sig.hit == 1,])) / (nrow(body.quantile.bin.7[body.quantile.bin.7$sig.hit == 0,])),
                      (nrow(body.quantile.bin.8[body.quantile.bin.8$sig.hit == 1,])) / (nrow(body.quantile.bin.8[body.quantile.bin.8$sig.hit == 0,])))

head.df.fraction = c( (nrow(head.quantile.bin.1[head.quantile.bin.1$sig.hit == 1,])) / (nrow(head.quantile.bin.1[head.quantile.bin.1$sig.hit == 0,])),
                      (nrow(head.quantile.bin.2[head.quantile.bin.2$sig.hit == 1,])) / (nrow(head.quantile.bin.2[head.quantile.bin.2$sig.hit == 0,])),
                      (nrow(head.quantile.bin.3[head.quantile.bin.3$sig.hit == 1,])) / (nrow(head.quantile.bin.3[head.quantile.bin.3$sig.hit == 0,])),
                      (nrow(head.quantile.bin.4[head.quantile.bin.4$sig.hit == 1,])) / (nrow(head.quantile.bin.4[head.quantile.bin.4$sig.hit == 0,])),
                      (nrow(head.quantile.bin.5[head.quantile.bin.5$sig.hit == 1,])) / (nrow(head.quantile.bin.5[head.quantile.bin.5$sig.hit == 0,])),
                      (nrow(head.quantile.bin.6[head.quantile.bin.6$sig.hit == 1,])) / (nrow(head.quantile.bin.6[head.quantile.bin.6$sig.hit == 0,])),
                      (nrow(head.quantile.bin.7[head.quantile.bin.7$sig.hit == 1,])) / (nrow(head.quantile.bin.7[head.quantile.bin.7$sig.hit == 0,])),
                      (nrow(head.quantile.bin.8[head.quantile.bin.8$sig.hit == 1,])) / (nrow(head.quantile.bin.8[head.quantile.bin.8$sig.hit == 0,])))

## Plotting ##
# First plot will be the fraction of genes in gene expression quantiles that are significantly DEU or not
# Body Data
body.quantile.1.fraction = vector(mode = "numeric", length = 10000)
body.quantile.2.fraction = vector(mode = "numeric", length = 10000)
body.quantile.3.fraction = vector(mode = "numeric", length = 10000)
body.quantile.4.fraction = vector(mode = "numeric", length = 10000)
body.quantile.5.fraction = vector(mode = "numeric", length = 10000)
body.quantile.6.fraction = vector(mode = "numeric", length = 10000)
body.quantile.7.fraction = vector(mode = "numeric", length = 10000)
body.quantile.8.fraction = vector(mode = "numeric", length = 10000)

# Head Data
head.quantile.1.fraction = vector(mode = "numeric", length = 10000)
head.quantile.2.fraction = vector(mode = "numeric", length = 10000)
head.quantile.3.fraction = vector(mode = "numeric", length = 10000)
head.quantile.4.fraction = vector(mode = "numeric", length = 10000)
head.quantile.5.fraction = vector(mode = "numeric", length = 10000)
head.quantile.6.fraction = vector(mode = "numeric", length = 10000)
head.quantile.7.fraction = vector(mode = "numeric", length = 10000)
head.quantile.8.fraction = vector(mode = "numeric", length = 10000)

# Resampling
for (i in 1:10000){

  sample.body.quantile1 = sample(body.quantile.bin.1$sig.hit, nrow(body.quantile.bin.1), replace = TRUE)
  sample.body.quantile2 = sample(body.quantile.bin.2$sig.hit, nrow(body.quantile.bin.2), replace = TRUE)
  sample.body.quantile3 = sample(body.quantile.bin.3$sig.hit, nrow(body.quantile.bin.3), replace = TRUE)
  sample.body.quantile4 = sample(body.quantile.bin.4$sig.hit, nrow(body.quantile.bin.4), replace = TRUE)
  sample.body.quantile5 = sample(body.quantile.bin.5$sig.hit, nrow(body.quantile.bin.5), replace = TRUE)
  sample.body.quantile6 = sample(body.quantile.bin.6$sig.hit, nrow(body.quantile.bin.6), replace = TRUE)
  sample.body.quantile7 = sample(body.quantile.bin.7$sig.hit, nrow(body.quantile.bin.7), replace = TRUE)
  sample.body.quantile8 = sample(body.quantile.bin.8$sig.hit, nrow(body.quantile.bin.8), replace = TRUE)

  sample.head.quantile1 = sample(head.quantile.bin.1$sig.hit, nrow(head.quantile.bin.1), replace = TRUE)
  sample.head.quantile2 = sample(head.quantile.bin.2$sig.hit, nrow(head.quantile.bin.2), replace = TRUE)
  sample.head.quantile3 = sample(head.quantile.bin.3$sig.hit, nrow(head.quantile.bin.3), replace = TRUE)
  sample.head.quantile4 = sample(head.quantile.bin.4$sig.hit, nrow(head.quantile.bin.4), replace = TRUE)
  sample.head.quantile5 = sample(head.quantile.bin.5$sig.hit, nrow(head.quantile.bin.5), replace = TRUE)
  sample.head.quantile6 = sample(head.quantile.bin.6$sig.hit, nrow(head.quantile.bin.6), replace = TRUE)
  sample.head.quantile7 = sample(head.quantile.bin.7$sig.hit, nrow(head.quantile.bin.7), replace = TRUE)
  sample.head.quantile8 = sample(head.quantile.bin.8$sig.hit, nrow(head.quantile.bin.8), replace = TRUE)

  body.quantile.1.fraction[i] = length(sample.body.quantile1[sample.body.quantile1 == 1]) / length(sample.body.quantile1[sample.body.quantile1 == 0])
  body.quantile.2.fraction[i] = length(sample.body.quantile2[sample.body.quantile2 == 1]) / length(sample.body.quantile2[sample.body.quantile2 == 0])
  body.quantile.3.fraction[i] = length(sample.body.quantile3[sample.body.quantile3 == 1]) / length(sample.body.quantile3[sample.body.quantile3 == 0])
  body.quantile.4.fraction[i] = length(sample.body.quantile4[sample.body.quantile4 == 1]) / length(sample.body.quantile4[sample.body.quantile4 == 0])
  body.quantile.5.fraction[i] = length(sample.body.quantile5[sample.body.quantile5 == 1]) / length(sample.body.quantile5[sample.body.quantile5 == 0])
  body.quantile.6.fraction[i] = length(sample.body.quantile6[sample.body.quantile6 == 1]) / length(sample.body.quantile6[sample.body.quantile6 == 0])
  body.quantile.7.fraction[i] = length(sample.body.quantile7[sample.body.quantile7 == 1]) / length(sample.body.quantile7[sample.body.quantile7 == 0])
  body.quantile.8.fraction[i] = length(sample.body.quantile8[sample.body.quantile8 == 1]) / length(sample.body.quantile8[sample.body.quantile8 == 0])

  head.quantile.1.fraction[i] = length(sample.head.quantile1[sample.head.quantile1 == 1]) / length(sample.head.quantile1[sample.head.quantile1 == 0])
  head.quantile.2.fraction[i] = length(sample.head.quantile2[sample.head.quantile2 == 1]) / length(sample.head.quantile2[sample.head.quantile2 == 0])
  head.quantile.3.fraction[i] = length(sample.head.quantile3[sample.head.quantile3 == 1]) / length(sample.head.quantile3[sample.head.quantile3 == 0])
  head.quantile.4.fraction[i] = length(sample.head.quantile4[sample.head.quantile4 == 1]) / length(sample.head.quantile4[sample.head.quantile4 == 0])
  head.quantile.5.fraction[i] = length(sample.head.quantile5[sample.head.quantile5 == 1]) / length(sample.head.quantile5[sample.head.quantile5 == 0])
  head.quantile.6.fraction[i] = length(sample.head.quantile6[sample.head.quantile6 == 1]) / length(sample.head.quantile6[sample.head.quantile6 == 0])
  head.quantile.7.fraction[i] = length(sample.head.quantile7[sample.head.quantile7 == 1]) / length(sample.head.quantile7[sample.head.quantile7 == 0])
  head.quantile.8.fraction[i] = length(sample.head.quantile8[sample.head.quantile8 == 1]) / length(sample.head.quantile8[sample.head.quantile8 == 0])

  print (i)
}

body.lower.CI = as.vector( c( quantile(body.quantile.1.fraction, 0.05)[1],
                              quantile(body.quantile.2.fraction, 0.05)[1],
                              quantile(body.quantile.3.fraction, 0.05)[1],
                              quantile(body.quantile.4.fraction, 0.05)[1],
                              quantile(body.quantile.5.fraction, 0.05)[1],
                              quantile(body.quantile.6.fraction, 0.05)[1],
                              quantile(body.quantile.7.fraction, 0.05)[1],
                              quantile(body.quantile.8.fraction, 0.05)[1]))

body.high.CI = as.vector( c( quantile(body.quantile.1.fraction, 0.95)[1],
                              quantile(body.quantile.2.fraction, 0.95)[1],
                              quantile(body.quantile.3.fraction, 0.95)[1],
                              quantile(body.quantile.4.fraction, 0.95)[1],
                              quantile(body.quantile.5.fraction, 0.95)[1],
                              quantile(body.quantile.6.fraction, 0.95)[1],
                              quantile(body.quantile.7.fraction, 0.95)[1],
                              quantile(body.quantile.8.fraction, 0.95)[1]))
#
head.lower.CI = as.vector( c( quantile(head.quantile.1.fraction, 0.05)[1],
                              quantile(head.quantile.2.fraction, 0.05)[1],
                              quantile(head.quantile.3.fraction, 0.05)[1],
                              quantile(head.quantile.4.fraction, 0.05)[1],
                              quantile(head.quantile.5.fraction, 0.05)[1],
                              quantile(head.quantile.6.fraction, 0.05)[1],
                              quantile(head.quantile.7.fraction, 0.05)[1],
                              quantile(head.quantile.8.fraction, 0.05)[1]))

head.high.CI = as.vector( c( quantile(head.quantile.1.fraction, 0.95)[1],
                              quantile(head.quantile.2.fraction, 0.95)[1],
                              quantile(head.quantile.3.fraction, 0.95)[1],
                              quantile(head.quantile.4.fraction, 0.95)[1],
                              quantile(head.quantile.5.fraction, 0.95)[1],
                              quantile(head.quantile.6.fraction, 0.95)[1],
                              quantile(head.quantile.7.fraction, 0.95)[1],
                              quantile(head.quantile.8.fraction, 0.95)[1]))

body.gene.expression.df = as.data.frame(cbind(body.df.fraction, body.lower.CI, body.high.CI))
body.gene.expression.df$quantile = seq(1,8,1)
body.gene.expression.df$tissue = "body"
colnames(body.gene.expression.df) = c("fraction", "lower.CI", "upper.CI", "quantile", "tissue")
head.gene.expression.df = as.data.frame(cbind(head.df.fraction, head.lower.CI, head.high.CI))
head.gene.expression.df$quantile = seq(1,8,1)
head.gene.expression.df$tissue = "head"
colnames(head.gene.expression.df) = c("fraction", "lower.CI", "upper.CI", "quantile", "tissue")

gene.expression.df = rbind(body.gene.expression.df,head.gene.expression.df)

# Plotting fractions
fraction.of.genes = ggplot(gene.expression.df, aes(y=fraction, x = as.factor(quantile))) +
                           geom_point(aes(x = as.factor(quantile), y=fraction), size = 10,
                           position = position_dodge(width = 0.5)) +
                           geom_errorbar(aes(ymin = lower.CI, ymax = upper.CI, x = as.factor(quantile)),
                           width = 0, position = position_dodge(width = 0.5)) +
                           theme_bw()  + scale_colour_manual(values = c("#E74C3C")) +
                           theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                 panel.border = element_rect(colour = "black", fill=NA, size=1),
                                 axis.text = element_text(face="bold", color="black",size=15, family = "Helvetica"),
                                 axis.title=element_blank(), legend.position = "none") +
                          facet_grid(tissue~., scales = "free") + theme(panel.spacing = unit(2, "lines"))
pdf("/plas1/amardeep.singh/tmp/gene.expression.fractions.pdf")
fraction.of.genes
dev.off()


# Plotting gene expression as an index
sexbias.exonbias.plot = ggplot(expression.data, aes(y=baseMean, x=log2FoldChange, colour = as.factor(sig.hit))) +
                           geom_point(aes(y=baseMean, x=log2FoldChange, colour = as.factor(sig.hit)), size = 2) + xlim(c(-15,15)) +
                           theme_bw() + scale_colour_manual(values = c("#7294D4", "#5B1A18")) + geom_vline(xintercept = 0, linetype = 2) +
                           theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
                                 panel.border = element_rect(colour = "black", fill=NA, size=1),
                                 axis.text = element_text(face="bold", color="black",size=10, family = "Helvetica"),
                                 axis.title=element_blank(), legend.position = "none") +
                           facet_wrap(tissue~., scales = "free_y") #+ theme(panel.spacing = unit(1, "lines"))

pdf("/plas1/amardeep.singh/tmp/gene.expression.continuous.pdf")
sexbias.exonbias.plot
dev.off()





#
